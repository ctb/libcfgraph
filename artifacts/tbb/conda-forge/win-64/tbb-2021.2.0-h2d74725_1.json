{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge",
   "https://repo.anaconda.com/pkgs/main"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.10.1",
  "dev_url": "https://github.com/oneapi-src/oneTBB",
  "doc_url": "https://software.intel.com/en-us/oneapi-tbb-documentation",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "anton-malakhov",
    "jschueller",
    "AlexVeprev"
   ]
  },
  "home": "https://github.com/oneapi-src/oneTBB",
  "identifiers": [],
  "keywords": [],
  "license": "Apache-2.0",
  "license_file": [
   "LICENSE.txt",
   "third-party-programs.txt"
  ],
  "root_pkgs": [
   "anaconda-client 1.7.2 pyhd8ed1ab_1",
   "attrs 21.2.0 pyhd8ed1ab_0",
   "beautifulsoup4 4.9.3 pyhb0f4dca_0",
   "brotlipy 0.7.0 py36h68aa20f_1001",
   "bzip2 1.0.8 h8ffe710_4",
   "ca-certificates 2021.5.30 h5b45459_0",
   "certifi 2021.5.30 py36ha15d459_0",
   "cffi 1.14.5 py36he58ceb7_0",
   "chardet 4.0.0 py36ha15d459_1",
   "click 8.0.1 py36ha15d459_0",
   "clyent 1.2.2 py_1",
   "colorama 0.4.4 pyh9f0ad1d_0",
   "conda 4.10.1 py36ha15d459_0",
   "conda-build 3.21.4 py36ha15d459_0",
   "conda-env 2.6.0 1",
   "conda-forge-ci-setup 3.9.4 py36h6e52ffc_0",
   "conda-package-handling 1.7.3 py36hb5e345e_0",
   "console_shortcut 0.1.1 4",
   "cryptography 3.4.7 py36hd0de82c_0",
   "decorator 5.0.9 pyhd8ed1ab_0",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "glob2 0.7 py_0",
   "idna 2.10 pyhd3eb1b0_0",
   "importlib-metadata 4.5.0 py36ha15d459_0",
   "ipython_genutils 0.2.0 py_1",
   "jinja2 3.0.1 pyhd8ed1ab_0",
   "jsonschema 3.2.0 pyhd8ed1ab_3",
   "jupyter_core 4.7.1 py36ha15d459_0",
   "libarchive 3.5.1 hb45042f_2",
   "libiconv 1.16 he774522_0",
   "liblief 0.11.5 h0e60522_0",
   "libxml2 2.9.12 hf5bbc77_0",
   "lz4-c 1.9.3 h8ffe710_0",
   "lzo 2.10 he774522_1000",
   "m2-bash 4.3.042 5",
   "m2-ca-certificates 20150426 103",
   "m2-coreutils 8.25 102",
   "m2-curl 7.47.1 3",
   "m2-db 5.3.28 3",
   "m2-expat 2.1.1 2",
   "m2-findutils 4.6.0 2",
   "m2-gcc-libs 5.3.0 4",
   "m2-gdbm 1.11 4",
   "m2-git 2.8.1 2",
   "m2-gmp 6.1.0 3",
   "m2-gzip 1.7 2",
   "m2-heimdal 1.5.3 10",
   "m2-heimdal-libs 1.5.3 10",
   "m2-icu 56.1 2",
   "m2-info 6.0 2",
   "m2-less 481 2",
   "m2-libcrypt 1.3 2",
   "m2-libcurl 7.47.1 3",
   "m2-libdb 5.3.28 3",
   "m2-libedit 3.1 20150326",
   "m2-libexpat 2.1.1 2",
   "m2-libffi 3.2.1 2",
   "m2-libgdbm 1.11 4",
   "m2-libiconv 1.14 3",
   "m2-libidn 1.32 2",
   "m2-libintl 0.19.7 4",
   "m2-libmetalink 0.1.2 3",
   "m2-libopenssl 1.0.2.g 2",
   "m2-libp11-kit 0.23.2 2",
   "m2-libpcre 8.38 2",
   "m2-libreadline 6.3.008 8",
   "m2-libsqlite 3.10.0.0 2",
   "m2-libssh2 1.6.0 2",
   "m2-libtasn1 4.7 2",
   "m2-msys2-runtime 2.5.0.17080.65c939c 3",
   "m2-ncurses 6.0.20160220 2",
   "m2-openssh 7.1p2 2",
   "m2-openssl 1.0.2.g 2",
   "m2-p11-kit 0.23.2 2",
   "m2-patch 2.7.5 2",
   "m2-perl 5.22.1 2",
   "m2-perl-authen-sasl 2.16 3",
   "m2-perl-convert-binhex 1.123 3",
   "m2-perl-encode-locale 1.04 2",
   "m2-perl-error 0.17024 2",
   "m2-perl-file-listing 6.04 3",
   "m2-perl-html-parser 3.71 4",
   "m2-perl-html-tagset 3.20 3",
   "m2-perl-http-cookies 6.01 3",
   "m2-perl-http-daemon 6.01 3",
   "m2-perl-http-date 6.02 3",
   "m2-perl-http-message 6.06 3",
   "m2-perl-http-negotiate 6.01 3",
   "m2-perl-io-socket-ssl 2.016 2",
   "m2-perl-io-stringy 2.111 2",
   "m2-perl-libwww 6.13 2",
   "m2-perl-lwp-mediatypes 6.02 3",
   "m2-perl-mailtools 2.14 2",
   "m2-perl-mime-tools 5.506 2",
   "m2-perl-net-http 6.09 2",
   "m2-perl-net-smtp-ssl 1.02 2",
   "m2-perl-net-ssleay 1.72 2",
   "m2-perl-termreadkey 2.33 2",
   "m2-perl-timedate 2.30 3",
   "m2-perl-uri 1.68 2",
   "m2-perl-www-robotrules 6.02 3",
   "m2-sed 4.2.2 3",
   "m2-vim 7.4.1721 2",
   "m2-zlib 1.2.8 4",
   "m2w64-gcc-libgfortran 5.3.0 6",
   "m2w64-gcc-libs 5.3.0 7",
   "m2w64-gcc-libs-core 5.3.0 7",
   "m2w64-gmp 6.1.0 2",
   "m2w64-libwinpthread-git 5.0.0.4634.697f757 2",
   "markupsafe 2.0.1 py36h68aa20f_0",
   "menuinst 1.4.16 py36h9f0ad1d_1",
   "msys2-conda-epoch 20160418 1",
   "nbformat 5.1.3 pyhd8ed1ab_0",
   "openssl 1.1.1k h8ffe710_0",
   "pip 21.1.2 pyhd8ed1ab_0",
   "pkginfo 1.7.0 pyhd8ed1ab_0",
   "powershell_shortcut 0.0.1 3",
   "psutil 5.8.0 py36h68aa20f_1",
   "py-lief 0.11.5 py36he2d232f_0",
   "pycosat 0.6.3 py36h68aa20f_1006",
   "pycparser 2.20 py_2",
   "pyopenssl 20.0.1 pyhd3eb1b0_1",
   "pyrsistent 0.17.3 py36h68aa20f_2",
   "pysocks 1.7.1 py36ha15d459_3",
   "python 3.6.13 h39d44d4_0_cpython",
   "python-dateutil 2.8.1 py_0",
   "python-libarchive-c 3.1 py36ha15d459_0",
   "python_abi 3.6 2_cp36m",
   "pytz 2021.1 pyhd8ed1ab_0",
   "pywin32 300 py36h68aa20f_0",
   "pyyaml 5.4.1 py36h68aa20f_0",
   "requests 2.25.1 pyhd3eb1b0_0",
   "ripgrep 13.0.0 h7f3b576_0",
   "ruamel_yaml 0.15.80 py36h68aa20f_1004",
   "setuptools 49.6.0 py36ha15d459_3",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "six 1.16.0 pyhd3eb1b0_0",
   "soupsieve 2.0.1 py_1",
   "sqlite 3.36.0 h2bbff1b_0",
   "tqdm 4.61.1 pyhd3eb1b0_1",
   "traitlets 4.3.3 py36h9f0ad1d_1",
   "typing_extensions 3.10.0.0 pyha770c72_0",
   "urllib3 1.26.4 pyhd3eb1b0_0",
   "vc 14.2 h21ff451_1",
   "vs2008_express_vc_python_patch 1.0.0 0",
   "vs2015_runtime 14.27.29016 h5e58377_2",
   "wheel 0.36.2 pyhd3eb1b0_0",
   "wincertstore 0.2 py36ha15d459_1006",
   "win_inet_pton 1.1.0 py36ha15d459_2",
   "xz 5.2.5 h62dcd97_1",
   "yaml 0.2.5 he774522_0",
   "zipp 3.4.1 pyhd8ed1ab_0",
   "zlib 1.2.11 h62dcd97_1010",
   "zstd 1.5.0 h6255e5f_0"
  ],
  "summary": "High level abstract threading library",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "vs2017",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "vs2017",
  "extend_keys": [
   "extend_keys",
   "ignore_build_only_deps",
   "pin_run_as_build",
   "ignore_version"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.8.* *_cpython",
  "r_base": "3.4",
  "target_platform": "win-64",
  "tbb": "2020",
  "vc": "14"
 },
 "files": [
  "bin/tbb12.dll",
  "bin/tbbmalloc.dll",
  "bin/tbbmalloc_proxy.dll"
 ],
 "index": {
  "arch": "x86_64",
  "build": "h2d74725_1",
  "build_number": 1,
  "depends": [
   "vc >=14.1,<15.0a0",
   "vs2015_runtime >=14.16.27012"
  ],
  "license": "Apache-2.0",
  "name": "tbb",
  "platform": "win",
  "subdir": "win-64",
  "timestamp": 1624628930755,
  "version": "2021.2.0"
 },
 "metadata_version": 1,
 "name": "tbb",
 "raw_recipe": "{% set version = \"2021.2.0\" %}\n\n{% set vmajor = version.split('.')[0]|int %}\n{% set vminor = version.split('.')[1]|int %}\n{% set vpatch = version.split('.')[2]|int %}\n{% set vbinary = vmajor - 2009 %}\n\n{% set vtag = \"v%d.%d.%d\" % (vmajor, vminor, vpatch) %}\n\n# Official patch version for the first release of 2021 is 1,\n# but internal patch version is 0, handle it for interface version.\n{% set vinterface = \"%d\" % (vbinary * 1000 + vminor * 10 + (vpatch if vmajor != 2021 or vminor != 1 else 0)) %}\n\n{% set cmake_args = \"$CMAKE_ARGS\" %}                                                 # [not win]\n{% set cmake_args = \"-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%PREFIX%\" %}  # [win]\n\n# Use specific test list agreed with TBB team to cover core functionality on high level.\n# Execution of all tests is too heavy task for packaging CI.\n{% set tests = \"test_parallel_for test_tbb_header conformance_version test_malloc_compliance test_flow_graph test_arena_constraints\" %}\n{% set ctest_regex = \"^(%s)$\" % (tests.replace(' ', '|')) %}\n\n{% set tbb4py_build_dir = \"build_$PKG_HASH\" %}   # [not win]\n{% set tbb4py_build_dir = \"build_%PKG_HASH%\" %}  # [win]\n\npackage:\n  name: tbb\n  version: {{ version }}\n\nsource:\n  fn: {{ vtag }}.tar.gz\n  url: https://github.com/oneapi-src/oneTBB/archive/{{ vtag }}.tar.gz\n  sha256: cee20b0a71d977416f3e3b4ec643ee4f38cedeb2a9ff015303431dd9d8d79854\n  patches:\n    - 0001-CMake-fix-Clang-compiler-detection-on-macOS.patch  # [osx]\n    - 0002-CMake-fix-tbb4py-installation.patch\n    - 0003-Fix-cross-build-for-arm64-on-macOS.patch           # [osx]\n    - 0004-Fix-concurrent-vector-on-win.patch                 # [win]\n    - 0005-Enable-malloc-tests-on-non-x86.patch\n    - 0006-Fix-md-option-for-AppleClang.patch                 # [osx]\n\nbuild:\n  number: 1\n\nrequirements:\n  build:\n    - python *\n    - {{ compiler('cxx') }}\n    - ninja  # [win]\n    - make   # [not win]\n    - cmake\n\ntest:\n  requires:\n    - python *               # any python version is ok for sake of testing of shared libraries\n  commands:\n    - python -c \"import ctypes; assert {{ vinterface }} == ctypes.cdll[r'libtbb.so.{{ vbinary }}.{{ vminor }}']       ['TBB_runtime_interface_version']()\"  # [linux]\n    - python -c \"import ctypes; assert {{ vinterface }} == ctypes.cdll[r'libtbb.{{ vbinary }}.{{ vminor }}${SHLIB_EXT}']['TBB_runtime_interface_version']()\"  # [unix and not linux]\n    - python -c \"import ctypes, os; os.add_dll_directory(os.environ['LIBRARY_BIN']); assert {{ vinterface }} == ctypes.cdll[r'tbb{{ vbinary }}.dll'] ['TBB_runtime_interface_version']()\"  # [win]\n\noutputs:\n  - name: tbb\n    build:\n      script:\n        - set CMAKE_GENERATOR=Ninja  # [win]\n        - cmake {{ cmake_args }} -DTBB_TEST=OFF -S . -B build\n        - cmake --build build --parallel\n        - cmake -DCOMPONENT=runtime -P build/cmake_install.cmake\n\n  - name: tbb-devel\n    build:\n      script:\n        - set CMAKE_GENERATOR=Ninja  # [win]\n        - cmake {{ cmake_args }} -DTBB_TEST=OFF -S . -B build\n        - cmake --build build --parallel\n        - cmake -DCOMPONENT=devel -P build/cmake_install.cmake\n      run_exports:\n        - tbb >={{ version }}\n    requirements:\n      build:\n        - python *\n        - {{ compiler('cxx') }}\n        - ninja  # [win]\n        - make   # [not win]\n        - cmake >=3.13\n\n      run:\n        - {{ pin_subpackage('tbb', exact=True) }}        # development package is for specific version of tbb\n    test:\n      requires:\n        - {{ compiler('cxx') }}\n        - ninja  # [win]\n        - make   # [not win]\n        - cmake\n      source_files:\n        - cmake\n        - test\n        - CMakeLists.txt\n        - include  # some tests depend on files from include\n        - src      # some tests depend on files from src\n      commands:\n        - set CMAKE_GENERATOR=Ninja  # [win]\n        # Setting TBB_DIR=TRUE is needed to use libraries from the tested package,\n        # but do not build them from sources; real path to TBBConfig files is not required,\n        # because CMake will successfully find installed tested package.\n        - cmake {{ cmake_args }} -DTBB_TEST=ON -DTBB_DIR=TRUE -S . -B test_build\n        - cmake --build test_build --target {{ tests }} --parallel  # build tests\n        - cd test_build\n        - ctest -R \"{{ ctest_regex }}\" --output-on-failure\n\n  - name: tbb4py\n    build:\n      script:\n        - set CMAKE_GENERATOR=Ninja  # [win]\n        - cmake {{ cmake_args }} -DTBB4PY_BUILD=ON -DTBB_TEST=OFF -S . -B {{ tbb4py_build_dir }}\n        - cmake --build {{ tbb4py_build_dir }} --target python_build --parallel\n        - cmake -DCOMPONENT=tbb4py -P {{ tbb4py_build_dir }}/cmake_install.cmake\n    requirements:\n      build:\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - {{ compiler('cxx') }}\n        - ninja  # [win]\n        - make   # [not win]\n        - cmake\n        - swig\n      host:\n        - python\n        - {{ pin_subpackage('tbb-devel', exact=True) }}\n      run:\n        - tbb >={{ version }}                            # while python module works with any compatible tbb...\n        - python\n    test:\n      requires:\n        - python\n        - {{ pin_subpackage('tbb', exact=True) }}        # we want to test with this specific tbb package\n      imports:\n        - tbb\n        - TBB\n      commands:\n        - python -m TBB -h\n        - python -m tbb -h\n        - python -m tbb test\n    about:\n      summary: TBB module for Python\n      license: Apache 2.0\n      dev_url: https://github.com/oneapi-src/oneTBB\n\nabout:\n  home: https://github.com/oneapi-src/oneTBB\n  license: Apache-2.0\n  license_file:\n    - LICENSE.txt\n    - third-party-programs.txt\n  summary: High level abstract threading library\n  dev_url: https://github.com/oneapi-src/oneTBB\n  doc_url: https://software.intel.com/en-us/oneapi-tbb-documentation\n\nextra:\n  recipe-maintainers:\n    - anton-malakhov\n    - jschueller\n    - AlexVeprev\n",
 "rendered_recipe": {
  "about": {
   "dev_url": "https://github.com/oneapi-src/oneTBB",
   "doc_url": "https://software.intel.com/en-us/oneapi-tbb-documentation",
   "home": "https://github.com/oneapi-src/oneTBB",
   "license": "Apache-2.0",
   "license_file": [
    "LICENSE.txt",
    "third-party-programs.txt"
   ],
   "summary": "High level abstract threading library"
  },
  "build": {
   "number": "1",
   "script": [
    "set CMAKE_GENERATOR=Ninja",
    "cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%PREFIX% -DTBB_TEST=OFF -S . -B build",
    "cmake --build build --parallel",
    "cmake -DCOMPONENT=runtime -P build/cmake_install.cmake"
   ],
   "string": "h2d74725_1"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "AlexVeprev",
    "anton-malakhov",
    "jschueller"
   ]
  },
  "package": {
   "name": "tbb",
   "version": "2021.2.0"
  },
  "requirements": {
   "build": [
    "ca-certificates 2021.5.30 h5b45459_0",
    "cmake 3.20.5 h39d44d4_0",
    "ninja 1.10.2 h5362a0b_0",
    "openssl 1.1.1k h8ffe710_0",
    "python 3.9.5 h7840368_0_cpython",
    "sqlite 3.36.0 h8ffe710_0",
    "tzdata 2021a he74cb21_0",
    "ucrt 10.0.20348.0 h57928b3_0",
    "vc 14.2 hb210afc_5",
    "vs2015_runtime 14.29.30037 h902a5da_5",
    "vs2017_win-64 19.16.27038 h2e3bad8_2",
    "vswhere 2.8.4 h57928b3_0"
   ],
   "host": [
    "ucrt 10.0.20348.0 h57928b3_0",
    "vc 14.2 hb210afc_5",
    "vs2015_runtime 14.29.30037 h902a5da_5"
   ],
   "run": [
    "vc >=14.1,<15.0a0",
    "vs2015_runtime >=14.16.27012"
   ]
  },
  "source": {
   "fn": "v2021.2.0.tar.gz",
   "patches": [
    "0002-CMake-fix-tbb4py-installation.patch",
    "0004-Fix-concurrent-vector-on-win.patch",
    "0005-Enable-malloc-tests-on-non-x86.patch"
   ],
   "sha256": "cee20b0a71d977416f3e3b4ec643ee4f38cedeb2a9ff015303431dd9d8d79854",
   "url": "https://github.com/oneapi-src/oneTBB/archive/v2021.2.0.tar.gz"
  },
  "test": {
   "commands": [
    "python -c \"import ctypes, os; os.add_dll_directory(os.environ['LIBRARY_BIN']); assert 12020 == ctypes.cdll[r'tbb12.dll'] ['TBB_runtime_interface_version']()\""
   ],
   "requires": [
    "python *"
   ]
  }
 },
 "version": "2021.2.0"
}