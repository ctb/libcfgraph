{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.21.7",
  "conda_private": false,
  "conda_version": "4.11.0",
  "dev_url": "https://github.com/oneapi-src/oneTBB",
  "doc_url": "https://software.intel.com/en-us/oneapi-tbb-documentation",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "anton-malakhov",
    "jschueller",
    "AlexVeprev"
   ]
  },
  "home": "https://github.com/oneapi-src/oneTBB",
  "identifiers": [],
  "keywords": [],
  "license": "Apache-2.0",
  "license_file": [
   "LICENSE.txt",
   "third-party-programs.txt"
  ],
  "root_pkgs": [
   "dataclasses 0.8 pyhc8e2a94_3",
   "expat 2.4.1 h3621d8e_0",
   "ruamel_yaml 0.15.80 py38h9544abe_1006",
   "colorama 0.4.4 pyh9f0ad1d_0",
   "yaml-cpp 0.6.3 h54f1f3f_4",
   "commonmark 0.9.1 py_0",
   "six 1.16.0 pyh6c4a22f_0",
   "filelock 3.4.0 pyhd8ed1ab_0",
   "importlib_resources 5.4.0 pyhd8ed1ab_0",
   "requests 2.26.0 pyhd8ed1ab_1",
   "libssh2 1.10.0 h1ab2c7b_2",
   "pkginfo 1.8.2 pyhd8ed1ab_0",
   "wheel 0.37.0 pyhd8ed1ab_1",
   "c-ares 1.18.1 hf897c2e_0",
   "setuptools 59.6.0 py38h2063c64_0",
   "backports 1.0 py_2",
   "perl 5.32.1 1_hf897c2e_perl5",
   "lzo 2.10 h516909a_1000",
   "joblib 1.1.0 pyhd8ed1ab_0",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "python_abi 3.8 2_cp38",
   "patchelf 0.14.3 h884eca8_0",
   "pytz 2021.3 pyhd8ed1ab_0",
   "libnghttp2 1.43.0 h097699d_1",
   "ca-certificates 2021.10.8 h4fd8a4c_0",
   "python 3.8.12 h9f07fca_2_cpython",
   "pip 21.3.1 pyhd8ed1ab_0",
   "traitlets 5.1.1 pyhd8ed1ab_0",
   "tk 8.6.11 hd8af866_1",
   "jupyter_core 4.9.1 py38he3eb160_1",
   "tini 0.18.0 h14c3975_1001",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "sqlite 3.37.0 hc164836_0",
   "libnsl 2.0.0 hf897c2e_0",
   "urllib3 1.26.7 pyhd8ed1ab_0",
   "importlib-metadata 4.9.0 py38h2063c64_0",
   "cffi 1.15.0 py38hc42474b_0",
   "krb5 1.19.2 h4f20351_2",
   "reproc 14.2.3 hf897c2e_0",
   "py-lief 0.11.5 py38h4da49af_1",
   "libstdcxx-ng 11.2.0 h0d0a5bb_11",
   "certifi 2021.10.8 py38h2063c64_1",
   "zipp 3.6.0 pyhd8ed1ab_0",
   "prompt-toolkit 3.0.24 pyha770c72_0",
   "libgomp 11.2.0 hf1cc4e7_11",
   "tqdm 4.62.3 pyhd8ed1ab_0",
   "bzip2 1.0.8 hf897c2e_4",
   "tzdata 2021e he74cb21_0",
   "libxml2 2.9.12 h1e2ce75_1",
   "ncurses 6.2 h7fd3ca4_4",
   "libarchive 3.5.2 h37be732_1",
   "libzlib 1.2.11 hb9de7d4_1013",
   "pygments 2.10.0 pyhd8ed1ab_0",
   "pycosat 0.6.3 py38h9544abe_1009",
   "clyent 1.2.2 py_1",
   "git 2.34.1 pl5321h063bab8_0",
   "yaml 0.2.5 h516909a_0",
   "cryptography 36.0.1 py38h1376e7f_0",
   "pycparser 2.21 pyhd8ed1ab_0",
   "conda-build 3.21.7 py38he3eb160_0",
   "prompt_toolkit 3.0.24 hd8ed1ab_0",
   "attrs 21.2.0 pyhd8ed1ab_0",
   "liblief 0.11.5 h01db608_1",
   "libiconv 1.16 h6dd45c4_0",
   "markupsafe 2.0.1 py38h9544abe_1",
   "watchgod 0.7 pyhd8ed1ab_0",
   "pyyaml 6.0 py38h9544abe_3",
   "charset-normalizer 2.0.9 pyhd8ed1ab_0",
   "boa 0.8.1 pyha770c72_0",
   "idna 3.1 pyhd3deb0d_0",
   "libev 4.33 h516909a_1",
   "readline 8.1 h1a49cc3_0",
   "zstd 1.5.0 h41fb7a4_0",
   "libcurl 7.80.0 hcafe9da_0",
   "zlib 1.2.11 hb9de7d4_1013",
   "jinja2 3.0.3 pyhd8ed1ab_0",
   "libmambapy 0.19.1 py38h51ff73d_0",
   "_openmp_mutex 4.5 1_gnu",
   "python-libarchive-c 3.2 py38he3eb160_0",
   "libffi 3.4.2 h3557bc0_5",
   "json5 0.9.5 pyh9f0ad1d_0",
   "chardet 4.0.0 py38h2063c64_2",
   "libedit 3.1.20191231 he28a2e2_2",
   "xz 5.2.5 h6dd45c4_1",
   "lz4-c 1.9.3 h01db608_1",
   "pysocks 1.7.1 py38h2063c64_4",
   "ipython_genutils 0.2.0 py_1",
   "conda-package-handling 1.7.3 py38h9544abe_1",
   "pyrsistent 0.18.0 py38h9544abe_0",
   "libmamba 0.19.1 hddc0073_0",
   "psutil 5.8.0 py38h9544abe_2",
   "su-exec 0.2 h516909a_1002",
   "brotlipy 0.7.0 py38h9544abe_1003",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "libsolv 0.7.19 h469bdbd_5",
   "curl 7.80.0 hcafe9da_0",
   "beautifulsoup4 4.10.0 pyha770c72_0",
   "ruamel.yaml.clib 0.2.6 py38he362374_0",
   "future 0.18.2 py38h2063c64_4",
   "reproc-cpp 14.2.3 h01db608_0",
   "conda 4.11.0 py38he3eb160_0",
   "mamba 0.19.1 py38h0280004_0",
   "nbformat 5.1.3 pyhd8ed1ab_0",
   "pyopenssl 21.0.0 pyhd8ed1ab_0",
   "ruamel.yaml 0.17.17 py38he362374_1",
   "patch 2.7.6 hf897c2e_1002",
   "soupsieve 2.3.1 pyhd8ed1ab_0",
   "ld_impl_linux-aarch64 2.36.1 h02ad14f_2",
   "pybind11-abi 4 hd8ed1ab_3",
   "typing_extensions 4.0.1 pyha770c72_0",
   "libgcc-ng 11.2.0 hf1cc4e7_11",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "rich 10.16.1 pyhd8ed1ab_0",
   "icu 69.1 h3621d8e_0",
   "jsonschema 4.3.1 pyhd8ed1ab_0",
   "gettext 0.19.8.1 h6edf1e2_1008",
   "glob2 0.7 py_0",
   "pcre2 10.37 h73360fb_0",
   "ripgrep 13.0.0 h26d3e4c_1",
   "openssl 1.1.1l hf897c2e_0",
   "click 8.0.3 py38h2063c64_1",
   "jq 1.6 hb9de7d4_1000",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "conda-env 2.6.0 1",
   "oniguruma 6.9.7.1 hf897c2e_0",
   "conda-forge-ci-setup 3.18.0 py38h9934e81_0"
  ],
  "summary": "High level abstract threading library",
  "tags": []
 },
 "conda_build_config": {
  "BUILD": "aarch64-conda_cos7-linux-gnu",
  "CI": "azure",
  "c_compiler": "gcc",
  "cdt_arch": "aarch64",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "9",
  "docker_image": "quay.io/condaforge/linux-anvil-aarch64",
  "extend_keys": [
   "pin_run_as_build",
   "extend_keys",
   "ignore_build_only_deps",
   "ignore_version"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.9.* *_cpython",
  "r_base": "3.5",
  "target_platform": "linux-aarch64",
  "tbb": "2020"
 },
 "files": [
  "lib/libtbb.so.12",
  "lib/libtbb.so.12.5",
  "lib/libtbbmalloc.so.2",
  "lib/libtbbmalloc.so.2.5",
  "lib/libtbbmalloc_proxy.so.2",
  "lib/libtbbmalloc_proxy.so.2.5"
 ],
 "index": {
  "arch": "aarch64",
  "build": "hd62202e_0",
  "build_number": 0,
  "depends": [
   "libgcc-ng >=9.4.0",
   "libstdcxx-ng >=9.4.0"
  ],
  "license": "Apache-2.0",
  "name": "tbb",
  "platform": "linux",
  "subdir": "linux-aarch64",
  "timestamp": 1640702073636,
  "version": "2021.5.0"
 },
 "metadata_version": 1,
 "name": "tbb",
 "raw_recipe": "{% set version = \"2021.5.0\" %}\n\n{% set vmajor = version.split('.')[0]|int %}\n{% set vminor = version.split('.')[1]|int %}\n{% set vpatch = version.split('.')[2]|int %}\n{% set vbinary = vmajor - 2009 %}\n\n{% set vtag = \"v%d.%d.%d\" % (vmajor, vminor, vpatch) %}\n\n# Official patch version for the first release of 2021 is 1,\n# but internal patch version is 0, handle it for interface version.\n{% set vinterface = \"%d\" % (vbinary * 1000 + vminor * 10 + (vpatch if vmajor != 2021 or vminor != 1 else 0)) %}\n\n# Libraries on Windows are expected to be installed into LIBRARY_PREFIX.\n# tbb4py files should be installed into PREFIX.\n# See https://docs.conda.io/projects/conda-build/en/latest/user-guide/environment-variables.html.\n# On non-Windows CMAKE_ARGS already contains CMAKE_INSTALL_PREFIX.\n# CMAKE_PREFIX_PATH is needed to discover libhwloc with PkgConfig.\n{% set cmake_args = \"$CMAKE_ARGS\" %}  # [not win]\n{% set cmake_args = \"-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%LIBRARY_PREFIX%\" %}  # [win]\n{% set cmake_tbb4py_args = \"$CMAKE_ARGS\" %}  # [not win]\n{% set cmake_tbb4py_args = \"-DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=%PREFIX%\" %}   # [win]\n\n# Use specific test list agreed with TBB team to cover core functionality on high level.\n# Execution of all tests is too heavy task for packaging CI.\n# test_malloc_compliance is temporary excluded from the list since it causes failures that likely appear due to test implementation or env misconfiguration.\n# oneTBB issue: https://github.com/oneapi-src/oneTBB/issues/700\n# Agreed with oneTBB developers that it is suitable approach since the product is fully tested on oneTBB side.\n{% set tests = \"test_parallel_for test_tbb_header conformance_version test_flow_graph test_arena_constraints\" %}\n{% set ctest_regex = \"^(%s)$\" % (tests.replace(' ', '|')) %}\n\n{% set tbb4py_build_dir = \"build_$PKG_HASH\" %}  # [not win]\n{% set tbb4py_build_dir = \"build_%PKG_HASH%\" %}  # [win]\n\npackage:\n  name: tbb\n  version: {{ version }}\n\nsource:\n  fn: {{ vtag }}.tar.gz\n  url: https://github.com/oneapi-src/oneTBB/archive/{{ vtag }}.tar.gz\n  sha256: e5b57537c741400cf6134b428fc1689a649d7d38d9bb9c1b6d64f092ea28178a\n\nbuild:\n  number: 0\n\nrequirements:\n  build:\n    - python *\n    - {{ compiler('cxx') }}\n    - ninja  # [win]\n    - make   # [not win]\n    - cmake\n\ntest:\n  requires:\n    - python *               # any python version is ok for sake of testing of shared libraries\n  commands:\n    - python -c \"import ctypes; assert {{ vinterface }} == ctypes.cdll[r'libtbb.so.{{ vbinary }}.{{ vminor }}']       ['TBB_runtime_interface_version']()\"  # [linux]\n    - python -c \"import ctypes; assert {{ vinterface }} == ctypes.cdll[r'libtbb.{{ vbinary }}.{{ vminor }}${SHLIB_EXT}']['TBB_runtime_interface_version']()\"  # [unix and not linux]\n    - python -c \"import ctypes, os; os.add_dll_directory(os.environ['LIBRARY_BIN']); assert {{ vinterface }} == ctypes.cdll[r'tbb{{ vbinary }}.dll'] ['TBB_runtime_interface_version']()\"  # [win]\n\noutputs:\n  - name: tbb\n    build:\n      script:\n        - set CMAKE_GENERATOR=Ninja  # [win]\n        - cmake {{ cmake_args }} -DTBB_TEST=OFF -S . -B build\n        - cmake --build build --parallel\n        - cmake -DCOMPONENT=runtime -P build/cmake_install.cmake\n\n  - name: tbb-devel\n    build:\n      script:\n        - set CMAKE_GENERATOR=Ninja  # [win]\n        - cmake {{ cmake_args }} -DTBB_TEST=OFF -S . -B build\n        - cmake --build build --parallel\n        - cmake -DCOMPONENT=devel -P build/cmake_install.cmake\n      run_exports:\n        - tbb >={{ version }}\n    requirements:\n      build:\n        - python *\n        - {{ compiler('cxx') }}\n        - ninja  # [win]\n        - make   # [not win]\n        - cmake >=3.13\n\n      run:\n        - {{ pin_subpackage('tbb', exact=True) }}        # development package is for specific version of tbb\n    test:\n      requires:\n        - {{ compiler('cxx') }}\n        - ninja  # [win]\n        - make   # [not win]\n        - cmake\n      source_files:\n        - cmake\n        - test\n        - CMakeLists.txt\n        - include  # some tests depend on files from include\n        - src      # some tests depend on files from src\n      commands:\n        - set CMAKE_GENERATOR=Ninja  # [win]\n        # Setting TBB_DIR=TRUE is needed to use libraries from the tested package,\n        # but do not build them from sources; real path to TBBConfig files is not required,\n        # because CMake will successfully find installed tested package.\n        - cmake {{ cmake_args }} -DTBB_TEST=ON -DTBB_DIR=TRUE -S . -B test_build\n        - cmake --build test_build --target {{ tests }} --parallel  # build tests\n        - cd test_build\n        - ctest -R \"{{ ctest_regex }}\" --output-on-failure\n\n  - name: tbb4py\n    build:\n      script:\n        - set CMAKE_GENERATOR=Ninja  # [win]\n        - cmake {{ cmake_tbb4py_args }} -DTBB4PY_BUILD=ON -DTBB_TEST=OFF -S . -B {{ tbb4py_build_dir }}\n        - cmake --build {{ tbb4py_build_dir }} --target python_build --parallel\n        - cmake -DCOMPONENT=tbb4py -P {{ tbb4py_build_dir }}/cmake_install.cmake\n    requirements:\n      build:\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - {{ compiler('cxx') }}\n        - ninja  # [win]\n        - make   # [not win]\n        - cmake\n        - swig\n      host:\n        - python\n        - {{ pin_subpackage('tbb-devel', exact=True) }}\n      run:\n        - tbb >={{ version }}                            # while python module works with any compatible tbb...\n        - python\n    test:\n      requires:\n        - python\n        - {{ pin_subpackage('tbb', exact=True) }}        # we want to test with this specific tbb package\n      imports:\n        - tbb\n        - TBB\n      commands:\n        - python -m TBB -h\n        - python -m tbb -h\n        - python -m tbb test\n    about:\n      summary: TBB module for Python\n      license: Apache 2.0\n      dev_url: https://github.com/oneapi-src/oneTBB\n\nabout:\n  home: https://github.com/oneapi-src/oneTBB\n  license: Apache-2.0\n  license_file:\n    - LICENSE.txt\n    - third-party-programs.txt\n  summary: High level abstract threading library\n  dev_url: https://github.com/oneapi-src/oneTBB\n  doc_url: https://software.intel.com/en-us/oneapi-tbb-documentation\n\nextra:\n  recipe-maintainers:\n    - anton-malakhov\n    - jschueller\n    - AlexVeprev\n",
 "rendered_recipe": {
  "about": {
   "dev_url": "https://github.com/oneapi-src/oneTBB",
   "doc_url": "https://software.intel.com/en-us/oneapi-tbb-documentation",
   "home": "https://github.com/oneapi-src/oneTBB",
   "license": "Apache-2.0",
   "license_file": [
    "LICENSE.txt",
    "third-party-programs.txt"
   ],
   "summary": "High level abstract threading library"
  },
  "build": {
   "number": "0",
   "script": [
    "cmake $CMAKE_ARGS -DTBB_TEST=OFF -S . -B build",
    "cmake --build build --parallel",
    "cmake -DCOMPONENT=runtime -P build/cmake_install.cmake"
   ],
   "string": "hd62202e_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "AlexVeprev",
    "anton-malakhov",
    "jschueller"
   ]
  },
  "package": {
   "name": "tbb",
   "version": "2021.5.0"
  },
  "requirements": {
   "build": [
    "_openmp_mutex 4.5 1_gnu",
    "binutils_impl_linux-aarch64 2.36.1 h026399b_2",
    "binutils_linux-aarch64 2.36 h7854541_3",
    "bzip2 1.0.8 hf897c2e_4",
    "c-ares 1.18.1 hf897c2e_0",
    "ca-certificates 2021.10.8 h4fd8a4c_0",
    "cmake 3.21.3 h1da9803_0",
    "expat 2.4.2 h3621d8e_0",
    "gcc_impl_linux-aarch64 9.4.0 h603953f_11",
    "gcc_linux-aarch64 9.4.0 h9fa865e_3",
    "gxx_impl_linux-aarch64 9.4.0 h603953f_11",
    "gxx_linux-aarch64 9.4.0 h1e24722_3",
    "kernel-headers_linux-aarch64 4.18.0 h5b4a56d_13",
    "krb5 1.19.2 h9d12663_2",
    "ld_impl_linux-aarch64 2.36.1 h02ad14f_2",
    "libcurl 7.80.0 hbeee725_1",
    "libedit 3.1.20191231 he28a2e2_2",
    "libev 4.33 h516909a_1",
    "libffi 3.4.2 h3557bc0_5",
    "libgcc-devel_linux-aarch64 9.4.0 h85f5abf_11",
    "libgcc-ng 11.2.0 hf1cc4e7_11",
    "libgomp 11.2.0 hf1cc4e7_11",
    "libnghttp2 1.43.0 h3bc09fb_1",
    "libnsl 2.0.0 hf897c2e_0",
    "libsanitizer 9.4.0 h4d00405_11",
    "libssh2 1.10.0 hd8c4cff_2",
    "libstdcxx-devel_linux-aarch64 9.4.0 h85f5abf_11",
    "libstdcxx-ng 11.2.0 h0d0a5bb_11",
    "libuuid 2.32.1 hf897c2e_1000",
    "libuv 1.42.0 hf897c2e_0",
    "libzlib 1.2.11 hb9de7d4_1013",
    "lz4-c 1.9.3 h01db608_1",
    "make 4.3 h309ac5b_1",
    "ncurses 6.2 h7fd3ca4_4",
    "openssl 3.0.0 hf897c2e_1",
    "python 3.10.1 h2265c99_2_cpython",
    "readline 8.1 h1a49cc3_0",
    "rhash 1.4.1 hf897c2e_0",
    "sqlite 3.37.0 hc164836_0",
    "sysroot_linux-aarch64 2.17 h43d7e78_13",
    "tk 8.6.11 hd8af866_1",
    "tzdata 2021e he74cb21_0",
    "xz 5.2.5 h6dd45c4_1",
    "zlib 1.2.11 hb9de7d4_1013",
    "zstd 1.5.1 h41fb7a4_0"
   ],
   "host": [
    "_openmp_mutex 4.5 1_gnu",
    "libgcc-ng 11.2.0 hf1cc4e7_11",
    "libgomp 11.2.0 hf1cc4e7_11",
    "libstdcxx-ng 11.2.0 h0d0a5bb_11"
   ],
   "run": [
    "libgcc-ng >=9.4.0",
    "libstdcxx-ng >=9.4.0"
   ]
  },
  "source": {
   "fn": "v2021.5.0.tar.gz",
   "sha256": "e5b57537c741400cf6134b428fc1689a649d7d38d9bb9c1b6d64f092ea28178a",
   "url": "https://github.com/oneapi-src/oneTBB/archive/v2021.5.0.tar.gz"
  },
  "test": {
   "commands": [
    "python -c \"import ctypes; assert 12050 == ctypes.cdll[r'libtbb.so.12.5']       ['TBB_runtime_interface_version']()\""
   ],
   "requires": [
    "python *"
   ]
  }
 },
 "version": "2021.5.0"
}