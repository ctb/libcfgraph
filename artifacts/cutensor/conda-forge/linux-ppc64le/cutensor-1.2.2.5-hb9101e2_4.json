{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge",
   "https://repo.anaconda.com/pkgs/main"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.10.1",
  "description": "The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear\nalgebra library providing tensor contraction, reduction and elementwise\noperations. cuTENSOR is used to accelerate applications in the areas of\ndeep learning training and inference, computer vision, quantum chemistry\nand computational physics.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuTENSOR\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuTENSOR EULA -\nhttps://docs.nvidia.com/cuda/cutensor/license.html\n",
  "dev_url": "https://developer.nvidia.com/cutensor/downloads",
  "doc_url": "https://docs.nvidia.com/cuda/cutensor/index.html",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "leofang",
    "jakirkham"
   ]
  },
  "home": "https://developer.nvidia.com/cutensor",
  "identifiers": [],
  "keywords": [],
  "license": "LicenseRef-cuTENSOR-Software-License-Agreement",
  "license_file": "license.pdf",
  "license_url": "https://docs.nvidia.com/cuda/cutensor/license.html",
  "root_pkgs": [
   "bzip2 1.0.8 h4e0d66e_4",
   "certifi 2021.5.30 py38hf8b3453_0",
   "tini 0.18.0 h14c3975_1001",
   "jinja2 3.0.1 pyhd8ed1ab_0",
   "ripgrep 12.1.1 h6eb9509_1",
   "curl 7.77.0 h57b39c4_0",
   "zipp 3.4.1 pyhd8ed1ab_0",
   "pyrsistent 0.17.3 py38h98b8a6f_2",
   "pycosat 0.6.3 py38h98b8a6f_1006",
   "pysocks 1.7.1 py38hf8b3453_3",
   "pip 21.1.2 pyhd8ed1ab_0",
   "six 1.16.0 pyh6c4a22f_0",
   "traitlets 5.0.5 py_0",
   "wheel 0.36.2 pyhd3deb0d_0",
   "requests 2.25.1 pyhd3deb0d_0",
   "cryptography 3.4.7 py38h257c4d3_0",
   "pkginfo 1.7.0 pyhd8ed1ab_0",
   "icu 68.1 hea85c5d_0",
   "zstd 1.5.0 h65c4b1a_0",
   "libffi 3.3 hea85c5d_2",
   "importlib-metadata 4.4.0 py38hf8b3453_0",
   "libev 4.33 h6eb9509_1",
   "_libgcc_mutex 0.1 conda_forge",
   "nbformat 5.1.3 pyhd8ed1ab_0",
   "python-libarchive-c 3.1 py38hf8b3453_0",
   "readline 8.1 h5c45dff_0",
   "conda-build 3.21.4 py38hf8b3453_0",
   "conda 4.10.1 py38hf8b3453_0",
   "jsonschema 3.2.0 pyhd8ed1ab_3",
   "pyyaml 5.4.1 py38h98b8a6f_0",
   "gettext 0.19.8.1 hf23c357_1005",
   "cffi 1.14.5 py38h0dac770_0",
   "sqlite 3.35.5 h961021d_0",
   "python 3.8.10 h82ac395_1_cpython",
   "patch 2.7.6 h4e0d66e_1002",
   "lz4-c 1.9.3 h3b9df90_0",
   "tk 8.6.10 h38e1d09_1",
   "brotlipy 0.7.0 py38h98b8a6f_1001",
   "krb5 1.19.1 haf43566_0",
   "ncurses 6.2 hea85c5d_4",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "openssl 1.1.1k h4e0d66e_0",
   "psutil 5.8.0 py38h98b8a6f_1",
   "libgcc-ng 9.3.0 hc7a5eb4_18",
   "libssh2 1.9.0 ha5a9321_6",
   "setuptools 49.6.0 py38hf8b3453_3",
   "ruamel_yaml 0.15.80 py38h98b8a6f_1004",
   "su-exec 0.2 h6eb9509_1002",
   "pytz 2021.1 pyhd8ed1ab_0",
   "python-dateutil 2.8.1 py_0",
   "python_abi 3.8 1_cp38",
   "anaconda-client 1.7.2 pyhd8ed1ab_1",
   "c-ares 1.17.1 h4e0d66e_1",
   "_openmp_mutex 4.5 1_gnu",
   "lzo 2.10 h6eb9509_1000",
   "perl 5.32.0 h339bb43_0",
   "ipython_genutils 0.2.0 py_1",
   "tqdm 4.61.0 pyhd8ed1ab_0",
   "libarchive 3.5.1 h3281d6a_2",
   "expat 2.4.1 h3b9df90_0",
   "libxml2 2.9.12 h5b1524f_0",
   "liblief 0.11.5 h3b9df90_0",
   "jupyter_core 4.7.1 py38hf8b3453_0",
   "soupsieve 2.0.1 py_1",
   "pycparser 2.20 pyh9f0ad1d_2",
   "pyopenssl 20.0.1 pyhd8ed1ab_0",
   "pcre 8.44 hb209c28_0",
   "libstdcxx-ng 9.3.0 h22bc1b8_18",
   "libnghttp2 1.43.0 h42039ad_0",
   "chardet 4.0.0 py38hf8b3453_1",
   "conda-package-handling 1.7.3 py38h98b8a6f_0",
   "urllib3 1.26.5 pyhd8ed1ab_0",
   "markupsafe 2.0.1 py38h98b8a6f_0",
   "xz 5.2.5 h6eb9509_1",
   "libiconv 1.16 h6eb9509_0",
   "ld_impl_linux-ppc64le 2.35.1 ha35d02b_2",
   "attrs 21.2.0 pyhd8ed1ab_0",
   "yaml 0.2.5 h6eb9509_0",
   "idna 2.10 pyh9f0ad1d_0",
   "patchelf 0.11 hb209c28_0",
   "zlib 1.2.11 h6eb9509_1010",
   "beautifulsoup4 4.9.3 pyhb0f4dca_0",
   "libedit 3.1.20191231 h41a240f_2",
   "py-lief 0.11.5 py38hfdc2fcd_0",
   "ca-certificates 2021.5.30 h1084571_0",
   "libcurl 7.77.0 he415e40_0",
   "clyent 1.2.2 py_1",
   "libgomp 9.3.0 hc7a5eb4_18",
   "glob2 0.7 py_0",
   "git 2.30.2 pl5320h09515ac_1",
   "conda-env 2.6.0 1",
   "jq 1.6 h339bb43_1000",
   "conda-forge-ci-setup 3.9.4 py38h6345821_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "oniguruma 6.9.7.1 h4e0d66e_0",
   "click 8.0.1 py38hf8b3453_0"
  ],
  "summary": "Tensor Linear Algebra on NVIDIA GPUs",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "8",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "10.2",
  "cudnn": "undefined",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "8",
  "docker_image": "quay.io/condaforge/linux-anvil-ppc64le-cuda:10.2",
  "extend_keys": [
   "ignore_build_only_deps",
   "ignore_version",
   "extend_keys",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.8",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ],
   [
    "cuda_compiler_version",
    "cdt_name",
    "cudnn"
   ],
   [
    "cuda_compiler_version",
    "cdt_name",
    "docker_image"
   ]
  ]
 },
 "files": [
  "bin/.cutensor-post-link.sh",
  "include/cutensor.h",
  "include/cutensor/types.h",
  "lib/libcutensor.so",
  "lib/libcutensor.so.1",
  "lib/libcutensor.so.1.2.2"
 ],
 "index": {
  "arch": "ppc64le",
  "build": "hb9101e2_4",
  "build_number": 4,
  "constrains": [
   "__glibc >=2.17"
  ],
  "depends": [
   "__glibc >=2.17,<3.0.a0",
   "_openmp_mutex >=4.5",
   "cudatoolkit 10.2.*",
   "libgcc-ng >=3.0",
   "libstdcxx-ng >=3.4"
  ],
  "license": "LicenseRef-cuTENSOR-Software-License-Agreement",
  "name": "cutensor",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1622778635042,
  "version": "1.2.2.5"
 },
 "metadata_version": 1,
 "name": "cutensor",
 "raw_recipe": "{% set version = \"1.2.2\" %}\n{% set patch_version = \"5\" %}\n\npackage:\n  name: cutensor\n  version: {{ version }}.{{ patch_version }}\n\nsource:\n  url: https://developer.download.nvidia.com/compute/cutensor/{{ version }}/local_installers/libcutensor-linux-x86_64-{{ version }}.{{ patch_version }}.tar.gz   # [linux64 and cuda_compiler_version in (\"10.1\", \"10.2\", \"11.0\")]\n  url: https://developer.download.nvidia.com/compute/cutensor/{{ version }}/local_installers/libcutensor-linux-ppc64le-{{ version }}.{{ patch_version }}.tar.gz  # [ppc64le and cuda_compiler_version in (\"10.1\", \"10.2\", \"11.0\")]\n  url: https://developer.download.nvidia.com/compute/cutensor/{{ version }}/local_installers/libcutensor-linux-sbsa-{{ version }}.{{ patch_version }}.tar.gz  # [aarch64 and cuda_compiler_version in (\"10.1\", \"10.2\", \"11.0\")]\n  url: https://developer.download.nvidia.com/compute/cutensor/{{ version }}/local_installers/libcutensor-windows-x86_64-{{ version }}.{{ patch_version }}.zip  # [win64 and cuda_compiler_version in (\"10.1\", \"10.2\", \"11.0\")]\n\n  sha256: 954ee22b80d6b82fd4decd42b7faead86af7c3817653b458620a66174e5b89b6  # [linux64]\n  sha256: d914a721b8a6bbfbf4f2bdea3bb51775e5df39abc383d415b3b06bbde2a47e6e  # [ppc64le]\n  sha256: 031b75946d2ce22f8c2736f7b4216b9377406afcb35012093a66e2801bfe2990  # [aarch64]\n  sha256: 8f960b22594a91dbad7e78cc91acb92a2a87607b2f46085fe6ecd6173747467a  # [win64]\n\nbuild:\n  number: 4\n  skip: True  # [win32 or cuda_compiler_version in (\"None\", \"9.2\", \"10.0\", \"11.1\", \"11.2\")]\n  script_env:\n    # for some reason /usr/local/cuda is not added to $PATH in ppc64le's docker image\n    - CUDA_HOME  # [ppc64le]\n  script:\n    - mkdir -p $PREFIX/include                                            # [linux]\n    - cp -r include/* $PREFIX/include/                                    # [linux]\n    - mkdir -p $PREFIX/lib                                                # [linux]\n    - mv lib/{{ cuda_compiler_version }}/libcutensor.so* $PREFIX/lib/     # [linux and cuda_compiler_version in (\"10.1\", \"10.2\")]\n    - mv lib/11/libcutensor.so* $PREFIX/lib/                              # [linux and cuda_compiler_version in (\"11.0\", )]\n\n    - copy include\\\\cutensor.h %LIBRARY_INC%\\\\                             # [win64]\n    - mkdir %LIBRARY_INC%\\\\cutensor                                        # [win64]\n    - copy include\\\\cutensor\\\\types.h %LIBRARY_INC%\\\\cutensor              # [win64]\n    - copy lib\\\\{{ cuda_compiler_version }}\\\\cutensor.dll %LIBRARY_BIN%\\\\  # [win64 and cuda_compiler_version in (\"10.1\", \"10.2\")]\n    - copy lib\\\\{{ cuda_compiler_version }}\\\\cutensor.lib %LIBRARY_LIB%\\\\  # [win64 and cuda_compiler_version in (\"10.1\", \"10.2\")]\n    - copy lib\\\\11\\\\cutensor.dll %LIBRARY_BIN%\\\\                           # [win64 and cuda_compiler_version in (\"11.0\", )]\n    - copy lib\\\\11\\\\cutensor.lib %LIBRARY_LIB%\\\\                           # [win64 and cuda_compiler_version in (\"11.0\", )]\n  ignore_run_exports_from:\n    - {{ compiler('c') }}    # [linux]\n    - {{ compiler('cuda') }}\n  run_exports:\n    - {{ pin_subpackage('cutensor') }}\n  missing_dso_whitelist:\n    - '*/libgomp.*'  # [linux]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cuda') }}\n    - sysroot_linux-64 2.17  # [linux]\n    - libgomp  # [linux]\n  host:\n  run:\n    # Only GCC_3.0 or older symbols present\n    - libgcc-ng >=3.0     # [linux]\n    # Only GLIBCXX_3.4 or older symbols present\n    - libstdcxx-ng >=3.4  # [linux]\n    - cudatoolkit {{ cuda_compiler_version }}  # [cuda_compiler_version in (\"10.1\", \"10.2\")]\n    - cudatoolkit 11.*                         # [cuda_compiler_version not in (\"10.1\", \"10.2\")]\n  run_constrained:\n    # Only GLIBC_2.17 or older symbols present\n    - __glibc >=2.17      # [linux]\n\ntest:\n  requires:\n    - git\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}\n    - sysroot_linux-64 2.17  # [linux]\n    # make sure we pick up the version matching the docker,\n    # or the linker would complain \n    - cudatoolkit 11.0       # [cuda_compiler_version == \"11.0\"]\n  commands:\n    - test -f $PREFIX/include/cutensor.h                    # [linux]\n    - test -f $PREFIX/include/cutensor/types.h              # [linux]\n    - test -f $PREFIX/lib/libcutensor.so                    # [linux]\n\n    - if not exist %LIBRARY_INC%\\\\cutensor.h exit 1         # [win64]\n    - if not exist %LIBRARY_INC%\\\\cutensor\\\\types.h exit 1  # [win64]\n    - if not exist %LIBRARY_BIN%\\\\cutensor.dll exit 1       # [win64]\n    - if not exist %LIBRARY_LIB%\\\\cutensor.lib exit 1       # [win64]\n\nabout:\n  home: https://developer.nvidia.com/cutensor\n  license: LicenseRef-cuTENSOR-Software-License-Agreement\n  license_url: https://docs.nvidia.com/cuda/cutensor/license.html\n  license_file: license.pdf\n  summary: \"Tensor Linear Algebra on NVIDIA GPUs\"\n  description: |\n    The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear\n    algebra library providing tensor contraction, reduction and elementwise\n    operations. cuTENSOR is used to accelerate applications in the areas of\n    deep learning training and inference, computer vision, quantum chemistry\n    and computational physics.\n\n    License Agreements:- The packages are governed by the NVIDIA cuTENSOR\n    Software License Agreement (EULA). By downloading and using the packages,\n    you accept the terms and conditions of the NVIDIA cuTENSOR EULA -\n    https://docs.nvidia.com/cuda/cutensor/license.html\n  doc_url: https://docs.nvidia.com/cuda/cutensor/index.html\n  dev_url: https://developer.nvidia.com/cutensor/downloads\n\nextra:\n  recipe-maintainers:\n    - leofang\n    - jakirkham\n",
 "rendered_recipe": {
  "about": {
   "description": "The cuTENSOR Library is a first-of-its-kind GPU-accelerated tensor linear\nalgebra library providing tensor contraction, reduction and elementwise\noperations. cuTENSOR is used to accelerate applications in the areas of\ndeep learning training and inference, computer vision, quantum chemistry\nand computational physics.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuTENSOR\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuTENSOR EULA -\nhttps://docs.nvidia.com/cuda/cutensor/license.html\n",
   "dev_url": "https://developer.nvidia.com/cutensor/downloads",
   "doc_url": "https://docs.nvidia.com/cuda/cutensor/index.html",
   "home": "https://developer.nvidia.com/cutensor",
   "license": "LicenseRef-cuTENSOR-Software-License-Agreement",
   "license_file": "license.pdf",
   "license_url": "https://docs.nvidia.com/cuda/cutensor/license.html",
   "summary": "Tensor Linear Algebra on NVIDIA GPUs"
  },
  "build": {
   "ignore_run_exports_from": [
    "gcc_linux-ppc64le 8.*",
    "nvcc_linux-ppc64le 10.2.*"
   ],
   "missing_dso_whitelist": [
    "*/libgomp.*"
   ],
   "number": "4",
   "run_exports": [
    "cutensor >=1.2.2.5,<2.0a0"
   ],
   "script": [
    "mkdir -p $PREFIX/include",
    "cp -r include/* $PREFIX/include/",
    "mkdir -p $PREFIX/lib",
    "mv lib/10.2/libcutensor.so* $PREFIX/lib/"
   ],
   "script_env": [
    "CUDA_HOME"
   ],
   "string": "hb9101e2_4"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jakirkham",
    "leofang"
   ]
  },
  "package": {
   "name": "cutensor",
   "version": "1.2.2.5"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "_sysroot_linux-64_curr_repodata_hack 3 ha9d2b57_10",
    "binutils_impl_linux-ppc64le 2.35.1 h5836da8_2",
    "binutils_linux-ppc64le 2.35 hcfcb53e_30",
    "gcc_impl_linux-ppc64le 8.4.0 h37540d7_17",
    "gcc_linux-ppc64le 8.4.0 he2cb99e_30",
    "kernel-headers_linux-64 3.10.0 h77966d4_10",
    "kernel-headers_linux-ppc64le 3.10.0 hbe0c576_10",
    "ld_impl_linux-ppc64le 2.35.1 ha35d02b_2",
    "libgcc-devel_linux-ppc64le 8.4.0 hbb93445_17",
    "libgcc-ng 9.3.0 hc7a5eb4_18",
    "libgomp 9.3.0 hc7a5eb4_18",
    "libstdcxx-ng 9.3.0 h22bc1b8_18",
    "nvcc_linux-ppc64le 10.2 hb3d3a0a_13",
    "sed 4.8 ha07698b_0",
    "sysroot_linux-64 2.17 h77966d4_10",
    "sysroot_linux-ppc64le 2.17 h8b29623_10"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "libgomp 9.3.0 hc7a5eb4_18"
   ],
   "run": [
    "__glibc >=2.17,<3.0.a0",
    "_openmp_mutex >=4.5",
    "cudatoolkit 10.2.*",
    "libgcc-ng >=3.0",
    "libstdcxx-ng >=3.4"
   ],
   "run_constrained": [
    "__glibc >=2.17"
   ]
  },
  "source": {
   "sha256": "d914a721b8a6bbfbf4f2bdea3bb51775e5df39abc383d415b3b06bbde2a47e6e",
   "url": "https://developer.download.nvidia.com/compute/cutensor/1.2.2/local_installers/libcutensor-linux-ppc64le-1.2.2.5.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/cutensor.h",
    "test -f $PREFIX/include/cutensor/types.h",
    "test -f $PREFIX/lib/libcutensor.so"
   ],
   "requires": [
    "gcc_linux-ppc64le 8.*",
    "git",
    "gxx_linux-ppc64le 8.*",
    "nvcc_linux-ppc64le 10.2.*",
    "sysroot_linux-64 2.17.*"
   ]
  }
 },
 "version": "1.2.2.5"
}