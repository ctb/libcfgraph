{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.20.3",
  "conda_private": false,
  "conda_version": "4.8.5",
  "dev_url": "https://github.com/MRChemSoft/mrcpp",
  "doc_source_url": "https://github.com/MRChemSoft/mrcpp/blob/master/doc/index.rst",
  "doc_url": "https://mrcpp.readthedocs.io/en/latest/",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "robertodr",
    "bjorgve",
    "stigrj"
   ]
  },
  "home": "https://github.com/MRChemSoft/mrcpp",
  "identifiers": [],
  "keywords": [],
  "license": "LGPL-3.0-or-later",
  "license_family": "LGPL",
  "license_file": "LICENSE",
  "license_url": "https://opensource.org/licenses/LGPL-3.0",
  "root_pkgs": [
   "conda-env 2.6.0 1",
   "requests 2.24.0 pyh9f0ad1d_0",
   "idna 2.10 pyh9f0ad1d_0",
   "jq 1.6 h1de35cc_1000",
   "ruamel_yaml 0.15.80 py38h4d0b108_1002",
   "py-lief 0.10.1 py38h11c0d25_1",
   "anaconda-client 1.7.2 py_0",
   "libcurl 7.71.1 h9bf37e3_8",
   "sqlite 3.33.0 h960bd1c_0",
   "jupyter_core 4.6.3 py38h32f6830_1",
   "libffi 3.2.1 hb1e8313_1007",
   "pycparser 2.20 pyh9f0ad1d_2",
   "soupsieve 2.0.1 py_1",
   "libxml2 2.9.10 h2c6e4a5_2",
   "tk 8.6.10 hb0a8c7a_0",
   "certifi 2020.6.20 py38h32f6830_0",
   "glob2 0.7 py_0",
   "traitlets 5.0.4 py_1",
   "shyaml 0.6.1 py_0",
   "ripgrep 12.1.1 h0b31af3_0",
   "cryptography 3.1 py38h52adbb4_0",
   "libedit 3.1.20191231 h0678c8f_2",
   "pyrsistent 0.17.3 py38h4d0b108_0",
   "openssl 1.1.1h haf1e3a3_0",
   "libiconv 1.16 haf1e3a3_0",
   "urllib3 1.25.10 py_0",
   "conda 4.8.5 py38h32f6830_1",
   "expat 2.2.9 hb1e8313_2",
   "lz4-c 1.9.2 hb1e8313_3",
   "xz 5.2.5 haf1e3a3_1",
   "conda-package-handling 1.7.0 py38h4d0b108_5",
   "pip 20.2.3 py_0",
   "wheel 0.35.1 pyh9f0ad1d_0",
   "tqdm 4.49.0 pyh9f0ad1d_0",
   "curl 7.71.1 hcb81553_8",
   "click 7.1.2 pyh9f0ad1d_0",
   "zstd 1.4.5 h289c70a_2",
   "brotlipy 0.7.0 py38h4d0b108_1000",
   "importlib-metadata 2.0.0 py38h32f6830_0",
   "nbformat 5.0.7 py_0",
   "pycosat 0.6.3 py38h4d0b108_1004",
   "attrs 20.2.0 pyh9f0ad1d_0",
   "perl 5.26.2 haec8ef5_1006",
   "python_abi 3.8 1_cp38",
   "libssh2 1.9.0 h8a08a2b_5",
   "cffi 1.14.3 py38hc4dd44e_0",
   "zlib 1.2.11 h7795811_1009",
   "liblief 0.10.1 hb1e8313_1",
   "readline 8.0 h0678c8f_2",
   "pyopenssl 19.1.0 py_1",
   "conda-forge-ci-setup 3.3.0 py38h32f6830_0",
   "icu 67.1 hb1e8313_0",
   "c-ares 1.16.1 haf1e3a3_3",
   "pytz 2020.1 pyh9f0ad1d_0",
   "yaml 0.2.5 haf1e3a3_0",
   "bzip2 1.0.8 haf1e3a3_3",
   "beautifulsoup4 4.9.2 py_0",
   "zipp 3.2.0 py_0",
   "python 3.8.5 h0ed32c4_8_cpython",
   "conda-build 3.20.3 py38h32f6830_0",
   "krb5 1.17.1 h75d18d8_3",
   "jinja2 2.11.2 pyh9f0ad1d_0",
   "ncurses 6.2 hb1e8313_1",
   "jsonschema 3.2.0 py38h32f6830_1",
   "clyent 1.2.2 py_1",
   "pcre 8.44 h4a8c4bd_0",
   "pkginfo 1.5.0.1 py_0",
   "markupsafe 1.1.1 py38h4d0b108_1",
   "pysocks 1.7.1 py38h32f6830_1",
   "libarchive 3.4.3 hf12134e_0",
   "gettext 0.19.8.1 h46ab8bc_1002",
   "importlib_metadata 2.0.0 0",
   "chardet 3.0.4 py38h32f6830_1007",
   "psutil 5.7.2 py38h4d0b108_0",
   "pyyaml 5.3.1 py38h4d0b108_0",
   "libnghttp2 1.41.0 h7580e61_2",
   "ipython_genutils 0.2.0 py_1",
   "git 2.28.0 pl526hde3ca24_1",
   "ca-certificates 2020.6.20 hecda079_0",
   "lzo 2.10 haf1e3a3_1000",
   "setuptools 49.6.0 py38h32f6830_1",
   "oniguruma 6.9.3 h01d97ff_0",
   "libcxx 10.0.1 h5f48129_0",
   "python-dateutil 2.8.1 py_0",
   "six 1.15.0 pyh9f0ad1d_0",
   "python-libarchive-c 2.9 py38h32f6830_1",
   "libev 4.33 haf1e3a3_1",
   "filelock 3.0.12 pyh9f0ad1d_0"
  ],
  "summary": "MultiResolution Computational Program Package",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "CONDA_BUILD_SYSROOT": "/Applications/Xcode_11.7.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk",
  "MACOSX_DEPLOYMENT_TARGET": "10.9",
  "c_compiler": "clang",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "clangxx",
  "cxx_compiler_version": "10",
  "extend_keys": [
   "extend_keys",
   "ignore_version",
   "pin_run_as_build",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "macos_machine": "x86_64-apple-darwin13.4.0",
  "mpi": "openmpi",
  "numpy": "1.11",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "mpich": "x.x",
   "openmpi": "x.x",
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.8",
  "r_base": "3.5",
  "target_platform": "osx-64"
 },
 "files": [
  "bin/mrcpp-tests",
  "include/MRCPP/Gaussians",
  "include/MRCPP/MWFunctions",
  "include/MRCPP/MWOperators",
  "include/MRCPP/Parallel",
  "include/MRCPP/Plotter",
  "include/MRCPP/Printer",
  "include/MRCPP/Timer",
  "include/MRCPP/config.h",
  "include/MRCPP/constants.h",
  "include/MRCPP/core/CrossCorrelation.h",
  "include/MRCPP/core/CrossCorrelationCache.h",
  "include/MRCPP/core/FilterCache.h",
  "include/MRCPP/core/GaussQuadrature.h",
  "include/MRCPP/core/InterpolatingBasis.h",
  "include/MRCPP/core/LegendreBasis.h",
  "include/MRCPP/core/MWFilter.h",
  "include/MRCPP/core/ObjectCache.h",
  "include/MRCPP/core/QuadratureCache.h",
  "include/MRCPP/core/ScalingBasis.h",
  "include/MRCPP/core/ScalingCache.h",
  "include/MRCPP/functions/AnalyticFunction.h",
  "include/MRCPP/functions/BoysFunction.h",
  "include/MRCPP/functions/GaussExp.h",
  "include/MRCPP/functions/GaussFunc.h",
  "include/MRCPP/functions/GaussPoly.h",
  "include/MRCPP/functions/Gaussian.h",
  "include/MRCPP/functions/LegendrePoly.h",
  "include/MRCPP/functions/Polynomial.h",
  "include/MRCPP/functions/RepresentableFunction.h",
  "include/MRCPP/functions/function_utils.h",
  "include/MRCPP/macros.h",
  "include/MRCPP/mrcpp_declarations.h",
  "include/MRCPP/operators/ABGVOperator.h",
  "include/MRCPP/operators/BSOperator.h",
  "include/MRCPP/operators/ConvolutionOperator.h",
  "include/MRCPP/operators/DerivativeConvolution.h",
  "include/MRCPP/operators/DerivativeKernel.h",
  "include/MRCPP/operators/DerivativeOperator.h",
  "include/MRCPP/operators/GreensKernel.h",
  "include/MRCPP/operators/HelmholtzKernel.h",
  "include/MRCPP/operators/HelmholtzOperator.h",
  "include/MRCPP/operators/IdentityConvolution.h",
  "include/MRCPP/operators/IdentityKernel.h",
  "include/MRCPP/operators/MWOperator.h",
  "include/MRCPP/operators/OperatorState.h",
  "include/MRCPP/operators/OperatorStatistics.h",
  "include/MRCPP/operators/PHOperator.h",
  "include/MRCPP/operators/PoissonKernel.h",
  "include/MRCPP/operators/PoissonOperator.h",
  "include/MRCPP/treebuilders/ABGVCalculator.h",
  "include/MRCPP/treebuilders/AdditionCalculator.h",
  "include/MRCPP/treebuilders/AnalyticAdaptor.h",
  "include/MRCPP/treebuilders/BSCalculator.h",
  "include/MRCPP/treebuilders/BandWidthAdaptor.h",
  "include/MRCPP/treebuilders/ConvolutionCalculator.h",
  "include/MRCPP/treebuilders/CopyAdaptor.h",
  "include/MRCPP/treebuilders/CrossCorrelationCalculator.h",
  "include/MRCPP/treebuilders/DefaultCalculator.h",
  "include/MRCPP/treebuilders/DerivativeCalculator.h",
  "include/MRCPP/treebuilders/MapCalculator.h",
  "include/MRCPP/treebuilders/MultiplicationCalculator.h",
  "include/MRCPP/treebuilders/OperatorAdaptor.h",
  "include/MRCPP/treebuilders/PHCalculator.h",
  "include/MRCPP/treebuilders/PowerCalculator.h",
  "include/MRCPP/treebuilders/ProjectionCalculator.h",
  "include/MRCPP/treebuilders/SplitAdaptor.h",
  "include/MRCPP/treebuilders/SquareCalculator.h",
  "include/MRCPP/treebuilders/TreeAdaptor.h",
  "include/MRCPP/treebuilders/TreeBuilder.h",
  "include/MRCPP/treebuilders/TreeCalculator.h",
  "include/MRCPP/treebuilders/WaveletAdaptor.h",
  "include/MRCPP/treebuilders/add.h",
  "include/MRCPP/treebuilders/apply.h",
  "include/MRCPP/treebuilders/grid.h",
  "include/MRCPP/treebuilders/map.h",
  "include/MRCPP/treebuilders/multiply.h",
  "include/MRCPP/treebuilders/project.h",
  "include/MRCPP/trees/BandWidth.h",
  "include/MRCPP/trees/BoundingBox.h",
  "include/MRCPP/trees/FunctionNode.h",
  "include/MRCPP/trees/FunctionTree.h",
  "include/MRCPP/trees/FunctionTreeVector.h",
  "include/MRCPP/trees/GenNode.h",
  "include/MRCPP/trees/HilbertIterator.h",
  "include/MRCPP/trees/HilbertPath.h",
  "include/MRCPP/trees/LebesgueIterator.h",
  "include/MRCPP/trees/MWNode.h",
  "include/MRCPP/trees/MWTree.h",
  "include/MRCPP/trees/MultiResolutionAnalysis.h",
  "include/MRCPP/trees/NodeBox.h",
  "include/MRCPP/trees/NodeIndex.h",
  "include/MRCPP/trees/OperatorNode.h",
  "include/MRCPP/trees/OperatorTree.h",
  "include/MRCPP/trees/ProjectedNode.h",
  "include/MRCPP/trees/SerialFunctionTree.h",
  "include/MRCPP/trees/SerialOperatorTree.h",
  "include/MRCPP/trees/SerialTree.h",
  "include/MRCPP/trees/TreeIterator.h",
  "include/MRCPP/utils/Plotter.h",
  "include/MRCPP/utils/Printer.h",
  "include/MRCPP/utils/Timer.h",
  "include/MRCPP/utils/details.h",
  "include/MRCPP/utils/math_utils.h",
  "include/MRCPP/utils/mpi_utils.h",
  "include/MRCPP/utils/omp_utils.h",
  "include/MRCPP/utils/periodic_utils.h",
  "include/MRCPP/version.h",
  "lib/libmrcpp.1.dylib",
  "lib/libmrcpp.dylib",
  "share/MRCPP/mwfilters/I_G0_1",
  "share/MRCPP/mwfilters/I_G0_10",
  "share/MRCPP/mwfilters/I_G0_11",
  "share/MRCPP/mwfilters/I_G0_12",
  "share/MRCPP/mwfilters/I_G0_13",
  "share/MRCPP/mwfilters/I_G0_14",
  "share/MRCPP/mwfilters/I_G0_15",
  "share/MRCPP/mwfilters/I_G0_16",
  "share/MRCPP/mwfilters/I_G0_17",
  "share/MRCPP/mwfilters/I_G0_18",
  "share/MRCPP/mwfilters/I_G0_19",
  "share/MRCPP/mwfilters/I_G0_2",
  "share/MRCPP/mwfilters/I_G0_20",
  "share/MRCPP/mwfilters/I_G0_21",
  "share/MRCPP/mwfilters/I_G0_22",
  "share/MRCPP/mwfilters/I_G0_23",
  "share/MRCPP/mwfilters/I_G0_24",
  "share/MRCPP/mwfilters/I_G0_25",
  "share/MRCPP/mwfilters/I_G0_26",
  "share/MRCPP/mwfilters/I_G0_27",
  "share/MRCPP/mwfilters/I_G0_28",
  "share/MRCPP/mwfilters/I_G0_29",
  "share/MRCPP/mwfilters/I_G0_3",
  "share/MRCPP/mwfilters/I_G0_30",
  "share/MRCPP/mwfilters/I_G0_31",
  "share/MRCPP/mwfilters/I_G0_32",
  "share/MRCPP/mwfilters/I_G0_33",
  "share/MRCPP/mwfilters/I_G0_34",
  "share/MRCPP/mwfilters/I_G0_35",
  "share/MRCPP/mwfilters/I_G0_36",
  "share/MRCPP/mwfilters/I_G0_37",
  "share/MRCPP/mwfilters/I_G0_38",
  "share/MRCPP/mwfilters/I_G0_39",
  "share/MRCPP/mwfilters/I_G0_4",
  "share/MRCPP/mwfilters/I_G0_40",
  "share/MRCPP/mwfilters/I_G0_41",
  "share/MRCPP/mwfilters/I_G0_5",
  "share/MRCPP/mwfilters/I_G0_6",
  "share/MRCPP/mwfilters/I_G0_7",
  "share/MRCPP/mwfilters/I_G0_8",
  "share/MRCPP/mwfilters/I_G0_9",
  "share/MRCPP/mwfilters/I_H0_1",
  "share/MRCPP/mwfilters/I_H0_10",
  "share/MRCPP/mwfilters/I_H0_11",
  "share/MRCPP/mwfilters/I_H0_12",
  "share/MRCPP/mwfilters/I_H0_13",
  "share/MRCPP/mwfilters/I_H0_14",
  "share/MRCPP/mwfilters/I_H0_15",
  "share/MRCPP/mwfilters/I_H0_16",
  "share/MRCPP/mwfilters/I_H0_17",
  "share/MRCPP/mwfilters/I_H0_18",
  "share/MRCPP/mwfilters/I_H0_19",
  "share/MRCPP/mwfilters/I_H0_2",
  "share/MRCPP/mwfilters/I_H0_20",
  "share/MRCPP/mwfilters/I_H0_21",
  "share/MRCPP/mwfilters/I_H0_22",
  "share/MRCPP/mwfilters/I_H0_23",
  "share/MRCPP/mwfilters/I_H0_24",
  "share/MRCPP/mwfilters/I_H0_25",
  "share/MRCPP/mwfilters/I_H0_26",
  "share/MRCPP/mwfilters/I_H0_27",
  "share/MRCPP/mwfilters/I_H0_28",
  "share/MRCPP/mwfilters/I_H0_29",
  "share/MRCPP/mwfilters/I_H0_3",
  "share/MRCPP/mwfilters/I_H0_30",
  "share/MRCPP/mwfilters/I_H0_31",
  "share/MRCPP/mwfilters/I_H0_32",
  "share/MRCPP/mwfilters/I_H0_33",
  "share/MRCPP/mwfilters/I_H0_34",
  "share/MRCPP/mwfilters/I_H0_35",
  "share/MRCPP/mwfilters/I_H0_36",
  "share/MRCPP/mwfilters/I_H0_37",
  "share/MRCPP/mwfilters/I_H0_38",
  "share/MRCPP/mwfilters/I_H0_39",
  "share/MRCPP/mwfilters/I_H0_4",
  "share/MRCPP/mwfilters/I_H0_40",
  "share/MRCPP/mwfilters/I_H0_41",
  "share/MRCPP/mwfilters/I_H0_5",
  "share/MRCPP/mwfilters/I_H0_6",
  "share/MRCPP/mwfilters/I_H0_7",
  "share/MRCPP/mwfilters/I_H0_8",
  "share/MRCPP/mwfilters/I_H0_9",
  "share/MRCPP/mwfilters/I_c_left_1",
  "share/MRCPP/mwfilters/I_c_left_10",
  "share/MRCPP/mwfilters/I_c_left_11",
  "share/MRCPP/mwfilters/I_c_left_12",
  "share/MRCPP/mwfilters/I_c_left_13",
  "share/MRCPP/mwfilters/I_c_left_14",
  "share/MRCPP/mwfilters/I_c_left_15",
  "share/MRCPP/mwfilters/I_c_left_16",
  "share/MRCPP/mwfilters/I_c_left_17",
  "share/MRCPP/mwfilters/I_c_left_18",
  "share/MRCPP/mwfilters/I_c_left_19",
  "share/MRCPP/mwfilters/I_c_left_2",
  "share/MRCPP/mwfilters/I_c_left_20",
  "share/MRCPP/mwfilters/I_c_left_21",
  "share/MRCPP/mwfilters/I_c_left_22",
  "share/MRCPP/mwfilters/I_c_left_23",
  "share/MRCPP/mwfilters/I_c_left_24",
  "share/MRCPP/mwfilters/I_c_left_25",
  "share/MRCPP/mwfilters/I_c_left_26",
  "share/MRCPP/mwfilters/I_c_left_27",
  "share/MRCPP/mwfilters/I_c_left_28",
  "share/MRCPP/mwfilters/I_c_left_29",
  "share/MRCPP/mwfilters/I_c_left_3",
  "share/MRCPP/mwfilters/I_c_left_30",
  "share/MRCPP/mwfilters/I_c_left_31",
  "share/MRCPP/mwfilters/I_c_left_32",
  "share/MRCPP/mwfilters/I_c_left_33",
  "share/MRCPP/mwfilters/I_c_left_34",
  "share/MRCPP/mwfilters/I_c_left_35",
  "share/MRCPP/mwfilters/I_c_left_36",
  "share/MRCPP/mwfilters/I_c_left_37",
  "share/MRCPP/mwfilters/I_c_left_38",
  "share/MRCPP/mwfilters/I_c_left_39",
  "share/MRCPP/mwfilters/I_c_left_4",
  "share/MRCPP/mwfilters/I_c_left_40",
  "share/MRCPP/mwfilters/I_c_left_41",
  "share/MRCPP/mwfilters/I_c_left_5",
  "share/MRCPP/mwfilters/I_c_left_6",
  "share/MRCPP/mwfilters/I_c_left_7",
  "share/MRCPP/mwfilters/I_c_left_8",
  "share/MRCPP/mwfilters/I_c_left_9",
  "share/MRCPP/mwfilters/I_c_right_1",
  "share/MRCPP/mwfilters/I_c_right_10",
  "share/MRCPP/mwfilters/I_c_right_11",
  "share/MRCPP/mwfilters/I_c_right_12",
  "share/MRCPP/mwfilters/I_c_right_13",
  "share/MRCPP/mwfilters/I_c_right_14",
  "share/MRCPP/mwfilters/I_c_right_15",
  "share/MRCPP/mwfilters/I_c_right_16",
  "share/MRCPP/mwfilters/I_c_right_17",
  "share/MRCPP/mwfilters/I_c_right_18",
  "share/MRCPP/mwfilters/I_c_right_19",
  "share/MRCPP/mwfilters/I_c_right_2",
  "share/MRCPP/mwfilters/I_c_right_20",
  "share/MRCPP/mwfilters/I_c_right_21",
  "share/MRCPP/mwfilters/I_c_right_22",
  "share/MRCPP/mwfilters/I_c_right_23",
  "share/MRCPP/mwfilters/I_c_right_24",
  "share/MRCPP/mwfilters/I_c_right_25",
  "share/MRCPP/mwfilters/I_c_right_26",
  "share/MRCPP/mwfilters/I_c_right_27",
  "share/MRCPP/mwfilters/I_c_right_28",
  "share/MRCPP/mwfilters/I_c_right_29",
  "share/MRCPP/mwfilters/I_c_right_3",
  "share/MRCPP/mwfilters/I_c_right_30",
  "share/MRCPP/mwfilters/I_c_right_31",
  "share/MRCPP/mwfilters/I_c_right_32",
  "share/MRCPP/mwfilters/I_c_right_33",
  "share/MRCPP/mwfilters/I_c_right_34",
  "share/MRCPP/mwfilters/I_c_right_35",
  "share/MRCPP/mwfilters/I_c_right_36",
  "share/MRCPP/mwfilters/I_c_right_37",
  "share/MRCPP/mwfilters/I_c_right_38",
  "share/MRCPP/mwfilters/I_c_right_39",
  "share/MRCPP/mwfilters/I_c_right_4",
  "share/MRCPP/mwfilters/I_c_right_40",
  "share/MRCPP/mwfilters/I_c_right_41",
  "share/MRCPP/mwfilters/I_c_right_5",
  "share/MRCPP/mwfilters/I_c_right_6",
  "share/MRCPP/mwfilters/I_c_right_7",
  "share/MRCPP/mwfilters/I_c_right_8",
  "share/MRCPP/mwfilters/I_c_right_9",
  "share/MRCPP/mwfilters/L_G0_1",
  "share/MRCPP/mwfilters/L_G0_10",
  "share/MRCPP/mwfilters/L_G0_11",
  "share/MRCPP/mwfilters/L_G0_12",
  "share/MRCPP/mwfilters/L_G0_13",
  "share/MRCPP/mwfilters/L_G0_14",
  "share/MRCPP/mwfilters/L_G0_15",
  "share/MRCPP/mwfilters/L_G0_16",
  "share/MRCPP/mwfilters/L_G0_17",
  "share/MRCPP/mwfilters/L_G0_18",
  "share/MRCPP/mwfilters/L_G0_19",
  "share/MRCPP/mwfilters/L_G0_2",
  "share/MRCPP/mwfilters/L_G0_20",
  "share/MRCPP/mwfilters/L_G0_21",
  "share/MRCPP/mwfilters/L_G0_22",
  "share/MRCPP/mwfilters/L_G0_23",
  "share/MRCPP/mwfilters/L_G0_24",
  "share/MRCPP/mwfilters/L_G0_25",
  "share/MRCPP/mwfilters/L_G0_26",
  "share/MRCPP/mwfilters/L_G0_27",
  "share/MRCPP/mwfilters/L_G0_28",
  "share/MRCPP/mwfilters/L_G0_29",
  "share/MRCPP/mwfilters/L_G0_3",
  "share/MRCPP/mwfilters/L_G0_30",
  "share/MRCPP/mwfilters/L_G0_31",
  "share/MRCPP/mwfilters/L_G0_32",
  "share/MRCPP/mwfilters/L_G0_33",
  "share/MRCPP/mwfilters/L_G0_34",
  "share/MRCPP/mwfilters/L_G0_35",
  "share/MRCPP/mwfilters/L_G0_36",
  "share/MRCPP/mwfilters/L_G0_37",
  "share/MRCPP/mwfilters/L_G0_38",
  "share/MRCPP/mwfilters/L_G0_39",
  "share/MRCPP/mwfilters/L_G0_4",
  "share/MRCPP/mwfilters/L_G0_40",
  "share/MRCPP/mwfilters/L_G0_41",
  "share/MRCPP/mwfilters/L_G0_5",
  "share/MRCPP/mwfilters/L_G0_6",
  "share/MRCPP/mwfilters/L_G0_7",
  "share/MRCPP/mwfilters/L_G0_8",
  "share/MRCPP/mwfilters/L_G0_9",
  "share/MRCPP/mwfilters/L_H0_1",
  "share/MRCPP/mwfilters/L_H0_10",
  "share/MRCPP/mwfilters/L_H0_11",
  "share/MRCPP/mwfilters/L_H0_12",
  "share/MRCPP/mwfilters/L_H0_13",
  "share/MRCPP/mwfilters/L_H0_14",
  "share/MRCPP/mwfilters/L_H0_15",
  "share/MRCPP/mwfilters/L_H0_16",
  "share/MRCPP/mwfilters/L_H0_17",
  "share/MRCPP/mwfilters/L_H0_18",
  "share/MRCPP/mwfilters/L_H0_19",
  "share/MRCPP/mwfilters/L_H0_2",
  "share/MRCPP/mwfilters/L_H0_20",
  "share/MRCPP/mwfilters/L_H0_21",
  "share/MRCPP/mwfilters/L_H0_22",
  "share/MRCPP/mwfilters/L_H0_23",
  "share/MRCPP/mwfilters/L_H0_24",
  "share/MRCPP/mwfilters/L_H0_25",
  "share/MRCPP/mwfilters/L_H0_26",
  "share/MRCPP/mwfilters/L_H0_27",
  "share/MRCPP/mwfilters/L_H0_28",
  "share/MRCPP/mwfilters/L_H0_29",
  "share/MRCPP/mwfilters/L_H0_3",
  "share/MRCPP/mwfilters/L_H0_30",
  "share/MRCPP/mwfilters/L_H0_31",
  "share/MRCPP/mwfilters/L_H0_32",
  "share/MRCPP/mwfilters/L_H0_33",
  "share/MRCPP/mwfilters/L_H0_34",
  "share/MRCPP/mwfilters/L_H0_35",
  "share/MRCPP/mwfilters/L_H0_36",
  "share/MRCPP/mwfilters/L_H0_37",
  "share/MRCPP/mwfilters/L_H0_38",
  "share/MRCPP/mwfilters/L_H0_39",
  "share/MRCPP/mwfilters/L_H0_4",
  "share/MRCPP/mwfilters/L_H0_40",
  "share/MRCPP/mwfilters/L_H0_41",
  "share/MRCPP/mwfilters/L_H0_5",
  "share/MRCPP/mwfilters/L_H0_6",
  "share/MRCPP/mwfilters/L_H0_7",
  "share/MRCPP/mwfilters/L_H0_8",
  "share/MRCPP/mwfilters/L_H0_9",
  "share/MRCPP/mwfilters/L_c_left_1",
  "share/MRCPP/mwfilters/L_c_left_10",
  "share/MRCPP/mwfilters/L_c_left_11",
  "share/MRCPP/mwfilters/L_c_left_12",
  "share/MRCPP/mwfilters/L_c_left_13",
  "share/MRCPP/mwfilters/L_c_left_14",
  "share/MRCPP/mwfilters/L_c_left_15",
  "share/MRCPP/mwfilters/L_c_left_16",
  "share/MRCPP/mwfilters/L_c_left_17",
  "share/MRCPP/mwfilters/L_c_left_18",
  "share/MRCPP/mwfilters/L_c_left_19",
  "share/MRCPP/mwfilters/L_c_left_2",
  "share/MRCPP/mwfilters/L_c_left_20",
  "share/MRCPP/mwfilters/L_c_left_21",
  "share/MRCPP/mwfilters/L_c_left_22",
  "share/MRCPP/mwfilters/L_c_left_23",
  "share/MRCPP/mwfilters/L_c_left_24",
  "share/MRCPP/mwfilters/L_c_left_25",
  "share/MRCPP/mwfilters/L_c_left_26",
  "share/MRCPP/mwfilters/L_c_left_27",
  "share/MRCPP/mwfilters/L_c_left_28",
  "share/MRCPP/mwfilters/L_c_left_29",
  "share/MRCPP/mwfilters/L_c_left_3",
  "share/MRCPP/mwfilters/L_c_left_30",
  "share/MRCPP/mwfilters/L_c_left_31",
  "share/MRCPP/mwfilters/L_c_left_32",
  "share/MRCPP/mwfilters/L_c_left_33",
  "share/MRCPP/mwfilters/L_c_left_34",
  "share/MRCPP/mwfilters/L_c_left_35",
  "share/MRCPP/mwfilters/L_c_left_36",
  "share/MRCPP/mwfilters/L_c_left_37",
  "share/MRCPP/mwfilters/L_c_left_38",
  "share/MRCPP/mwfilters/L_c_left_39",
  "share/MRCPP/mwfilters/L_c_left_4",
  "share/MRCPP/mwfilters/L_c_left_40",
  "share/MRCPP/mwfilters/L_c_left_41",
  "share/MRCPP/mwfilters/L_c_left_5",
  "share/MRCPP/mwfilters/L_c_left_6",
  "share/MRCPP/mwfilters/L_c_left_7",
  "share/MRCPP/mwfilters/L_c_left_8",
  "share/MRCPP/mwfilters/L_c_left_9",
  "share/MRCPP/mwfilters/L_c_right_1",
  "share/MRCPP/mwfilters/L_c_right_10",
  "share/MRCPP/mwfilters/L_c_right_11",
  "share/MRCPP/mwfilters/L_c_right_12",
  "share/MRCPP/mwfilters/L_c_right_13",
  "share/MRCPP/mwfilters/L_c_right_14",
  "share/MRCPP/mwfilters/L_c_right_15",
  "share/MRCPP/mwfilters/L_c_right_16",
  "share/MRCPP/mwfilters/L_c_right_17",
  "share/MRCPP/mwfilters/L_c_right_18",
  "share/MRCPP/mwfilters/L_c_right_19",
  "share/MRCPP/mwfilters/L_c_right_2",
  "share/MRCPP/mwfilters/L_c_right_20",
  "share/MRCPP/mwfilters/L_c_right_21",
  "share/MRCPP/mwfilters/L_c_right_22",
  "share/MRCPP/mwfilters/L_c_right_23",
  "share/MRCPP/mwfilters/L_c_right_24",
  "share/MRCPP/mwfilters/L_c_right_25",
  "share/MRCPP/mwfilters/L_c_right_26",
  "share/MRCPP/mwfilters/L_c_right_27",
  "share/MRCPP/mwfilters/L_c_right_28",
  "share/MRCPP/mwfilters/L_c_right_29",
  "share/MRCPP/mwfilters/L_c_right_3",
  "share/MRCPP/mwfilters/L_c_right_30",
  "share/MRCPP/mwfilters/L_c_right_31",
  "share/MRCPP/mwfilters/L_c_right_32",
  "share/MRCPP/mwfilters/L_c_right_33",
  "share/MRCPP/mwfilters/L_c_right_34",
  "share/MRCPP/mwfilters/L_c_right_35",
  "share/MRCPP/mwfilters/L_c_right_36",
  "share/MRCPP/mwfilters/L_c_right_37",
  "share/MRCPP/mwfilters/L_c_right_38",
  "share/MRCPP/mwfilters/L_c_right_39",
  "share/MRCPP/mwfilters/L_c_right_4",
  "share/MRCPP/mwfilters/L_c_right_40",
  "share/MRCPP/mwfilters/L_c_right_41",
  "share/MRCPP/mwfilters/L_c_right_5",
  "share/MRCPP/mwfilters/L_c_right_6",
  "share/MRCPP/mwfilters/L_c_right_7",
  "share/MRCPP/mwfilters/L_c_right_8",
  "share/MRCPP/mwfilters/L_c_right_9",
  "share/MRCPP/mwfilters/README",
  "share/cmake/MRCPP/MRCPPConfig.cmake",
  "share/cmake/MRCPP/MRCPPConfigVersion.cmake",
  "share/cmake/MRCPP/MRCPPTargets-release.cmake",
  "share/cmake/MRCPP/MRCPPTargets.cmake"
 ],
 "index": {
  "arch": "x86_64",
  "build": "mpi_openmpi_hcda3a02_0",
  "build_number": 0,
  "depends": [
   "eigen",
   "libcxx >=10.0.1",
   "llvm-openmp >=10.0.1",
   "openmpi >=4.0,<4.1.0a0"
  ],
  "license": "LGPL-3.0-or-later",
  "license_family": "LGPL",
  "name": "mrcpp",
  "platform": "osx",
  "subdir": "osx-64",
  "timestamp": 1601716352940,
  "version": "1.3.4"
 },
 "metadata_version": 1,
 "name": "mrcpp",
 "raw_recipe": "{% set name = \"mrcpp\" %}\n{% set version = \"1.3.4\" %}\n{% set sha256 = \"fe6d1ad5804f605c7ba0da6831a8dc7fed72de6f2476b162961038aaa2321656\" %}\n{% set build = 0 %}\n\n# recipe-lint fails if mpi is undefined\n{% set mpi = mpi or 'nompi' %}\n{% if mpi == \"nompi\" %}\n# prioritize shared-memory variant via build number\n{% set build = build + 100 %}\n{% endif %}\n# NOTE This means that the OpenMP build will be highest priority\n\n{% if mpi != \"nompi\" %}\n{% set mpi_prefix = \"mpi_\" + mpi %}\n{% else %}\n{% set mpi_prefix = \"nompi\" %}\n{% endif %}\n# add build string so packages can depend on\n# mpi or nompi variants\n# dependencies:\n# `mrcpp * mpi_mpich_*` for mpich\n# `mrcpp * mpi_*` for any mpi\n# `mrcpp * nompi_*` for no mpi\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/MRChemSoft/mrcpp/archive/v{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: {{ build }}\n  skip: true  # [win]\n  binary_relocation: true\n  string: {{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}\n  run_exports:\n    - {{ pin_subpackage('mrcpp', max_pin='x.x') }}\n    - {{ name }} * {{ mpi_prefix }}_*\n\nrequirements:\n  build:\n    - cmake >=3.11\n    - {{ compiler('cxx') }}\n    - ninja\n  host:\n    - {{ pin_compatible('eigen', max_pin='x.x') }}\n    - llvm-openmp  # [osx]\n    - libgomp      # [linux]\n    - {{ mpi }}    # [mpi != 'nompi']\n  run:\n    - eigen\n\ntest:\n  commands:\n    # Verify library\n    - test -f $PREFIX/lib/libmrcpp$SHLIB_EXT                              # [not win]\n    - test -L $PREFIX/lib/libmrcpp$SHLIB_EXT                              # [not win]\n    # Inspect linkage\n    - ldd -v $PREFIX/lib/libmrcpp$SHLIB_EXT                               # [linux]\n    - otool -L $PREFIX/lib/libmrcpp$SHLIB_EXT                             # [osx]\n    - conda inspect linkages --show-files --groupby=dependency $PKG_NAME  # [not win]\n    - conda inspect objects -p $PREFIX $PKG_NAME                          # [osx]\n\noutputs:\n  - name: mrcpp\n    files:\n      - bin/mrcpp-tests        # [not win]\n      - include/MRCPP          # [not win]\n      - lib/libmrcpp*          # [not win]\n      - share/cmake/MRCPP      # [not win]\n      - share/MRCPP/mwfilters  # [not win]\n\nabout:\n  home: https://github.com/MRChemSoft/mrcpp\n  dev_url: https://github.com/MRChemSoft/mrcpp\n  doc_url: https://mrcpp.readthedocs.io/en/latest/\n  doc_source_url: https://github.com/MRChemSoft/mrcpp/blob/master/doc/index.rst\n  license: LGPL-3.0-or-later\n  license_url: https://opensource.org/licenses/LGPL-3.0\n  license_file: LICENSE\n  license_family: LGPL\n  summary: MultiResolution Computational Program Package\n\nextra:\n  recipe-maintainers:\n    - robertodr\n    - bjorgve\n    - stigrj\n",
 "rendered_recipe": {
  "about": {
   "dev_url": "https://github.com/MRChemSoft/mrcpp",
   "doc_source_url": "https://github.com/MRChemSoft/mrcpp/blob/master/doc/index.rst",
   "doc_url": "https://mrcpp.readthedocs.io/en/latest/",
   "home": "https://github.com/MRChemSoft/mrcpp",
   "license": "LGPL-3.0-or-later",
   "license_family": "LGPL",
   "license_file": "LICENSE",
   "license_url": "https://opensource.org/licenses/LGPL-3.0",
   "summary": "MultiResolution Computational Program Package"
  },
  "build": {
   "binary_relocation": true,
   "number": "0",
   "run_exports": [
    "mrcpp * mpi_openmpi_*",
    "mrcpp >=1.3.4,<1.4.0a0"
   ],
   "string": "mpi_openmpi_hcda3a02_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "bjorgve",
    "robertodr",
    "stigrj"
   ]
  },
  "package": {
   "name": "mrcpp",
   "version": "1.3.4"
  },
  "requirements": {
   "build": [
    "bzip2 1.0.8 haf1e3a3_3",
    "c-ares 1.16.1 haf1e3a3_3",
    "ca-certificates 2020.6.20 hecda079_0",
    "cctools_osx-64 949.0.1 h5ba7a2e_7",
    "clang 10.0.1 default_hf57f61e_1",
    "clang_osx-64 10.0.1 h05bbb7f_10",
    "clangxx 10.0.1 default_hf57f61e_1",
    "clangxx_osx-64 10.0.1 h05bbb7f_10",
    "cmake 3.18.2 h9f6fb0d_0",
    "compiler-rt 10.0.1 he6db49b_0",
    "compiler-rt_osx-64 10.0.1 h033240e_0",
    "expat 2.2.9 hb1e8313_2",
    "krb5 1.17.1 h75d18d8_3",
    "ld64_osx-64 530 h3c32e8a_7",
    "libclang-cpp10 10.0.1 default_hf57f61e_1",
    "libcurl 7.71.1 h9bf37e3_8",
    "libcxx 10.0.1 h5f48129_0",
    "libedit 3.1.20191231 h0678c8f_2",
    "libev 4.33 haf1e3a3_1",
    "libllvm10 10.0.1 h009f743_3",
    "libnghttp2 1.41.0 h7580e61_2",
    "libssh2 1.9.0 h8a08a2b_5",
    "libuv 1.40.0 haf1e3a3_0",
    "llvm-tools 10.0.1 h1341992_3",
    "ncurses 6.2 hb1e8313_1",
    "ninja 1.10.1 h879752b_1",
    "openssl 1.1.1h haf1e3a3_0",
    "rhash 1.3.6 h1de35cc_1001",
    "tapi 1000.10.8 h879752b_4",
    "tk 8.6.10 hb0a8c7a_0",
    "xz 5.2.5 haf1e3a3_1",
    "zlib 1.2.11 h7795811_1009"
   ],
   "host": [
    "eigen 3.3.7 ha1b3eb9_1001",
    "libcxx 10.0.1 h5f48129_0",
    "libgfortran 4.0.0 h2d743fc_11",
    "libgfortran4 7.5.0 h2d743fc_11",
    "llvm-openmp 10.0.1 h28b9765_0",
    "mpi 1.0 openmpi",
    "openmpi 4.0.5 h609164f_1",
    "zlib 1.2.11 h7795811_1009"
   ],
   "run": [
    "eigen",
    "libcxx >=10.0.1",
    "llvm-openmp >=10.0.1",
    "openmpi >=4.0,<4.1.0a0"
   ]
  },
  "source": {
   "sha256": "fe6d1ad5804f605c7ba0da6831a8dc7fed72de6f2476b162961038aaa2321656",
   "url": "https://github.com/MRChemSoft/mrcpp/archive/v1.3.4.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/lib/libmrcpp$SHLIB_EXT",
    "test -L $PREFIX/lib/libmrcpp$SHLIB_EXT",
    "otool -L $PREFIX/lib/libmrcpp$SHLIB_EXT",
    "conda inspect linkages --show-files --groupby=dependency $PKG_NAME",
    "conda inspect objects -p $PREFIX $PKG_NAME"
   ]
  }
 },
 "version": "1.3.4"
}