{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.10.1",
  "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
  "dev_url": "https://github.com/root-project/root/",
  "doc_url": "https://root.cern/documentation",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "parent_recipe": {
    "name": "root_base",
    "path": "/private/tmp/fake-home/root-feedstock/recipe",
    "version": "6.24.0"
   },
   "recipe-maintainers": [
    "chrisburr",
    "henryiii",
    "eguiraud"
   ]
  },
  "home": "https://root.cern/",
  "identifiers": [],
  "keywords": [],
  "license": "LGPL-2.1-only",
  "license_file": "root-source/LICENSE",
  "root_pkgs": [
   "python_abi 3.9 1_cp39",
   "yaml 0.2.5 h642e427_0",
   "ca-certificates 2020.12.5 h4653dfc_0",
   "tqdm 4.59.0 pyhd8ed1ab_0",
   "idna 2.10 pyh9f0ad1d_0",
   "libarchive 3.5.1 h2abb879_1",
   "wheel 0.36.2 pyhd3deb0d_0",
   "pycparser 2.20 pyh9f0ad1d_2",
   "liblief 0.10.1 hb904e53_2",
   "soupsieve 2.0.1 py_1",
   "requests 2.25.1 pyhd3deb0d_0",
   "beautifulsoup4 4.9.3 pyhb0f4dca_0",
   "libffi 3.3 h9f76cd9_2",
   "glob2 0.7 py_0",
   "ncurses 6.2 h9aa5885_4",
   "icu 68.1 h17758a7_0",
   "py-lief 0.10.1 py39h9336629_2",
   "libcxx 11.1.0 h168391b_0",
   "pip 21.0.1 pyhd8ed1ab_0",
   "bzip2 1.0.8 h3422bc3_4",
   "tzdata 2021a he74cb21_0",
   "python 3.9.2 hcbd9b3a_0_cpython",
   "psutil 5.8.0 py39h5161555_1",
   "cffi 1.14.5 py39h702c04f_0",
   "pyopenssl 20.0.1 pyhd8ed1ab_0",
   "openssl 1.1.1k h27ca646_0",
   "urllib3 1.26.4 pyhd8ed1ab_0",
   "certifi 2020.12.5 py39h2804cbe_1",
   "pkginfo 1.7.0 pyhd8ed1ab_0",
   "zstd 1.4.9 h5b28eab_0",
   "tk 8.6.10 hf7e6567_1",
   "pyyaml 5.4.1 py39h46acfd9_0",
   "lz4-c 1.9.3 h9f76cd9_0",
   "pytz 2021.1 pyhd8ed1ab_0",
   "markupsafe 1.1.1 py39h46acfd9_3",
   "libxml2 2.9.10 h538f51a_4",
   "zlib 1.2.11 h31e879b_1009",
   "brotlipy 0.7.0 py39h46acfd9_1001",
   "sqlite 3.35.3 h6d56c25_0",
   "lzo 2.10 h642e427_1000",
   "ruamel_yaml 0.15.80 py39h46acfd9_1004",
   "pycosat 0.6.3 py39h46acfd9_1006",
   "cryptography 3.4.7 py39h73257c9_0",
   "jinja2 2.11.3 pyh44b312d_0",
   "ripgrep 12.1.1 h1f0153e_1",
   "setuptools 49.6.0 py39h2804cbe_3",
   "conda-package-handling 1.7.2 py39h51e6412_0",
   "libiconv 1.16 h642e427_0",
   "conda 4.10.1 py39h2804cbe_0",
   "conda-build 3.21.4 py39h2804cbe_0",
   "python-libarchive-c 2.9 py39h2804cbe_2",
   "xz 5.2.5 h642e427_1",
   "chardet 4.0.0 py39h2804cbe_1",
   "six 1.15.0 pyh9f0ad1d_0",
   "readline 8.1 hfbdcbf2_0",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "pysocks 1.7.1 py39h2804cbe_3"
  ],
  "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n",
  "tags": []
 },
 "conda_build_config": {
  "CONDA_BUILD_SYSROOT": "/tmp/fake-home/MacOSX11.0.sdk",
  "MACOSX_DEPLOYMENT_TARGET": "11.0",
  "c_compiler": "clang",
  "c_compiler_version": "11",
  "cfitsio": "3.470",
  "channel_sources": "conda-forge/label/rust_dev,conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "clangxx",
  "cxx_compiler_version": "11",
  "extend_keys": [
   "ignore_version",
   "ignore_build_only_deps",
   "pin_run_as_build",
   "extend_keys"
  ],
  "fftw": "3",
  "fortran_compiler": "gfortran",
  "freetype": "2",
  "gdk_pixbuf": "2",
  "giflib": "5.2",
  "glew": "2.1",
  "graphviz": "2.46",
  "gsl": "2.6",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "libblas": "3.9 *netlib",
  "libcblas": "3.9 *netlib",
  "libpng": "1.6",
  "librsvg": "2",
  "libtiff": "4",
  "libxml2": "2.9",
  "lua": "5",
  "lz4_c": "1.9.3",
  "macos_machine": "arm64-apple-darwin20.0.0",
  "numpy": "1.19",
  "openssl": "1.1.1",
  "pcre": "8",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "fftw": {
    "max_pin": "x"
   },
   "freetype": {
    "max_pin": "x"
   },
   "glew": {
    "max_pin": "x.x"
   },
   "graphviz": {
    "max_pin": "x"
   },
   "libpng": {
    "max_pin": "x.x"
   },
   "librsvg": {
    "max_pin": "x"
   },
   "libtiff": {
    "max_pin": "x"
   },
   "libxml2": {
    "max_pin": "x.x"
   },
   "lz4-c": {
    "max_pin": "x.x.x"
   },
   "openssl": {
    "max_pin": "x.x.x"
   },
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "sqlite": {
    "max_pin": "x"
   },
   "xz": {
    "max_pin": "x.x"
   },
   "zlib": {
    "max_pin": "x.x"
   }
  },
  "python": "3.8.* *_cpython",
  "r_base": "3.5",
  "sqlite": "3",
  "target_platform": "osx-arm64",
  "tbb": "2020",
  "tbb_devel": "2020",
  "xrootd": "5",
  "xz": "5.2",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ],
   [
    "python",
    "numpy"
   ]
  ],
  "zlib": "1.2",
  "zstd": "1.4"
 },
 "files": [],
 "index": {
  "arch": "arm64",
  "build": "py38h92c76d4_0",
  "build_number": 0,
  "depends": [
   "compilers",
   "ipython",
   "metakernel",
   "notebook",
   "numba",
   "python >=3.8,<3.9.0a0",
   "python_abi 3.8.* *_cp38",
   "root_base 6.24.0 py38h21e4016_0"
  ],
  "license": "LGPL-2.1-only",
  "name": "root",
  "platform": "osx",
  "subdir": "osx-arm64",
  "timestamp": 1618944773604,
  "version": "6.24.0"
 },
 "metadata_version": 1,
 "name": "root",
 "raw_recipe": "# This file created by conda-build 3.21.4\n# ------------------------------------------------\n\npackage:\n  name: root\n  version: 6.24.0\nsource:\n  folder: root-source\n  patches:\n    - patches/0001-Hacks.patch\n    - patches/0001-Patch-for-apple-silicon.patch\n    - patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch\n    - patches/root-x.xx.xx-copy-abspath-headers.patch\n    - patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch\n    - patches/root-x.xx.xx_cling-runtime-sysroot.patch\n  sha256: 847833b264cb708bf133f91e0d65ba4ccdb40fccbc4a84c90394edc36c60d992\n  url: https://github.com/root-project/root/archive/v6-24-00.tar.gz\nbuild:\n  number: 0\n  string: py38h92c76d4_0\nrequirements:\n  host:\n    - ca-certificates 2020.12.5 h4653dfc_0\n    - certifi 2020.12.5 py38h10201cd_1\n    - libcxx 11.1.0 h168391b_0\n    - libffi 3.3 h9f76cd9_2\n    - ncurses 6.2 h9aa5885_4\n    - openssl 1.1.1k h27ca646_0\n    - pip 21.0.1 pyhd8ed1ab_0\n    - python 3.8.8 h12cc5a1_0_cpython\n    - python_abi 3.8 1_cp38\n    - readline 8.1 hedafd6a_0\n    - root_base 6.24.0 py38h21e4016_0\n    - setuptools 49.6.0 py38h10201cd_3\n    - sqlite 3.35.4 hc49ca36_0\n    - tk 8.6.10 hf7e6567_1\n    - wheel 0.36.2 pyhd3deb0d_0\n    - xz 5.2.5 h642e427_1\n    - zlib 1.2.11 h31e879b_1009\n  run:\n    - compilers\n    - ipython\n    - metakernel\n    - notebook\n    - numba\n    - python >=3.8,<3.9.0a0\n    - python_abi 3.8.* *_cp38\n    - root_base 6.24.0 py38h21e4016_0\ntest:\n  commands:\n    - ipython -c \"import JsMVA\"\n    - python test_pyroot.py\n    - root -l -b -q -x test.cpp\n    - root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'\n    - root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true\n    - root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"\n    - root -l -b -q -x test.cpp++\n  files:\n    - test.cpp\n    - test_pyroot.py\n  imports:\n    - JupyROOT\n    - ROOT\nabout:\n  description: 'Almost everything in ROOT should be supported in this Conda package;\n    ROOT was built with lots of options turned\n\n    on. Here are a few things to try:\n\n\n    * `root`: you can start up a session and see the splash screen; Control-D to exit.\n\n    * `python` followed by `import ROOT` will load PyROOT.\n\n    * `root --notebook` will start a notebook server with a ROOT kernel choice.\n\n    * `rootbrowse` will open a TBrowser session so you can look through files.\n\n    * `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a\n    DataFrame example with an animated plot.\n\n    * `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will\n    print the tutorial dir.\n\n    * `root -b -l -q -e ''std::cout << (float) TPython::Eval(\"1+1\") << endl;''` will\n    run Python from C++ ROOT.\n\n\n    See the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information\n    about using this Conda package.\n\n\n    The ROOT package will prepare the required compilers. Everything in Conda is symlinked\n    into\n\n    `$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically.\n    The `thisroot.*`\n\n    scripts should not be used and are not provided. Graphics, `rootbrowse`, etc.\n    all should work. OpenGL is enabled.\n\n\n    There is also a `root_base` package, with minimal dependecies, that libraries\n    should depend on this to avoid\n\n    having a runtime dependency on the `compilers` package. `root-dependencies` and\n    `root-binaries` are also available.\n\n    In most cases users should use the `root` package directly, since it adds both\n    of these, along with compilers,\n\n    Jupyter, and a few other things to facilitate using ROOT or PyROOT.\n\n\n    ROOT was built with and will report `-std=c++17` from `root-config`.\n\n    '\n  dev_url: https://github.com/root-project/root/\n  doc_url: https://root.cern/documentation\n  home: https://root.cern/\n  license: LGPL-2.1-only\n  license_file: root-source/LICENSE\n  summary: 'ROOT is a modular scientific software toolkit. It provides all the functionalities\n    needed to deal with big data\n\n    processing, statistical analysis, visualisation and storage. It is mainly written\n    in C++ but integrated with other\n\n    languages such as Python and R.\n\n    '\nextra:\n  copy_test_source_files: true\n  final: true\n  recipe-maintainers:\n    - chrisburr\n    - eguiraud\n    - henryiii\n",
 "rendered_recipe": {
  "about": {
   "description": "Almost everything in ROOT should be supported in this Conda package; ROOT was built with lots of options turned\non. Here are a few things to try:\n\n* `root`: you can start up a session and see the splash screen; Control-D to exit.\n* `python` followed by `import ROOT` will load PyROOT.\n* `root --notebook` will start a notebook server with a ROOT kernel choice.\n* `rootbrowse` will open a TBrowser session so you can look through files.\n* `root -l -q $ROOTSYS/tutorials/dataframe/df013_InspectAnalysis.C` will run a DataFrame example with an animated plot.\n* `root -b -q -l -n -e \"std::cout << TROOT::GetTutorialDir() << std::endl;\"` will print the tutorial dir.\n* `root -b -l -q -e 'std::cout << (float) TPython::Eval(\"1+1\") << endl;'` will run Python from C++ ROOT.\n\nSee the post [here](https://iscinumpy.gitlab.io/post/root-conda/) for more information about using this Conda package.\n\nThe ROOT package will prepare the required compilers. Everything in Conda is symlinked into\n`$CONDA_PREFIX` if you build things by hand; tools like CMake should find it automatically. The `thisroot.*`\nscripts should not be used and are not provided. Graphics, `rootbrowse`, etc. all should work. OpenGL is enabled.\n\nThere is also a `root_base` package, with minimal dependecies, that libraries should depend on this to avoid\nhaving a runtime dependency on the `compilers` package. `root-dependencies` and `root-binaries` are also available.\nIn most cases users should use the `root` package directly, since it adds both of these, along with compilers,\nJupyter, and a few other things to facilitate using ROOT or PyROOT.\n\nROOT was built with and will report `-std=c++17` from `root-config`.\n",
   "dev_url": "https://github.com/root-project/root/",
   "doc_url": "https://root.cern/documentation",
   "home": "https://root.cern/",
   "license": "LGPL-2.1-only",
   "license_file": "root-source/LICENSE",
   "summary": "ROOT is a modular scientific software toolkit. It provides all the functionalities needed to deal with big data\nprocessing, statistical analysis, visualisation and storage. It is mainly written in C++ but integrated with other\nlanguages such as Python and R.\n"
  },
  "build": {
   "number": 0,
   "string": "py38h92c76d4_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "chrisburr",
    "eguiraud",
    "henryiii"
   ]
  },
  "package": {
   "name": "root",
   "version": "6.24.0"
  },
  "requirements": {
   "host": [
    "ca-certificates 2020.12.5 h4653dfc_0",
    "certifi 2020.12.5 py38h10201cd_1",
    "libcxx 11.1.0 h168391b_0",
    "libffi 3.3 h9f76cd9_2",
    "ncurses 6.2 h9aa5885_4",
    "openssl 1.1.1k h27ca646_0",
    "pip 21.0.1 pyhd8ed1ab_0",
    "python 3.8.8 h12cc5a1_0_cpython",
    "python_abi 3.8 1_cp38",
    "readline 8.1 hedafd6a_0",
    "root_base 6.24.0 py38h21e4016_0",
    "setuptools 49.6.0 py38h10201cd_3",
    "sqlite 3.35.4 hc49ca36_0",
    "tk 8.6.10 hf7e6567_1",
    "wheel 0.36.2 pyhd3deb0d_0",
    "xz 5.2.5 h642e427_1",
    "zlib 1.2.11 h31e879b_1009"
   ],
   "run": [
    "compilers",
    "ipython",
    "metakernel",
    "notebook",
    "numba",
    "python >=3.8,<3.9.0a0",
    "python_abi 3.8.* *_cp38",
    "root_base 6.24.0 py38h21e4016_0"
   ]
  },
  "source": {
   "folder": "root-source",
   "patches": [
    "patches/0001-Hacks.patch",
    "patches/0001-Patch-for-apple-silicon.patch",
    "patches/0001-Set-LLVM_REQUIRES_EH-for-Cling.patch",
    "patches/root-x.xx.xx-copy-abspath-headers.patch",
    "patches/root-x.xx.xx-osx-remove-hardcoded-sysroot.patch",
    "patches/root-x.xx.xx_cling-runtime-sysroot.patch"
   ],
   "sha256": "847833b264cb708bf133f91e0d65ba4ccdb40fccbc4a84c90394edc36c60d992",
   "url": "https://github.com/root-project/root/archive/v6-24-00.tar.gz"
  },
  "test": {
   "commands": [
    "ipython -c \"import JsMVA\"",
    "python test_pyroot.py",
    "root -l -b -q -x test.cpp",
    "root -b -l -q -x -e 'gSystem->LoadAllLibraries(); 0'",
    "root -b -l -q -x \"${PREFIX}/tutorials/eve/geom_lhcb.C\" || true",
    "root -b -l -q -x \"${PREFIX}/tutorials/tree/run_h1analysis.C\"",
    "root -l -b -q -x test.cpp++"
   ],
   "files": [
    "test.cpp",
    "test_pyroot.py"
   ],
   "imports": [
    "JupyROOT",
    "ROOT"
   ]
  }
 },
 "version": "6.24.0"
}