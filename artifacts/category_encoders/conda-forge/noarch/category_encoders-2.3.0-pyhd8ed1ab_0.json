{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.10.3",
  "description": "A set of scikit-learn-style transformers for encoding categorical variables\ninto numeric with different techniques. While ordinal, one-hot, and hashing\nencoders have similar equivalents in the existing scikit-learn version, the\ntransformers in this library all share a few useful properties:\n\n- First-class support for pandas dataframes as an input (and optionally as\n  output)\n\n- Can explicitly configure which columns in the data are encoded by name or\n  index, or infer non-numeric columns regardless of input type\n\n- Can drop any columns with very low variance based on training set\n  optionally\n\n- Portability: train a transformer on data, pickle it, reuse it later and\n  get the same thing out.\n\n- Full compatibility with sklearn pipelines, input an array-like dataset\n  like any other transformer",
  "doc_url": "https://contrib.scikit-learn.org/categorical-encoding",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "bollwyvl",
    "nirajd",
    "wdm0006"
   ]
  },
  "home": "https://github.com/scikit-learn-contrib/categorical_encoding",
  "identifiers": [],
  "keywords": [],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "license_file": "dist/LICENSE.md",
  "root_pkgs": [
   "psutil 5.8.0 py38h497a2fe_1",
   "nbformat 5.1.3 pyhd8ed1ab_0",
   "jsonschema 4.0.1 pyhd8ed1ab_0",
   "importlib-metadata 4.8.1 py38h578d9bd_0",
   "ipython_genutils 0.2.0 py_1",
   "libiconv 1.16 h516909a_0",
   "perl 5.32.1 0_h7f98852_perl5",
   "pkginfo 1.7.1 pyhd8ed1ab_0",
   "xz 5.2.5 h516909a_1",
   "pytz 2021.3 pyhd8ed1ab_0",
   "pyyaml 5.4.1 py38h497a2fe_1",
   "ncurses 6.2 h58526e2_4",
   "zlib 1.2.11 h36c2ea0_1013",
   "curl 7.79.1 h2574ce0_1",
   "git 2.33.0 pl5321hc30692c_1",
   "bzip2 1.0.8 h7f98852_4",
   "jupyter_core 4.8.1 py38h578d9bd_0",
   "chardet 4.0.0 py38h578d9bd_1",
   "krb5 1.19.2 hcc1bbae_2",
   "pysocks 1.7.1 py38h578d9bd_3",
   "expat 2.4.1 h9c3ff4c_0",
   "ld_impl_linux-64 2.36.1 hea4e1c9_2",
   "conda-package-handling 1.7.3 py38h497a2fe_0",
   "_openmp_mutex 4.5 1_gnu",
   "conda-build 3.21.4 py38h578d9bd_0",
   "su-exec 0.2 h516909a_1002",
   "cffi 1.14.6 py38h3931269_1",
   "patchelf 0.13 h58526e2_0",
   "cryptography 3.4.7 py38ha5dfef3_0",
   "lzo 2.10 h516909a_1000",
   "libnghttp2 1.43.0 h812cca2_1",
   "soupsieve 2.0.1 py_1",
   "libgomp 11.2.0 h1d223b6_9",
   "libedit 3.1.20191231 he28a2e2_2",
   "patch 2.7.6 h7f98852_1002",
   "libgcc-ng 11.2.0 h1d223b6_9",
   "python_abi 3.8 2_cp38",
   "sqlite 3.36.0 h9cd32fc_2",
   "wheel 0.37.0 pyhd8ed1ab_1",
   "attrs 21.2.0 pyhd8ed1ab_0",
   "jinja2 3.0.1 pyhd8ed1ab_0",
   "c-ares 1.17.2 h7f98852_0",
   "openssl 1.1.1l h7f98852_0",
   "brotlipy 0.7.0 py38h497a2fe_1001",
   "_libgcc_mutex 0.1 conda_forge",
   "python 3.8.12 hb7a2778_1_cpython",
   "tini 0.18.0 h14c3975_1001",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "gettext 0.19.8.1 h73d1719_1008",
   "colorama 0.4.4 pyh9f0ad1d_0",
   "zstd 1.5.0 ha95c52a_0",
   "clyent 1.2.2 py_1",
   "libssh2 1.10.0 ha56f1ee_2",
   "setuptools 58.2.0 py38h578d9bd_0",
   "requests 2.26.0 pyhd8ed1ab_0",
   "icu 68.1 h58526e2_0",
   "libarchive 3.5.2 hccf745f_1",
   "py-lief 0.11.5 py38h709712a_0",
   "python-libarchive-c 3.1 py38h578d9bd_0",
   "readline 8.1 h46c0cb4_0",
   "libffi 3.4.2 h9c3ff4c_4",
   "tk 8.6.11 h27826a3_1",
   "traitlets 5.1.0 pyhd8ed1ab_0",
   "beautifulsoup4 4.10.0 pyha770c72_0",
   "zipp 3.6.0 pyhd8ed1ab_0",
   "liblief 0.11.5 h9c3ff4c_0",
   "filelock 3.3.0 pyhd8ed1ab_0",
   "pyopenssl 21.0.0 pyhd8ed1ab_0",
   "pycparser 2.20 pyh9f0ad1d_2",
   "conda 4.10.3 py38h578d9bd_2",
   "pycosat 0.6.3 py38h497a2fe_1006",
   "urllib3 1.26.7 pyhd8ed1ab_0",
   "ripgrep 13.0.0 habb4d0f_1",
   "ruamel_yaml 0.15.80 py38h497a2fe_1004",
   "charset-normalizer 2.0.0 pyhd8ed1ab_0",
   "glob2 0.7 py_0",
   "pyrsistent 0.17.3 py38h497a2fe_2",
   "six 1.16.0 pyh6c4a22f_0",
   "libstdcxx-ng 11.2.0 he4da1e4_9",
   "libcurl 7.79.1 h2574ce0_1",
   "yaml 0.2.5 h516909a_0",
   "tqdm 4.62.3 pyhd8ed1ab_0",
   "libev 4.33 h516909a_1",
   "libxml2 2.9.12 h72842e0_0",
   "libzlib 1.2.11 h36c2ea0_1013",
   "markupsafe 2.0.1 py38h497a2fe_0",
   "pcre2 10.37 h032f7d1_0",
   "idna 3.1 pyhd3deb0d_0",
   "lz4-c 1.9.3 h9c3ff4c_1",
   "click 8.0.3 py38h578d9bd_0",
   "conda-forge-ci-setup 3.12.0 py38h904d315_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "pip 21.3 pyhd8ed1ab_0",
   "certifi 2021.10.8 py38h578d9bd_0",
   "jq 1.6 h36c2ea0_1000",
   "oniguruma 6.9.7.1 h7f98852_0",
   "ca-certificates 2021.10.8 ha878542_0",
   "conda-env 2.6.0 1"
  ],
  "summary": "A collection sklearn transformers to encode categorical variables as numeric",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "cdt_name": "cos6",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "docker_image": "quay.io/condaforge/linux-anvil-comp7",
  "extend_keys": [
   "ignore_version",
   "extend_keys",
   "ignore_build_only_deps",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.8",
  "r_base": "3.5",
  "target_platform": "linux-64",
  "zip_keys": [
   [
    "cdt_name",
    "docker_image"
   ]
  ]
 },
 "files": [
  "site-packages/category_encoders-2.3.0.dist-info/INSTALLER",
  "site-packages/category_encoders-2.3.0.dist-info/LICENSE.md",
  "site-packages/category_encoders-2.3.0.dist-info/METADATA",
  "site-packages/category_encoders-2.3.0.dist-info/RECORD",
  "site-packages/category_encoders-2.3.0.dist-info/REQUESTED",
  "site-packages/category_encoders-2.3.0.dist-info/WHEEL",
  "site-packages/category_encoders-2.3.0.dist-info/direct_url.json",
  "site-packages/category_encoders/__init__.py",
  "site-packages/category_encoders/backward_difference.py",
  "site-packages/category_encoders/basen.py",
  "site-packages/category_encoders/binary.py",
  "site-packages/category_encoders/cat_boost.py",
  "site-packages/category_encoders/count.py",
  "site-packages/category_encoders/glmm.py",
  "site-packages/category_encoders/hashing.py",
  "site-packages/category_encoders/helmert.py",
  "site-packages/category_encoders/james_stein.py",
  "site-packages/category_encoders/leave_one_out.py",
  "site-packages/category_encoders/m_estimate.py",
  "site-packages/category_encoders/one_hot.py",
  "site-packages/category_encoders/ordinal.py",
  "site-packages/category_encoders/polynomial.py",
  "site-packages/category_encoders/sum_coding.py",
  "site-packages/category_encoders/target_encoder.py",
  "site-packages/category_encoders/utils.py",
  "site-packages/category_encoders/woe.py",
  "site-packages/category_encoders/wrapper.py",
  "site-packages/examples/__init__.py",
  "site-packages/examples/benchmarking/__init__.py",
  "site-packages/examples/benchmarking/benchmarking.py",
  "site-packages/examples/benchmarking/reporting.py",
  "site-packages/examples/column_transformer_example.py",
  "site-packages/examples/encoding_examples.py",
  "site-packages/examples/grid_search_example.py",
  "site-packages/examples/source_data/__init__.py",
  "site-packages/examples/source_data/loaders.py"
 ],
 "index": {
  "arch": null,
  "build": "pyhd8ed1ab_0",
  "build_number": 0,
  "depends": [
   "numpy >=1.14.0",
   "pandas >=0.21.1",
   "patsy >=0.5.1",
   "python >=3.5",
   "scikit-learn >=0.20.0",
   "scipy >=1.0.0",
   "statsmodels >=0.9.0"
  ],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "name": "category_encoders",
  "noarch": "python",
  "platform": null,
  "subdir": "noarch",
  "timestamp": 1634149821813,
  "version": "2.3.0"
 },
 "metadata_version": 1,
 "name": "category_encoders",
 "raw_recipe": "{% set name = \"category_encoders\" %}\n{% set version = \"2.3.0\" %}\n\npackage:\n  name: {{ name }}\n  version: {{ version }}\n\nsource:\n  - url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n    sha256: eef3e3f754fcb333ac90875ab20f4fc5f1c93df0b1080b0a6dd2570d634276cb\n    folder: dist\n  - url: https://github.com/scikit-learn-contrib/{{ name }}/archive/{{ version }}.tar.gz\n    sha256: 5a71ed68095615829bb818459dd7a24cc84ead3ea21b1890a12933d7fca23090\n    folder: src\n\nbuild:\n  noarch: python\n  number: 0\n  script:\n    - cd dist && {{ PYTHON }} -m pip install -vvv .\n\nrequirements:\n  host:\n    - numpy >=1.14.0\n    - pandas >=0.21.1\n    - patsy >=0.5.1\n    - pip\n    - python >=3.5\n    - scikit-learn >=0.20.0\n    - scipy >=1.0.0\n    - statsmodels >=0.9.0\n  run:\n    - numpy >=1.14.0\n    - pandas >=0.21.1\n    - patsy >=0.5.1\n    - python >=3.5\n    - scikit-learn >=0.20.0\n    - scipy >=1.0.0\n    - statsmodels >=0.9.0\n\ntest:\n  source_files:\n    - src/tests\n  requires:\n    - cython\n    - pip\n    - pytest\n    - pytest-cov\n  imports:\n    - category_encoders\n  commands:\n    - python -m pip check\n    - cd src && pytest -vv --cov category_encoders -k \"not (pandas_index or truncated_index)\"\n\nabout:\n  home: https://github.com/scikit-learn-contrib/categorical_encoding\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: dist/LICENSE.md\n  summary: A collection sklearn transformers to encode categorical variables as numeric\n  doc_url: https://contrib.scikit-learn.org/categorical-encoding\n  description: |-\n    A set of scikit-learn-style transformers for encoding categorical variables\n    into numeric with different techniques. While ordinal, one-hot, and hashing\n    encoders have similar equivalents in the existing scikit-learn version, the\n    transformers in this library all share a few useful properties:\n\n    - First-class support for pandas dataframes as an input (and optionally as\n      output)\n\n    - Can explicitly configure which columns in the data are encoded by name or\n      index, or infer non-numeric columns regardless of input type\n\n    - Can drop any columns with very low variance based on training set\n      optionally\n\n    - Portability: train a transformer on data, pickle it, reuse it later and\n      get the same thing out.\n\n    - Full compatibility with sklearn pipelines, input an array-like dataset\n      like any other transformer\n\nextra:\n  recipe-maintainers:\n    - bollwyvl\n    - nirajd\n    - wdm0006\n",
 "rendered_recipe": {
  "about": {
   "description": "A set of scikit-learn-style transformers for encoding categorical variables\ninto numeric with different techniques. While ordinal, one-hot, and hashing\nencoders have similar equivalents in the existing scikit-learn version, the\ntransformers in this library all share a few useful properties:\n\n- First-class support for pandas dataframes as an input (and optionally as\n  output)\n\n- Can explicitly configure which columns in the data are encoded by name or\n  index, or infer non-numeric columns regardless of input type\n\n- Can drop any columns with very low variance based on training set\n  optionally\n\n- Portability: train a transformer on data, pickle it, reuse it later and\n  get the same thing out.\n\n- Full compatibility with sklearn pipelines, input an array-like dataset\n  like any other transformer",
   "doc_url": "https://contrib.scikit-learn.org/categorical-encoding",
   "home": "https://github.com/scikit-learn-contrib/categorical_encoding",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "dist/LICENSE.md",
   "summary": "A collection sklearn transformers to encode categorical variables as numeric"
  },
  "build": {
   "noarch": "python",
   "number": "0",
   "script": [
    "cd dist && /home/conda/feedstock_root/build_artifacts/category_encoders_1634149558143/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pla/bin/python -m pip install -vvv ."
   ],
   "string": "pyhd8ed1ab_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "bollwyvl",
    "nirajd",
    "wdm0006"
   ]
  },
  "package": {
   "name": "category_encoders",
   "version": "2.3.0"
  },
  "requirements": {
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "ca-certificates 2021.10.8 ha878542_0",
    "joblib 1.1.0 pyhd8ed1ab_0",
    "ld_impl_linux-64 2.36.1 hea4e1c9_2",
    "libblas 3.9.0 11_linux64_openblas",
    "libcblas 3.9.0 11_linux64_openblas",
    "libffi 3.4.2 h9c3ff4c_4",
    "libgcc-ng 11.2.0 h1d223b6_11",
    "libgfortran-ng 11.2.0 h69a702a_11",
    "libgfortran5 11.2.0 h5c6108e_11",
    "libgomp 11.2.0 h1d223b6_11",
    "liblapack 3.9.0 11_linux64_openblas",
    "libopenblas 0.3.17 pthreads_h8fe5266_1",
    "libstdcxx-ng 11.2.0 he4da1e4_11",
    "libzlib 1.2.11 h36c2ea0_1013",
    "ncurses 6.2 h58526e2_4",
    "numpy 1.21.2 py39hdbf815f_0",
    "openssl 3.0.0 h7f98852_1",
    "pandas 1.3.3 py39hde0f152_0",
    "patsy 0.5.2 pyhd8ed1ab_0",
    "pip 21.3 pyhd8ed1ab_0",
    "python 3.9.7 hf930737_3_cpython",
    "python-dateutil 2.8.2 pyhd8ed1ab_0",
    "python_abi 3.9 2_cp39",
    "pytz 2021.3 pyhd8ed1ab_0",
    "readline 8.1 h46c0cb4_0",
    "scikit-learn 1.0 py39h7c5d8c9_1",
    "scipy 1.7.1 py39hee8e79c_0",
    "setuptools 58.2.0 py39hf3d152e_0",
    "six 1.16.0 pyh6c4a22f_0",
    "sqlite 3.36.0 h9cd32fc_2",
    "statsmodels 0.13.0 py39hce5d2b2_0",
    "threadpoolctl 3.0.0 pyh8a188c0_0",
    "tk 8.6.11 h27826a3_1",
    "tzdata 2021c he74cb21_0",
    "wheel 0.37.0 pyhd8ed1ab_1",
    "xz 5.2.5 h516909a_1",
    "zlib 1.2.11 h36c2ea0_1013"
   ],
   "run": [
    "numpy >=1.14.0",
    "pandas >=0.21.1",
    "patsy >=0.5.1",
    "python >=3.5",
    "scikit-learn >=0.20.0",
    "scipy >=1.0.0",
    "statsmodels >=0.9.0"
   ]
  },
  "source": [
   {
    "folder": "dist",
    "sha256": "eef3e3f754fcb333ac90875ab20f4fc5f1c93df0b1080b0a6dd2570d634276cb",
    "url": "https://pypi.io/packages/source/c/category_encoders/category_encoders-2.3.0.tar.gz"
   },
   {
    "folder": "src",
    "sha256": "5a71ed68095615829bb818459dd7a24cc84ead3ea21b1890a12933d7fca23090",
    "url": "https://github.com/scikit-learn-contrib/category_encoders/archive/2.3.0.tar.gz"
   }
  ],
  "test": {
   "commands": [
    "python -m pip check",
    "cd src && pytest -vv --cov category_encoders -k \"not (pandas_index or truncated_index)\""
   ],
   "imports": [
    "category_encoders"
   ],
   "requires": [
    "cython",
    "pip",
    "pytest",
    "pytest-cov"
   ],
   "source_files": [
    "src/tests"
   ]
  }
 },
 "version": "2.3.0"
}