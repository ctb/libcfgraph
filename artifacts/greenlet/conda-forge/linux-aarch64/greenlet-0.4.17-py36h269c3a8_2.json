{
 "about": {
  "channels": [
   "conda-forge"
  ],
  "conda_build_version": "3.20.5",
  "conda_private": false,
  "conda_version": "4.9.2",
  "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
  "dev_url": "https://github.com/python-greenlet/greenlet",
  "doc_url": "https://greenlet.readthedocs.io",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "curtisalexander",
    "nicoddemus"
   ]
  },
  "home": "https://github.com/python-greenlet/greenlet",
  "identifiers": [],
  "keywords": [],
  "license": "MIT",
  "license_family": "MIT",
  "license_file": "LICENSE",
  "root_pkgs": [
   "lz4-c 1.9.3 h01db608_0",
   "urllib3 1.26.2 pyhd8ed1ab_0",
   "anaconda-client 1.7.2 py_0",
   "certifi 2020.12.5 py38h2063c64_1",
   "python 3.8.6 h3bd6a85_4_cpython",
   "openssl 1.1.1i hf897c2e_0",
   "bzip2 1.0.8 hf897c2e_4",
   "cryptography 3.3.1 py38ha9929a6_0",
   "su-exec 0.2 h516909a_1002",
   "tqdm 4.55.2 pyhd8ed1ab_0",
   "pyopenssl 20.0.1 pyhd8ed1ab_0",
   "libstdcxx-ng 9.3.0 h7a64470_17",
   "conda 4.9.2 py38h2063c64_0",
   "pkginfo 1.6.1 pyh9f0ad1d_0",
   "ipython_genutils 0.2.0 py_1",
   "pyrsistent 0.17.3 py38h9544abe_2",
   "libedit 3.1.20191231 he28a2e2_2",
   "pytz 2020.5 pyhd8ed1ab_0",
   "setuptools 49.6.0 py38h2063c64_3",
   "sqlite 3.34.0 h43e6a2a_0",
   "patch 2.7.6 h516909a_1001",
   "jupyter_core 4.7.0 py38h2063c64_0",
   "pip 20.3.3 pyhd8ed1ab_0",
   "perl 5.32.0 hb9de7d4_0",
   "readline 8.0 h607064a_2",
   "idna 2.10 pyh9f0ad1d_0",
   "conda-build 3.20.5 py38h0cee959_0",
   "pycosat 0.6.3 py38h9544abe_1006",
   "xz 5.2.5 h6dd45c4_1",
   "psutil 5.8.0 py38h9544abe_1",
   "python-libarchive-c 2.9 py38h0cee959_2",
   "wheel 0.36.2 pyhd3deb0d_0",
   "zipp 3.4.0 py_0",
   "jsonschema 3.2.0 py_2",
   "jinja2 2.11.2 pyh9f0ad1d_0",
   "libnghttp2 1.41.0 h8cfc5f6_2",
   "ncurses 6.2 h7fd3ca4_4",
   "libgomp 9.3.0 h8ab15db_17",
   "attrs 20.3.0 pyhd3deb0d_0",
   "chardet 4.0.0 py38h2063c64_1",
   "traitlets 5.0.5 py_0",
   "cffi 1.14.4 py38hba996e7_1",
   "zstd 1.4.8 h41fb7a4_1",
   "pysocks 1.7.1 py38h2063c64_3",
   "python_abi 3.8 1_cp38",
   "pycparser 2.20 pyh9f0ad1d_2",
   "libxml2 2.9.10 hd674cf7_3",
   "ripgrep 12.1.1 h516909a_1",
   "markupsafe 1.1.1 py38h9544abe_3",
   "_openmp_mutex 4.5 1_gnu",
   "glob2 0.7 py_0",
   "clyent 1.2.2 py_1",
   "lzo 2.10 h516909a_1000",
   "libiconv 1.16 h6dd45c4_0",
   "libarchive 3.5.1 h1023f6c_1",
   "libev 4.33 h516909a_1",
   "yaml 0.2.5 h516909a_0",
   "brotlipy 0.7.0 py38ha7d8a94_1001",
   "py-lief 0.10.1 py38h0d71b83_2",
   "git 2.30.0 pl5320heef877d_0",
   "importlib_metadata 3.3.0 hd8ed1ab_3",
   "curl 7.71.1 he644dc0_8",
   "patchelf 0.11 h4c5d2ac_0",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "libffi 3.3 h884eca8_2",
   "ruamel_yaml 0.15.80 py38ha7d8a94_1003",
   "importlib-metadata 3.3.0 py38h2063c64_3",
   "expat 2.2.9 h4c5d2ac_2",
   "python-dateutil 2.8.1 py_0",
   "conda-package-handling 1.7.2 py38ha7d8a94_0",
   "nbformat 5.0.8 py_0",
   "libssh2 1.9.0 hab1572f_5",
   "tk 8.6.10 ha99a2a3_1",
   "c-ares 1.17.1 hb9de7d4_0",
   "ld_impl_linux-aarch64 2.35.1 h02ad14f_1",
   "ca-certificates 2020.12.5 h4fd8a4c_0",
   "soupsieve 2.0.1 py_1",
   "pcre 8.44 he1b5a44_0",
   "tini 0.18.0 h14c3975_1001",
   "liblief 0.10.1 he1b5a44_2",
   "icu 68.1 h884eca8_0",
   "six 1.15.0 pyh9f0ad1d_0",
   "libgcc-ng 9.3.0 h8ab15db_17",
   "gettext 0.19.8.1 h4454c44_1005",
   "pyyaml 5.3.1 py38h9544abe_2",
   "krb5 1.17.2 he08ec14_0",
   "beautifulsoup4 4.9.3 pyhb0f4dca_0",
   "zlib 1.2.11 h516909a_1009",
   "requests 2.25.1 pyhd3deb0d_0",
   "libcurl 7.71.1 hcdd3856_8",
   "oniguruma 6.9.3 hb9de7d4_0",
   "click 7.1.2 pyh9f0ad1d_0",
   "conda-forge-ci-setup 3.6.3 py38hc086270_0",
   "jq 1.6 hb9de7d4_1000",
   "conda-env 2.6.0 1",
   "shyaml 0.6.2 pyhd3deb0d_0"
  ],
  "summary": "Lightweight in-process concurrent programming",
  "tags": []
 },
 "conda_build_config": {
  "BUILD": "aarch64-conda_cos7-linux-gnu",
  "CI": "drone",
  "c_compiler": "gcc",
  "c_compiler_version": "9",
  "cdt_arch": "aarch64",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "docker_image": "quay.io/condaforge/linux-anvil-aarch64",
  "extend_keys": [
   "extend_keys",
   "pin_run_as_build",
   "ignore_version",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "numpy": "1.11",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.6.* *_cpython",
  "r_base": "3.5",
  "target_platform": "linux-aarch64"
 },
 "files": [
  "include/python3.6m/greenlet/greenlet.h",
  "lib/python3.6/site-packages/greenlet-0.4.17.dist-info/AUTHORS",
  "lib/python3.6/site-packages/greenlet-0.4.17.dist-info/INSTALLER",
  "lib/python3.6/site-packages/greenlet-0.4.17.dist-info/LICENSE",
  "lib/python3.6/site-packages/greenlet-0.4.17.dist-info/LICENSE.PSF",
  "lib/python3.6/site-packages/greenlet-0.4.17.dist-info/METADATA",
  "lib/python3.6/site-packages/greenlet-0.4.17.dist-info/RECORD",
  "lib/python3.6/site-packages/greenlet-0.4.17.dist-info/REQUESTED",
  "lib/python3.6/site-packages/greenlet-0.4.17.dist-info/WHEEL",
  "lib/python3.6/site-packages/greenlet-0.4.17.dist-info/direct_url.json",
  "lib/python3.6/site-packages/greenlet.cpython-36m-aarch64-linux-gnu.so"
 ],
 "index": {
  "arch": "aarch64",
  "build": "py36h269c3a8_2",
  "build_number": 2,
  "depends": [
   "libgcc-ng >=9.3.0",
   "python >=3.6,<3.7.0a0",
   "python_abi 3.6.* *_cp36m"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "greenlet",
  "platform": "linux",
  "subdir": "linux-aarch64",
  "timestamp": 1610329102072,
  "version": "0.4.17"
 },
 "metadata_version": 1,
 "name": "greenlet",
 "raw_recipe": "{% set name = \"greenlet\" %}\n{% set version = \"0.4.17\" %}\n{% set sha256 = \"41d8835c69a78de718e466dd0e6bfd4b46125f21a67c3ff6d76d8d8059868d6b\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  fn: {{ name }}-{{ version }}.tar.gz\n  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz\n  sha256: {{ sha256 }}\n\nbuild:\n  number: 2\n  script: {{ PYTHON }} -m pip install --no-deps --ignore-installed .\n\nrequirements:\n  build:\n    - {{ compiler(\"c\") }}\n\n  host:\n    - pip\n    - python\n\n  run:\n    - python\n\ntest:\n  imports:\n    - greenlet\n\nabout:\n  home: https://github.com/python-greenlet/greenlet\n  license: MIT\n  license_family: MIT\n  license_file: LICENSE\n  summary: Lightweight in-process concurrent programming\n\n  description: |\n    The greenlet package is a spin-off of Stackless, a version of CPython that\n    supports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n    (typically in a single or a few OS-level threads) and are synchronized with\n    data exchanges on \"channels\".\n\n    A \"greenlet\", on the other hand, is a still more primitive notion of\n    micro-thread with no implicit scheduling; coroutines, in other words. This\n    is useful when you want to control exactly when your code runs. You can\n    build custom scheduled micro-threads on top of greenlet; however, it seems\n    that greenlets are useful on their own as a way to make advanced control\n    flow structures. For example, we can recreate generators; the difference\n    with Python's own generators is that our generators can call nested\n    functions and the nested functions can yield values too. Additionally,\n    you don't need a \"yield\" keyword. See the example in\n    tests/test_generator.py.\n\n    Greenlets are provided as a C extension module for the regular unmodified\n    interpreter.\n\n    Greenlets are lightweight coroutines for in-process concurrent programming.\n  doc_url: https://greenlet.readthedocs.io\n  dev_url: https://github.com/python-greenlet/greenlet\n\nextra:\n  recipe-maintainers:\n    - curtisalexander\n    - nicoddemus\n",
 "rendered_recipe": {
  "about": {
   "description": "The greenlet package is a spin-off of Stackless, a version of CPython that\nsupports micro-threads called \"tasklets\". Tasklets run pseudo-concurrently\n(typically in a single or a few OS-level threads) and are synchronized with\ndata exchanges on \"channels\".\n\nA \"greenlet\", on the other hand, is a still more primitive notion of\nmicro-thread with no implicit scheduling; coroutines, in other words. This\nis useful when you want to control exactly when your code runs. You can\nbuild custom scheduled micro-threads on top of greenlet; however, it seems\nthat greenlets are useful on their own as a way to make advanced control\nflow structures. For example, we can recreate generators; the difference\nwith Python's own generators is that our generators can call nested\nfunctions and the nested functions can yield values too. Additionally,\nyou don't need a \"yield\" keyword. See the example in\ntests/test_generator.py.\n\nGreenlets are provided as a C extension module for the regular unmodified\ninterpreter.\n\nGreenlets are lightweight coroutines for in-process concurrent programming.\n",
   "dev_url": "https://github.com/python-greenlet/greenlet",
   "doc_url": "https://greenlet.readthedocs.io",
   "home": "https://github.com/python-greenlet/greenlet",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "LICENSE",
   "summary": "Lightweight in-process concurrent programming"
  },
  "build": {
   "number": "2",
   "script": "/drone/src/build_artifacts/greenlet_1610328985987/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehol/bin/python -m pip install --no-deps --ignore-installed .",
   "string": "py36h269c3a8_2"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "curtisalexander",
    "nicoddemus"
   ]
  },
  "package": {
   "name": "greenlet",
   "version": "0.4.17"
  },
  "requirements": {
   "build": [
    "_openmp_mutex 4.5 1_gnu",
    "binutils_impl_linux-aarch64 2.35.1 h026399b_1",
    "binutils_linux-aarch64 2.35 h0a73b0c_29",
    "gcc_impl_linux-aarch64 9.3.0 h5b547fa_17",
    "gcc_linux-aarch64 9.3.0 h3f8fa26_29",
    "kernel-headers_linux-aarch64 4.18.0 hca5cc2b_10",
    "ld_impl_linux-aarch64 2.35.1 h02ad14f_1",
    "libgcc-devel_linux-aarch64 9.3.0 h2e979a9_17",
    "libgcc-ng 9.3.0 h8ab15db_17",
    "libgomp 9.3.0 h8ab15db_17",
    "libstdcxx-ng 9.3.0 h7a64470_17",
    "sysroot_linux-aarch64 2.17 h4744778_10"
   ],
   "host": [
    "_openmp_mutex 4.5 1_gnu",
    "ca-certificates 2020.12.5 h4fd8a4c_0",
    "certifi 2020.12.5 py36h704843e_1",
    "ld_impl_linux-aarch64 2.35.1 h02ad14f_1",
    "libffi 3.3 h884eca8_2",
    "libgcc-ng 9.3.0 h8ab15db_17",
    "libgomp 9.3.0 h8ab15db_17",
    "libstdcxx-ng 9.3.0 h7a64470_17",
    "ncurses 6.2 h7fd3ca4_4",
    "openssl 1.1.1i hf897c2e_0",
    "pip 20.3.3 pyhd8ed1ab_0",
    "python 3.6.12 h468538b_0_cpython",
    "python_abi 3.6 1_cp36m",
    "readline 8.0 h607064a_2",
    "setuptools 49.6.0 py36h704843e_3",
    "sqlite 3.34.0 h43e6a2a_0",
    "tk 8.6.10 ha99a2a3_1",
    "wheel 0.36.2 pyhd3deb0d_0",
    "xz 5.2.5 h6dd45c4_1",
    "zlib 1.2.11 h516909a_1009"
   ],
   "run": [
    "libgcc-ng >=9.3.0",
    "python >=3.6,<3.7.0a0",
    "python_abi 3.6.* *_cp36m"
   ]
  },
  "source": {
   "fn": "greenlet-0.4.17.tar.gz",
   "sha256": "41d8835c69a78de718e466dd0e6bfd4b46125f21a67c3ff6d76d8d8059868d6b",
   "url": "https://pypi.io/packages/source/g/greenlet/greenlet-0.4.17.tar.gz"
  },
  "test": {
   "imports": [
    "greenlet"
   ]
  }
 },
 "version": "0.4.17"
}