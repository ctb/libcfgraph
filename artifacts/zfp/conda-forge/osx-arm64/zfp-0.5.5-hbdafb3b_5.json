{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.10.0",
  "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
  "dev_url": "https://github.com/LLNL/zfp",
  "doc_url": "http://zfp.readthedocs.io/en/release0.5.5/",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "kmpaul",
    "ToreAad",
    "lindstro",
    "GarrettDMorrison",
    "hmaarrfk"
   ]
  },
  "home": "https://computation.llnl.gov/projects/floating-point-compression",
  "identifiers": [],
  "keywords": [],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "license_file": "LICENSE",
  "root_pkgs": [
   "ca-certificates 2020.12.5 h033912b_0",
   "conda-env 2.6.0 1",
   "git 2.30.2 pl5320hbb84d65_0",
   "c-ares 1.17.1 h0d85af4_1",
   "idna 2.10 pyh9f0ad1d_0",
   "py-lief 0.10.1 py38heedec30_2",
   "jq 1.6 hc929b4f_1000",
   "python 3.8.8 h4e93d89_0_cpython",
   "ncurses 6.2 h2e338ed_4",
   "nbformat 5.1.2 pyhd8ed1ab_1",
   "wheel 0.36.2 pyhd3deb0d_0",
   "anaconda-client 1.7.2 py_0",
   "pycparser 2.20 pyh9f0ad1d_2",
   "soupsieve 2.0.1 py_1",
   "conda-forge-ci-setup 3.9.1 py38he866dac_0",
   "requests 2.25.1 pyhd3deb0d_0",
   "beautifulsoup4 4.9.3 pyhb0f4dca_0",
   "glob2 0.7 py_0",
   "markupsafe 1.1.1 py38h5406a74_3",
   "ruamel_yaml 0.15.80 py38hca655e8_1004",
   "libcxx 11.0.1 habf9029_0",
   "pyyaml 5.4.1 py38h5406a74_0",
   "jsonschema 3.2.0 pyhd8ed1ab_3",
   "psutil 5.8.0 py38h5406a74_1",
   "libcurl 7.76.0 h8ef9fac_0",
   "certifi 2020.12.5 py38h50d1736_1",
   "perl 5.32.0 hbcb3906_0",
   "libedit 3.1.20191231 h0678c8f_2",
   "pip 21.0.1 pyhd8ed1ab_0",
   "conda 4.10.0 py38h50d1736_0",
   "traitlets 5.0.5 py_0",
   "libiconv 1.16 haf1e3a3_0",
   "pysocks 1.7.1 py38h50d1736_3",
   "tk 8.6.10 h0419947_1",
   "xz 5.2.5 haf1e3a3_1",
   "chardet 4.0.0 py38h50d1736_1",
   "conda-build 3.21.4 py38h50d1736_0",
   "python-libarchive-c 2.9 py38h50d1736_2",
   "liblief 0.10.1 hb1e8313_2",
   "zipp 3.4.1 pyhd8ed1ab_0",
   "zlib 1.2.11 h7795811_1010",
   "tqdm 4.57.0 pyhd8ed1ab_0",
   "pcre 8.44 hb1e8313_0",
   "libffi 3.3 h046ec9c_2",
   "libxml2 2.9.10 h802ca4f_3",
   "click 7.1.2 pyh9f0ad1d_0",
   "setuptools 49.6.0 py38h50d1736_3",
   "gettext 0.19.8.1 h7937167_1005",
   "attrs 20.3.0 pyhd3deb0d_0",
   "pyopenssl 20.0.1 pyhd8ed1ab_0",
   "python_abi 3.8 1_cp38",
   "expat 2.2.10 h1c7c35f_0",
   "pkginfo 1.7.0 pyhd8ed1ab_0",
   "openssl 1.1.1k h0d85af4_0",
   "readline 8.0 h0678c8f_2",
   "ripgrep 12.1.1 haf1e3a3_1",
   "cffi 1.14.5 py38ha97d567_0",
   "yaml 0.2.5 haf1e3a3_0",
   "pytz 2021.1 pyhd8ed1ab_0",
   "oniguruma 6.9.3 hc929b4f_0",
   "pycosat 0.6.3 py38h5406a74_1006",
   "libarchive 3.5.1 h0a5793d_1",
   "brotlipy 0.7.0 py38h5406a74_1001",
   "pyrsistent 0.17.3 py38h5406a74_2",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "bzip2 1.0.8 hc929b4f_4",
   "libnghttp2 1.43.0 h07e645a_0",
   "jinja2 2.11.3 pyh44b312d_0",
   "clyent 1.2.2 py_1",
   "curl 7.76.0 h06286d4_0",
   "sqlite 3.34.0 h17101e1_0",
   "importlib-metadata 3.10.0 py38h50d1736_0",
   "libssh2 1.9.0 h52ee1ee_6",
   "conda-package-handling 1.7.2 py38h94c058a_0",
   "urllib3 1.26.3 pyhd8ed1ab_0",
   "lz4-c 1.9.3 h046ec9c_0",
   "cryptography 3.4.4 py38h43df06b_0",
   "ipython_genutils 0.2.0 py_1",
   "krb5 1.17.2 h60d9502_0",
   "lzo 2.10 haf1e3a3_1000",
   "python-dateutil 2.8.1 py_0",
   "jupyter_core 4.7.1 py38h50d1736_0",
   "zstd 1.4.9 h582d3a0_0",
   "six 1.15.0 pyh9f0ad1d_0",
   "libev 4.33 haf1e3a3_1",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "icu 68.1 h74dc148_0"
  ],
  "summary": "Library for compressed numerical arrays that support high throughput read and write random access",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "CONDA_BUILD_SYSROOT": "/Applications/Xcode_12.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.0.sdk",
  "MACOSX_DEPLOYMENT_TARGET": "11.0",
  "build_platform": "osx-64",
  "c_compiler": "clang",
  "c_compiler_version": "11",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "clangxx",
  "cxx_compiler_version": "11",
  "extend_keys": [
   "extend_keys",
   "ignore_version",
   "pin_run_as_build",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "macos_machine": "arm64-apple-darwin20.0.0",
  "numpy": "1.19",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.9.* *_cpython",
  "r_base": "3.5",
  "target_platform": "osx-arm64",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ],
   [
    "python",
    "numpy"
   ]
  ]
 },
 "files": [
  "bin/zfp",
  "include/bitstream.h",
  "include/cfparray1d.h",
  "include/cfparray1f.h",
  "include/cfparray2d.h",
  "include/cfparray2f.h",
  "include/cfparray3d.h",
  "include/cfparray3f.h",
  "include/cfparrays.h",
  "include/zfp.h",
  "include/zfp/cache.h",
  "include/zfp/header.h",
  "include/zfp/headerHelpers.h",
  "include/zfp/iterator1.h",
  "include/zfp/iterator2.h",
  "include/zfp/iterator3.h",
  "include/zfp/macros.h",
  "include/zfp/memory.h",
  "include/zfp/pointer1.h",
  "include/zfp/pointer2.h",
  "include/zfp/pointer3.h",
  "include/zfp/reference1.h",
  "include/zfp/reference2.h",
  "include/zfp/reference3.h",
  "include/zfp/system.h",
  "include/zfp/types.h",
  "include/zfp/view1.h",
  "include/zfp/view2.h",
  "include/zfp/view3.h",
  "include/zfparray.h",
  "include/zfparray1.h",
  "include/zfparray2.h",
  "include/zfparray3.h",
  "include/zfpcodec.h",
  "include/zfpcodecd.h",
  "include/zfpcodecf.h",
  "include/zfpfactory.h",
  "lib/cmake/zfp/cfp-targets-release.cmake",
  "lib/cmake/zfp/cfp-targets.cmake",
  "lib/cmake/zfp/zfp-config-version.cmake",
  "lib/cmake/zfp/zfp-config.cmake",
  "lib/cmake/zfp/zfp-targets-release.cmake",
  "lib/cmake/zfp/zfp-targets.cmake",
  "lib/libcfp.0.5.5.dylib",
  "lib/libcfp.0.dylib",
  "lib/libcfp.dylib",
  "lib/libzfp.0.5.5.dylib",
  "lib/libzfp.0.dylib",
  "lib/libzfp.dylib"
 ],
 "index": {
  "arch": "arm64",
  "build": "hbdafb3b_5",
  "build_number": 5,
  "depends": [
   "libcxx >=11.1.0",
   "llvm-openmp >=11.1.0"
  ],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "name": "zfp",
  "platform": "osx",
  "subdir": "osx-arm64",
  "timestamp": 1617295755693,
  "version": "0.5.5"
 },
 "metadata_version": 1,
 "name": "zfp",
 "raw_recipe": "{% set version = \"0.5.5\" %}\n\n# This package builds 2 outputs\n#    zfp     --- C headers\n#    zfpy    --- Python package\n#\n# The build procedure actually rebuilds zfp when zfpy is being built\n# during the install phase, conda will simply ignore all the files\n# that are being copied related to zfp since they already exist in the prefix\n\npackage:\n  name: zfp\n  version: {{ version }}\n\nsource:\n  url: https://github.com/LLNL/zfp/archive/{{ version }}.tar.gz\n  sha256: 6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4\n  patches:\n    # https://github.com/scikit-build/scikit-build/issues/506\n    - 100-update-cmake.patch\n    # https://github.com/LLNL/zfp/pull/109\n    # This patch just isn't working. we do it manually in the build script\n    # It is a pretty easy fix, so hopefully upstream will accept it soon\n    # - 109-avoid-importing-cpython-array.patch\n\nbuild:\n  number: 5\n  script: source ${RECIPE_DIR}/build_zfp.sh  # [unix]\n  script: {{ RECIPE_DIR }}\\bld_zfp.bat       # [win]\n  run_exports:\n    # No real information, for now, let keep the defaults\n    - {{ pin_subpackage('zfp') }}\n  rpaths:\n    - lib/  # [unix]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - cmake\n    - make     # [unix]\n    - ninja    # [win]\n    - libgomp  # [linux]\n    - llvm-openmp  # [osx]\n\ntest:\n  commands:\n    - test -f $PREFIX/include/zfp.h                # [unix]\n    - test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake  # [unix]\n    - if not exist %LIBRARY_INC%\\zfp.h exit 1      # [win]\n    - test -f $PREFIX/lib/libzfp.so.{{ version }}  # [linux]\n    - test -f $PREFIX/lib/libzfp${SHLIB_EXT}       # [unix]\n    - if not exist %LIBRARY_BIN%\\zfp.dll exit 1    # [win]\n    - if not exist %LIBRARY_LIB%\\zfp.lib exit 1    # [win]\n    - if not exist %LIBRARY_PREFIX%\\lib\\cmake\\zfp\\zfp-config.cmake exit 1  # [win]\n    # Command always returns 1\n    - which zfp  # [unix]\n    - where zfp  # [win]\n\noutputs:\n  - name: zfp\n  - name: zfpy\n    build:\n      script: source ${RECIPE_DIR}/build_zfpy.sh  # [unix]\n      script: {{ RECIPE_DIR }}\\bld_zfpy.bat       # [win]\n    requirements:\n      build:\n        - {{ compiler('c') }}\n        - {{ compiler('cxx') }}\n        - cmake\n        - make     # [unix]\n        - ninja    # [win]\n        - python                                 # [build_platform != target_platform]\n        - cross-python_{{ target_platform }}     # [build_platform != target_platform]\n        - cython                                 # [build_platform != target_platform]\n        - numpy                                  # [build_platform != target_platform]\n      host:\n        - python\n        - numpy\n        - cython\n        - {{ pin_subpackage('zfp', exact=True) }}\n      run:\n        - python\n        - {{ pin_compatible('numpy') }}\n        # I don't think run exports work with pin exact subpackage\n        - {{ pin_subpackage('zfp', exact=True) }}\n    test:\n      imports:\n        - zfpy\n\nabout:\n  home: https://computation.llnl.gov/projects/floating-point-compression\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE\n  summary: 'Library for compressed numerical arrays that support high throughput read and write random access'\n  description: |\n    zfp is an open source C/C++ library for compressed numerical arrays\n    that support high throughput read and write random access. zfp also\n    supports streaming compression of integer and floating-point data,\n    e.g., for applications that read and write large data sets to and\n    from disk. zfp is primarily written in C and C++ but also includes\n    Python and Fortran bindings.\n  doc_url: http://zfp.readthedocs.io/en/release0.5.5/\n  dev_url: https://github.com/LLNL/zfp\n\nextra:\n  recipe-maintainers:\n    - kmpaul\n    - ToreAad\n    - lindstro\n    - GarrettDMorrison\n    - hmaarrfk\n",
 "rendered_recipe": {
  "about": {
   "description": "zfp is an open source C/C++ library for compressed numerical arrays\nthat support high throughput read and write random access. zfp also\nsupports streaming compression of integer and floating-point data,\ne.g., for applications that read and write large data sets to and\nfrom disk. zfp is primarily written in C and C++ but also includes\nPython and Fortran bindings.\n",
   "dev_url": "https://github.com/LLNL/zfp",
   "doc_url": "http://zfp.readthedocs.io/en/release0.5.5/",
   "home": "https://computation.llnl.gov/projects/floating-point-compression",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE",
   "summary": "Library for compressed numerical arrays that support high throughput read and write random access"
  },
  "build": {
   "number": "5",
   "rpaths": [
    "lib/"
   ],
   "run_exports": [
    "zfp >=0.5.5,<1.0a0"
   ],
   "script": "source ${RECIPE_DIR}/build_zfp.sh",
   "string": "hbdafb3b_5"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "GarrettDMorrison",
    "ToreAad",
    "hmaarrfk",
    "kmpaul",
    "lindstro"
   ]
  },
  "package": {
   "name": "zfp",
   "version": "0.5.5"
  },
  "requirements": {
   "build": [
    "bzip2 1.0.8 hc929b4f_4",
    "c-ares 1.17.1 h0d85af4_1",
    "ca-certificates 2020.12.5 h033912b_0",
    "cctools_osx-arm64 949.0.1 h55de48a_20",
    "clang 11.1.0 h694c41f_0",
    "clang-11 11.1.0 default_he082bbe_0",
    "clang_osx-arm64 11.1.0 h40be2b1_0",
    "clangxx 11.1.0 default_he082bbe_0",
    "clangxx_osx-arm64 11.1.0 hc50fe25_0",
    "cmake 3.19.7 h641592c_0",
    "compiler-rt 11.1.0 h654b07c_0",
    "compiler-rt_osx-64 11.1.0 h8c5fa43_0",
    "expat 2.3.0 he49afe7_0",
    "krb5 1.17.2 h60d9502_0",
    "ld64_osx-64 530 he8994da_20",
    "ld64_osx-arm64 530 h3681fde_20",
    "ldid 2.1.2 h7660a38_2",
    "libclang-cpp11.1 11.1.0 default_he082bbe_0",
    "libcurl 7.76.0 h8ef9fac_0",
    "libcxx 11.1.0 habf9029_0",
    "libedit 3.1.20191231 h0678c8f_2",
    "libev 4.33 haf1e3a3_1",
    "libllvm11 11.1.0 hd011deb_0",
    "libnghttp2 1.43.0 h07e645a_0",
    "libssh2 1.9.0 h52ee1ee_6",
    "libuv 1.41.0 hbcf498f_0",
    "llvm-openmp 11.1.0 hda6cdc1_0",
    "llvm-tools 11.1.0 hd011deb_0",
    "lz4-c 1.9.3 h046ec9c_0",
    "make 4.3 h22f3db7_1",
    "ncurses 6.2 h2e338ed_4",
    "openssl 1.1.1k h0d85af4_0",
    "rhash 1.4.1 h35c211d_0",
    "tapi 1100.0.11 h9ce4665_0",
    "tk 8.6.10 h0419947_1",
    "xz 5.2.5 haf1e3a3_1",
    "zlib 1.2.11 h7795811_1010",
    "zstd 1.4.9 h582d3a0_0"
   ],
   "host": [
    "libcxx 11.1.0 h168391b_0",
    "llvm-openmp 11.1.0 hb3022d6_0"
   ],
   "run": [
    "libcxx >=11.1.0",
    "llvm-openmp >=11.1.0"
   ]
  },
  "source": {
   "patches": [
    "100-update-cmake.patch"
   ],
   "sha256": "6a7f4934489087d9c117a4af327fd6495ea757924f4df467b9c537abf8bd86c4",
   "url": "https://github.com/LLNL/zfp/archive/0.5.5.tar.gz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/zfp.h",
    "test -f ${PREFIX}/lib/cmake/zfp/zfp-config.cmake",
    "test -f $PREFIX/lib/libzfp${SHLIB_EXT}",
    "which zfp"
   ]
  }
 },
 "version": "0.5.5"
}