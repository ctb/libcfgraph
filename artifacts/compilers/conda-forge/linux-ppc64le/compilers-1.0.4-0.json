{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.18.9",
  "conda_private": false,
  "conda_version": "4.7.12",
  "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "duncanmmacleod",
    "scopatz",
    "chrisburr"
   ]
  },
  "home": "https://conda-forge.org",
  "identifiers": [],
  "keywords": [],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "license_file": "LICENSE.txt",
  "root_pkgs": [
   "yaml 0.1.7 h14c3975_1001",
   "cryptography 2.7 py37h1905b30_0",
   "wheel 0.33.6 py37_0",
   "icu 64.2 hb209c28_1",
   "zstd 1.4.0 h738b7fd_0",
   "sqlite 3.29.0 hd61ad8c_1",
   "pycparser 2.19 py_0",
   "xz 5.2.4 h14c3975_1001",
   "pytz 2019.2 py_0",
   "readline 8.0 hf8c457e_0",
   "lzo 2.10 h14c3975_1000",
   "pkginfo 1.5.0.1 py_0",
   "soupsieve 1.9.3 py37_0",
   "su-exec 0.2 h14c3975_1001",
   "lz4-c 1.8.3 hb209c28_1001",
   "conda-package-handling 1.6.0 py37h6eb9509_0",
   "attrs 19.1.0 py_0",
   "patch 2.7.6 h14c3975_1001",
   "jinja2 2.10.1 py_0",
   "ca-certificates 2019.9.11 hecc5488_0",
   "beautifulsoup4 4.8.0 py37_0",
   "tini 0.18.0 h14c3975_1001",
   "setuptools 41.2.0 py37_0",
   "ipython_genutils 0.2.0 py_1",
   "cffi 1.12.3 py37hd553616_0",
   "ruamel_yaml 0.15.71 py37h14c3975_1000",
   "idna 2.8 py37_1000",
   "pysocks 1.7.1 py37_0",
   "libffi 3.2.1 hb209c28_1006",
   "libxml2 2.9.9 hc938f6a_5",
   "asn1crypto 0.24.0 py_1",
   "libgcc-ng 8.2.0 h822a55f_1",
   "nbformat 4.4.0 py_1",
   "liblief 0.9.0 h1d591a0_1",
   "pip 19.2.3 py37_0",
   "glob2 0.7 py_0",
   "anaconda-client 1.7.2 py_0",
   "python-libarchive-c 2.8 py37_1004",
   "tk 8.6.9 h151fe60_1003",
   "pcre 8.43 he6710b0_0",
   "python-dateutil 2.8.0 py_0",
   "six 1.12.0 py37_1000",
   "gettext 0.19.8.1 h94c31b8_1002",
   "conda 4.7.12 py37_0",
   "conda-build 3.18.9 py37_5",
   "tqdm 4.36.1 py_0",
   "python 3.7.3 h4f31140_1",
   "traitlets 4.3.2 py37_1000",
   "openssl 1.1.1c h6eb9509_0",
   "libarchive 3.3.3 h7cbd177_1005",
   "pyopenssl 19.0.0 py37_0",
   "expat 2.2.5 hb209c28_1003",
   "libssh2 1.8.2 h47f401e_2",
   "pycosat 0.6.3 py37h14c3975_1001",
   "krb5 1.16.3 hd2bbab6_1001",
   "certifi 2019.9.11 py37_0",
   "ripgrep 11.0.2 h6eb9509_3",
   "urllib3 1.25.6 py37_0",
   "filelock 3.0.10 py_0",
   "ncurses 6.1 hf484d3e_1002",
   "perl 5.26.2 h6eb9509_1006",
   "zlib 1.2.11 h6eb9509_1006",
   "patchelf 0.10 hb209c28_0",
   "psutil 5.6.3 py37h6eb9509_0",
   "git 2.23.0 pl526h8f7e40e_2",
   "decorator 4.4.0 py_0",
   "py-lief 0.9.0 py37hb209c28_1",
   "libcurl 7.65.3 h8f7db48_0",
   "_libgcc_mutex 0.1 main",
   "pyyaml 5.1.2 py37h6eb9509_0",
   "jsonschema 3.0.2 py37_0",
   "jupyter_core 4.4.0 py_0",
   "bzip2 1.0.8 h6eb9509_1",
   "libiconv 1.15 h6eb9509_1005",
   "pyrsistent 0.15.4 py37h6eb9509_0",
   "chardet 3.0.4 py37_1003",
   "curl 7.65.3 h60234ee_0",
   "libedit 3.1.20170329 hf8c457e_1001",
   "clyent 1.2.2 py_1",
   "libstdcxx-ng 8.2.0 h822a55f_1",
   "markupsafe 1.1.1 py37h14c3975_0",
   "requests 2.22.0 py37_1",
   "conda-forge-ci-setup 2.5.2 py37_0",
   "click 7.0 py_0",
   "conda-env 2.6.0 1"
  ],
  "summary": "A metapackage to obtain compilers",
  "tags": []
 },
 "conda_build_config": {
  "c_compiler": "gcc",
  "c_compiler_version": "8",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "8",
  "docker_image": "condaforge/linux-anvil-ppc64le",
  "extend_keys": [
   "ignore_build_only_deps",
   "pin_run_as_build",
   "ignore_version",
   "extend_keys"
  ],
  "fortran_compiler": "gfortran",
  "fortran_compiler_version": "8",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.11",
  "perl": "5.26.0",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.7",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le"
 },
 "files": [],
 "index": {
  "arch": "ppc64le",
  "build": "0",
  "build_number": 0,
  "depends": [
   "binutils-meta 1.0.4 0",
   "c-compiler 1.0.4 h6eb9509_0",
   "cxx-compiler 1.0.4 h1bb5118_0",
   "fortran-compiler 1.0.4 h5fd1ba7_0"
  ],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "name": "compilers",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1569508262448,
  "version": "1.0.4"
 },
 "metadata_version": 1,
 "name": "compilers",
 "raw_recipe": "{% set c_compiler = compiler('c').split('_')[0] %}\n{% set cxx_compiler = compiler('cxx').split('_')[0] %}\n{% set fortran_compiler = compiler('fortran').split('_')[0] %}\n\n{% set commands = {\n  'binutils-meta': {\n    'linux': ['ar', 'as', 'ld', 'nm', 'size', 'strings', 'strip',\n              'addr2line', 'c++filt', 'elfedit', 'gprof', 'ld.bfd',\n              'objcopy', 'objdump', 'ranlib', 'readelf'] +\n              ([] if target_platform == 'linux-ppc64le' else ['dwp', 'ld.gold']),\n    'osx': ['ar', 'as', 'ld', 'nm', 'size', 'strings', 'strip',\n            'checksyms', 'codesign_allocate', 'indr', 'install_name_tool',\n            'libtool', 'lipo', 'nmedit', 'otool', 'pagestuff', 'ranlib',\n            'redo_prebinding', 'seg_addr_table', 'seg_hack', 'segedit'],\n  },\n  'c-compiler': {\n    'gcc': ['cc', 'ct-ng.config', 'cpp', 'gcc', 'gcc-ar', 'gcc-nm',\n              'gcc-ranlib', 'gcov', 'gcov-dump', 'gcov-tool'],\n    'clang': ['clang'],\n    'vs2008': [],\n    'vs2010': [],\n    'vs2015': [],\n  }[c_compiler],\n  'cxx-compiler': {\n    'gxx': ['g++', 'c++'],\n    'clangxx': ['clang++'],\n    'vs2008': [],\n    'vs2010': [],\n    'vs2015': [],\n  }[cxx_compiler],\n  'fortran-compiler': {\n    'gfortran': ['gfortran'],\n  }[fortran_compiler],\n} %}\n\n\npackage:\n  name: compilers\n  version: 1.0.4\n\nbuild:\n   number: 0\n\noutputs:\n  - name: binutils-meta\n    requirements:\n      host:\n        - binutils_{{ target_platform }}  # [linux]\n        - cctools  # [osx]\n        - ld64  # [osx]\n      run:\n        - binutils_{{ target_platform }}  # [linux]\n        - cctools  # [osx]\n        - ld64  # [osx]\n    script: build-symlinks.sh  # [unix]\n    build:\n      skip: True  # [not unix]\n    test:\n      commands:\n        - $LD --help  # [linux]\n{%- for command in commands['binutils-meta']['linux'] %}  # [linux]\n{%- for command in commands['binutils-meta']['osx'] %}  # [osx]\n        - {{ command }} --help > /dev/null  # [linux] Return code for --help is 1 on OSX\n        - echo \"Checking {{ command }} resolves to a path containing ${BUILD}\"  # [unix]\n        - readlink $(which {{ command }}) | grep -q \"${BUILD}\"  # [unix]\n{%- endfor %}  # [linux]\n{%- endfor %}  # [osx]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain binutils\n      description: |\n        This package is a generic way to obtain binutils for your system\n        that conda-forge used to compile its ecosystem.  This compiler is,\n        therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.\n\n  - name: c-compiler\n    requirements:\n      host:\n        - {{ compiler('c') }}\n        # Depend on the other metapackages to prevent making duplicate symlinks\n        - {{ pin_subpackage('binutils-meta', exact=True) }}  # [unix]\n      run:\n        - {{ compiler('c') }}\n        - {{ pin_subpackage('binutils-meta', exact=True) }}  # [unix]\n    script: build-symlinks.sh  # [unix]\n    test:\n      commands:\n        - $CC --help  # [unix]\n{%- for command in commands['c-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n        - echo \"Checking {{ command }} resolves to a path containing ${BUILD}\"  # [unix]\n  {%- if c_compiler == 'gcc' %}  # [unix]\n        - readlink $(which {{ command }}) | grep -q \"${BUILD}\"  # [unix]\n  {%- elif c_compiler == 'clang' %}  # [unix]\n        # The prefixed compilers are a symlink on OSX - check they resolve to the same place\n        - \"[ \\\"$(readlink \\\"$(which {{ command }})\\\")\\\" = \\\"$(readlink \\\"$(which ${BUILD}-{{ command }})\\\")\\\" ]\"  # [unix]\n  {%- endif %}  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain a C compiler\n      description: |\n        This package is a generic way to obtain the C compiler for your system\n        that conda-forge used to compile its ecosystem.  This compiler is,\n        therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('c') instead.\n\n  - name: cxx-compiler\n    requirements:\n      host:\n        - {{ compiler('cxx') }}\n        # Depend on the other metapackages to prevent making duplicate symlinks\n        - {{ pin_subpackage('binutils-meta', exact=True) }}  # [unix]\n        - {{ pin_subpackage('c-compiler', exact=True) }}  # [linux]\n      run:\n        - {{ compiler('cxx') }}\n        - {{ pin_subpackage('binutils-meta', exact=True) }}  # [unix]\n    script: build-symlinks.sh  # [unix]\n    test:\n      commands:\n        - $CXX --help  # [unix]\n{%- for command in commands['cxx-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n        - echo \"Checking {{ command }} resolves to a path containing ${BUILD}\"  # [unix]\n  {%- if cxx_compiler == 'gxx' %}  # [unix]\n        - readlink $(which {{ command }}) | grep -q \"${BUILD}\"  # [unix]\n  {%- elif cxx_compiler == 'clangxx' %}  # [unix]\n        # The prefixed compilers are a symlink on OSX - check they resolve to the same place\n        - \"[ \\\"$(readlink \\\"$(which {{ command }})\\\")\\\" = \\\"$(readlink \\\"$(which ${BUILD}-{{ command }})\\\")\\\" ]\"  # [unix]\n  {%- endif %}  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain a C++ compiler\n      description: |\n        This package is a generic way to obtain the C++ compiler for your system\n        that conda-forge used to compile its ecosystem.  This compiler is,\n        therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('cxx') instead.\n\n  - name: fortran-compiler\n    requirements:\n      host:\n        - {{ compiler('fortran') }}\n        # Depend on the other metapackages to prevent making duplicate symlinks\n        - {{ pin_subpackage('binutils-meta', exact=True) }}  # [unix]\n      run:\n        - {{ compiler('fortran') }}\n        - {{ pin_subpackage('binutils-meta', exact=True) }}  # [unix]\n    script: build-symlinks.sh  # [linux] gfortran is already available on OSX\n    test:\n      commands:\n        - $FC --help  # [unix]\n{%- for command in commands['fortran-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n        - echo \"Checking {{ command }} resolves to a path containing ${BUILD}\"  # [linux]\n        - readlink $(which {{ command }}) | grep -q \"${BUILD}\"  # [linux]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain a Fortran compiler\n      description: |\n        This package is a generic way to obtain the Fortran compiler for your\n        system that conda-forge used to compile its ecosystem.  This compiler\n        is, therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('fortran') instead.\n\n  - name: compilers\n    requirements:\n      run:\n        - {{ pin_subpackage('binutils-meta', exact=True) }}  # [unix]\n        - {{ pin_subpackage('c-compiler', exact=True) }}\n        - {{ pin_subpackage('cxx-compiler', exact=True) }}\n        - {{ pin_subpackage('fortran-compiler', exact=True) }}\n    test:\n      commands:\n        - $CC --help  # [unix]\n        - $CXX --help  # [unix]\n        - $FC --help  # [unix]\n\nabout:\n  home: https://conda-forge.org\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: A metapackage to obtain compilers\n  description: |\n    This package is a generic way to obtain the compilers for your system\n    that conda-forge used to compile its ecosystem. These compilers are,\n    therefore, guaranteed to be ABI compatible with the conda packages\n    you have installed.\n\n    These compiler metapackages are a convenience ONLY for users.\n    Do NOT use these packages as a build or host dependencies in other\n    recipes.  Use the compiler Jinja template function instead.\n    For C++ for example, use compiler('cxx') as usual.\n\nextra:\n  recipe-maintainers:\n    - duncanmmacleod\n    - scopatz\n    - chrisburr\n",
 "rendered_recipe": {
  "about": {
   "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
   "home": "https://conda-forge.org",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE.txt",
   "summary": "A metapackage to obtain compilers"
  },
  "build": {
   "number": "0",
   "string": "0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "chrisburr",
    "duncanmmacleod",
    "scopatz"
   ]
  },
  "package": {
   "name": "compilers",
   "version": "1.0.4"
  },
  "requirements": {
   "run": [
    "binutils-meta 1.0.4 0",
    "c-compiler 1.0.4 h6eb9509_0",
    "cxx-compiler 1.0.4 h1bb5118_0",
    "fortran-compiler 1.0.4 h5fd1ba7_0"
   ]
  }
 },
 "version": "1.0.4"
}