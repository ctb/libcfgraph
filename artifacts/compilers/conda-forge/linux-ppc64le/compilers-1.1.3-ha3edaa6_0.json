{
 "about": {
  "channels": [
   "conda-forge",
   "defaults"
  ],
  "conda_build_version": "3.20.5",
  "conda_private": false,
  "conda_version": "4.9.2",
  "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "duncanmmacleod",
    "scopatz",
    "chrisburr",
    "isuruf"
   ]
  },
  "home": "https://conda-forge.org",
  "identifiers": [],
  "keywords": [],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "license_file": "LICENSE.txt",
  "root_pkgs": [
   "curl 7.71.1 hfd09b2d_8",
   "liblief 0.10.1 ha4af025_2",
   "ruamel_yaml 0.15.80 py38h3750d88_1003",
   "jsonschema 3.2.0 py_2",
   "conda-package-handling 1.7.2 py38h3750d88_0",
   "cffi 1.14.4 py38h0dac770_1",
   "git 2.29.2 pl5320hb310f45_1",
   "yaml 0.2.5 h6eb9509_0",
   "pyrsistent 0.17.3 py38h69e6286_1",
   "glob2 0.7 py_0",
   "perl 5.32.0 h339bb43_0",
   "jinja2 2.11.2 pyh9f0ad1d_0",
   "libcurl 7.71.1 he8386ad_8",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "idna 2.10 pyh9f0ad1d_0",
   "_libgcc_mutex 0.1 conda_forge",
   "importlib-metadata 3.1.1 pyhd8ed1ab_0",
   "pkginfo 1.6.1 pyh9f0ad1d_0",
   "libffi 3.3 hea85c5d_1",
   "libnghttp2 1.41.0 h0eba5ba_2",
   "ncurses 6.2 hea85c5d_4",
   "bzip2 1.0.8 h4e0d66e_4",
   "pytz 2020.4 pyhd8ed1ab_0",
   "zstd 1.4.5 h1dc757f_2",
   "nbformat 5.0.8 py_0",
   "xz 5.2.5 h6eb9509_1",
   "c-ares 1.17.1 h339bb43_0",
   "conda 4.9.2 py38hf8b3453_0",
   "setuptools 49.6.0 py38h88c697e_2",
   "python-libarchive-c 2.9 py38h88c697e_2",
   "readline 8.0 h41a240f_2",
   "libev 4.33 h6eb9509_1",
   "ld_impl_linux-ppc64le 2.35.1 hf6defc1_0",
   "expat 2.2.9 hb209c28_2",
   "patchelf 0.11 hb209c28_0",
   "pcre 8.44 hb209c28_0",
   "sqlite 3.34.0 h961021d_0",
   "libxml2 2.9.10 hfa5d076_2",
   "pyopenssl 20.0.0 pyhd8ed1ab_0",
   "clyent 1.2.2 py_1",
   "lzo 2.10 h6eb9509_1000",
   "urllib3 1.25.11 py_0",
   "libedit 3.1.20191231 h41a240f_2",
   "libstdcxx-ng 9.3.0 h42fc837_17",
   "patch 2.7.6 h6eb9509_1001",
   "libgcc-ng 9.3.0 hb998004_17",
   "six 1.15.0 pyh9f0ad1d_0",
   "icu 67.1 hb209c28_0",
   "su-exec 0.2 h6eb9509_1002",
   "gettext 0.19.8.1 hf23c357_1005",
   "_openmp_mutex 4.5 1_gnu",
   "pyyaml 5.3.1 py38h3750d88_1",
   "pycosat 0.6.3 py38h3750d88_1005",
   "brotlipy 0.7.0 py38h3750d88_1001",
   "jupyter_core 4.7.0 py38hf8b3453_0",
   "attrs 20.3.0 pyhd3deb0d_0",
   "py-lief 0.10.1 py38h7f2f977_2",
   "beautifulsoup4 4.9.3 pyhb0f4dca_0",
   "psutil 5.7.3 py38h3750d88_0",
   "tk 8.6.10 h151fe60_1",
   "soupsieve 2.0.1 py_1",
   "traitlets 5.0.5 py_0",
   "python 3.8.6 h8137939_1_cpython",
   "libgomp 9.3.0 hb998004_17",
   "ca-certificates 2020.11.8 h1084571_0",
   "tini 0.18.0 h14c3975_1001",
   "pycparser 2.20 pyh9f0ad1d_2",
   "markupsafe 1.1.1 py38h3750d88_2",
   "python-dateutil 2.8.1 py_0",
   "conda-build 3.20.5 py38h88c697e_0",
   "cryptography 3.2.1 py38h9e52ca2_0",
   "libarchive 3.5.0 ha27e9a9_0",
   "tqdm 4.54.0 pyhd8ed1ab_0",
   "anaconda-client 1.7.2 py_0",
   "lz4-c 1.9.2 hb209c28_3",
   "krb5 1.17.2 h2004cfc_0",
   "pysocks 1.7.1 py38h88c697e_2",
   "chardet 3.0.4 py38h88c697e_1008",
   "python_abi 3.8 1_cp38",
   "zipp 3.4.0 py_0",
   "importlib_metadata 3.1.1 hd8ed1ab_0",
   "zlib 1.2.11 h6eb9509_1010",
   "ipython_genutils 0.2.0 py_1",
   "requests 2.25.0 pyhd3deb0d_0",
   "ripgrep 12.1.1 h6eb9509_1",
   "wheel 0.36.0 pyhd3deb0d_0",
   "libiconv 1.16 h6eb9509_0",
   "certifi 2020.11.8 py38hf8b3453_0",
   "libssh2 1.9.0 h0e66b82_5",
   "openssl 1.1.1h h6eb9509_0",
   "click 7.1.2 pyh9f0ad1d_0",
   "pip 20.3.1 pyhd8ed1ab_0",
   "conda-forge-ci-setup 3.5.3 py38h6345821_0",
   "jq 1.6 h339bb43_1000",
   "conda-env 2.6.0 1",
   "oniguruma 6.9.3 h339bb43_0",
   "shyaml 0.6.1 py_0"
  ],
  "summary": "A metapackage to obtain compilers",
  "tags": []
 },
 "conda_build_config": {
  "CI": "travis",
  "c_compiler": "gcc",
  "c_compiler_version": "9",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "9",
  "docker_image": "quay.io/condaforge/linux-anvil-ppc64le",
  "extend_keys": [
   "ignore_build_only_deps",
   "ignore_version",
   "pin_run_as_build",
   "extend_keys"
  ],
  "fortran_compiler": "gfortran",
  "fortran_compiler_version": "9",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.11",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.8",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version",
    "fortran_compiler_version"
   ]
  ]
 },
 "files": [],
 "index": {
  "arch": "ppc64le",
  "build": "ha3edaa6_0",
  "build_number": 0,
  "depends": [
   "c-compiler 1.1.3 h4e0d66e_0",
   "cxx-compiler 1.1.3 h2acdbc0_0",
   "fortran-compiler 1.1.3 hf65302f_0"
  ],
  "license": "BSD-3-Clause",
  "license_family": "BSD",
  "name": "compilers",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1607108497644,
  "version": "1.1.3"
 },
 "metadata_version": 1,
 "name": "compilers",
 "raw_recipe": "{% set c_compiler = compiler('c').split('_')[0] %}\n{% set cxx_compiler = compiler('cxx').split('_')[0] %}\n{% set fortran_compiler = compiler('fortran').split('_')[0] %}\n\n{% set commands = {\n  'c-compiler': {\n    'gcc': ['cc', 'cpp', 'gcc', 'gcc-ar', 'gcc-nm',\n              'gcc-ranlib', 'gcov', 'gcov-dump', 'gcov-tool'],\n    'clang': ['clang'],\n    'vs2008': [],\n    'vs2010': [],\n    'vs2015': [],\n  }[c_compiler],\n  'cxx-compiler': {\n    'gxx': ['g++', 'c++'],\n    'clangxx': ['clang++'],\n    'vs2008': [],\n    'vs2010': [],\n    'vs2015': [],\n  }[cxx_compiler],\n  'fortran-compiler': {\n    'gfortran': ['gfortran'],\n  }[fortran_compiler],\n} %}\n\n\npackage:\n  name: compilers\n  version: 1.1.3\n\nbuild:\n   number: 0\n\noutputs:\n  - name: c-compiler\n    requirements:\n      host:\n        - {{ compiler('c') }}\n        # Depend on the other metapackages to prevent making duplicate symlinks\n        - binutils             # [linux]\n        - cctools >=949.0.1    # [osx]\n        - ld64 >=530           # [osx]\n      run:\n        - {{ compiler('c') }}\n        - binutils             # [linux]\n        - cctools >=949.0.1    # [osx]\n        - ld64 >=530           # [osx]\n        - llvm-openmp          # [osx]\n    script: build-symlinks.sh  # [unix]\n    test:\n      commands:\n        - $CC --help  # [unix]\n{%- for command in commands['c-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n        - echo \"Checking {{ command }} resolves to a path containing ${BUILD}\"  # [unix]\n  {%- if c_compiler == 'gcc' %}  # [unix]\n        - readlink $(which {{ command }}) | grep -q \"${BUILD}\"  # [unix]\n  {%- elif c_compiler == 'clang' %}  # [unix]\n        # The prefixed compilers are a symlink on OSX - check they resolve to the same place\n        - \"[ \\\"$(readlink \\\"$(which {{ command }})\\\")\\\" = \\\"$(readlink \\\"$(which ${BUILD}-{{ command }})\\\")\\\" ]\"  # [unix]\n  {%- endif %}  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain a C compiler\n      description: |\n        This package is a generic way to obtain the C compiler for your system\n        that conda-forge used to compile its ecosystem.  This compiler is,\n        therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('c') instead.\n\n  - name: cxx-compiler\n    requirements:\n      host:\n        - {{ compiler('cxx') }}\n        # Depend on the other metapackages to prevent making duplicate symlinks\n        - {{ pin_subpackage('c-compiler', exact=True) }}  # [linux]\n      run:\n        - {{ compiler('cxx') }}\n        - {{ pin_subpackage('c-compiler', exact=True) }}  # [unix]\n    script: build-symlinks.sh  # [unix]\n    test:\n      commands:\n        - $CXX --help  # [unix]\n{%- for command in commands['cxx-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n        - echo \"Checking {{ command }} resolves to a path containing ${BUILD}\"  # [unix]\n  {%- if cxx_compiler == 'gxx' %}  # [unix]\n        - readlink $(which {{ command }}) | grep -q \"${BUILD}\"  # [unix]\n  {%- elif cxx_compiler == 'clangxx' %}  # [unix]\n        # The prefixed compilers are a symlink on OSX - check they resolve to the same place\n        - \"[ \\\"$(readlink \\\"$(which {{ command }})\\\")\\\" = \\\"$(readlink \\\"$(which ${BUILD}-{{ command }})\\\")\\\" ]\"  # [unix]\n  {%- endif %}  # [unix]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain a C++ compiler\n      description: |\n        This package is a generic way to obtain the C++ compiler for your system\n        that conda-forge used to compile its ecosystem.  This compiler is,\n        therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('cxx') instead.\n\n  - name: fortran-compiler\n    requirements:\n      host:\n        - {{ compiler('fortran') }}\n        # Depend on the other metapackages to prevent making duplicate symlinks\n        - binutils             # [linux]\n        - cctools >=949.0.1    # [osx]\n        - ld64 >=530           # [osx]\n      run:\n        - {{ compiler('fortran') }}\n        - binutils             # [linux]\n        - cctools >=949.0.1    # [osx]\n        - ld64 >=530           # [osx]\n        - llvm-openmp          # [osx]\n    script: build-symlinks.sh  # [linux] gfortran is already available on OSX\n    test:\n      commands:\n        - $FC --help  # [unix]\n{%- for command in commands['fortran-compiler'] %}  # [unix]\n        - {{ command }} --help > /dev/null  # [unix]\n        - echo \"Checking {{ command }} resolves to a path containing ${BUILD}\"  # [linux]\n        - readlink $(which {{ command }}) | grep -q \"${BUILD}\"  # [linux]\n{%- endfor %}  # [unix]\n    about:\n      home: https://conda-forge.org\n      license: BSD\n      summary: A metapackage to obtain a Fortran compiler\n      description: |\n        This package is a generic way to obtain the Fortran compiler for your\n        system that conda-forge used to compile its ecosystem.  This compiler\n        is, therefore, guaranteed to be ABI compatible with the conda packages\n        you have installed.\n\n        This compiler metapackage is a convenience ONLY for users.\n        Do NOT use this package as a build or host dependency in other\n        recipes.  Use the Jinja template function compiler('fortran') instead.\n\n  - name: compilers\n    requirements:\n      run:\n        - {{ pin_subpackage('c-compiler', exact=True) }}\n        - {{ pin_subpackage('cxx-compiler', exact=True) }}\n        - {{ pin_subpackage('fortran-compiler', exact=True) }}\n    test:\n      commands:\n        - $CC --help  # [unix]\n        - $CXX --help  # [unix]\n        - $FC --help  # [unix]\n\nabout:\n  home: https://conda-forge.org\n  license: BSD-3-Clause\n  license_family: BSD\n  license_file: LICENSE.txt\n  summary: A metapackage to obtain compilers\n  description: |\n    This package is a generic way to obtain the compilers for your system\n    that conda-forge used to compile its ecosystem. These compilers are,\n    therefore, guaranteed to be ABI compatible with the conda packages\n    you have installed.\n\n    These compiler metapackages are a convenience ONLY for users.\n    Do NOT use these packages as a build or host dependencies in other\n    recipes.  Use the compiler Jinja template function instead.\n    For C++ for example, use compiler('cxx') as usual.\n\nextra:\n  recipe-maintainers:\n    - duncanmmacleod\n    - scopatz\n    - chrisburr\n    - isuruf\n",
 "rendered_recipe": {
  "about": {
   "description": "This package is a generic way to obtain the compilers for your system\nthat conda-forge used to compile its ecosystem. These compilers are,\ntherefore, guaranteed to be ABI compatible with the conda packages\nyou have installed.\n\nThese compiler metapackages are a convenience ONLY for users.\nDo NOT use these packages as a build or host dependencies in other\nrecipes.  Use the compiler Jinja template function instead.\nFor C++ for example, use compiler('cxx') as usual.\n",
   "home": "https://conda-forge.org",
   "license": "BSD-3-Clause",
   "license_family": "BSD",
   "license_file": "LICENSE.txt",
   "summary": "A metapackage to obtain compilers"
  },
  "build": {
   "number": "0",
   "string": "ha3edaa6_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "chrisburr",
    "duncanmmacleod",
    "isuruf",
    "scopatz"
   ]
  },
  "package": {
   "name": "compilers",
   "version": "1.1.3"
  },
  "requirements": {
   "build": [],
   "run": [
    "c-compiler 1.1.3 h4e0d66e_0",
    "cxx-compiler 1.1.3 h2acdbc0_0",
    "fortran-compiler 1.1.3 hf65302f_0"
   ]
  }
 },
 "version": "1.1.3"
}