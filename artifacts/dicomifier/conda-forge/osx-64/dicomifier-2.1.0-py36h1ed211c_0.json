{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge",
   "https://repo.anaconda.com/pkgs/main"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.10.0",
  "description": "Dicomifier is a set of tools to convert Bruker data to DICOM files, and\nDICOM files to NIfTI. It retains meta-data (e.g. MR parameters such as echo\ntime or subject parameters such as weight or height) throughout the\nconversion process, storing them in JSON format, allowing easy access in\nmultiple environments. The meta-data from Bruker is aligned on the DICOM\ndictionary for unified human and animal processing pipelines.\n",
  "dev_url": "https://github.com/lamyj/dicomifier",
  "doc_url": "https://github.com/lamyj/dicomifier",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "lamyj"
   ]
  },
  "home": "https://github.com/lamyj/dicomifier",
  "identifiers": [],
  "keywords": [],
  "license": "CECILL-B",
  "license_family": "OTHER",
  "license_file": "LICENSE.txt",
  "root_pkgs": [
   "tqdm 4.59.0 pyhd8ed1ab_0",
   "nbformat 5.1.3 pyhd8ed1ab_0",
   "ca-certificates 2020.12.5 h033912b_0",
   "conda-env 2.6.0 1",
   "c-ares 1.17.1 h0d85af4_1",
   "idna 2.10 pyh9f0ad1d_0",
   "py-lief 0.10.1 py38heedec30_2",
   "jq 1.6 hc929b4f_1000",
   "python 3.8.8 h4e93d89_0_cpython",
   "ncurses 6.2 h2e338ed_4",
   "sqlite 3.35.3 h44b9ce1_0",
   "wheel 0.36.2 pyhd3deb0d_0",
   "anaconda-client 1.7.2 py_0",
   "pycparser 2.20 pyh9f0ad1d_2",
   "soupsieve 2.0.1 py_1",
   "requests 2.25.1 pyhd3deb0d_0",
   "beautifulsoup4 4.9.3 pyhb0f4dca_0",
   "glob2 0.7 py_0",
   "markupsafe 1.1.1 py38h5406a74_3",
   "ruamel_yaml 0.15.80 py38hca655e8_1004",
   "conda-forge-ci-setup 3.9.2 py38he866dac_0",
   "pyyaml 5.4.1 py38h5406a74_0",
   "jsonschema 3.2.0 pyhd8ed1ab_3",
   "psutil 5.8.0 py38h5406a74_1",
   "libcurl 7.76.0 h8ef9fac_0",
   "certifi 2020.12.5 py38h50d1736_1",
   "perl 5.32.0 hbcb3906_0",
   "libedit 3.1.20191231 h0678c8f_2",
   "pip 21.0.1 pyhd8ed1ab_0",
   "traitlets 5.0.5 py_0",
   "libiconv 1.16 haf1e3a3_0",
   "pysocks 1.7.1 py38h50d1736_3",
   "tk 8.6.10 h0419947_1",
   "xz 5.2.5 haf1e3a3_1",
   "chardet 4.0.0 py38h50d1736_1",
   "conda-build 3.21.4 py38h50d1736_0",
   "python-libarchive-c 2.9 py38h50d1736_2",
   "liblief 0.10.1 hb1e8313_2",
   "zipp 3.4.1 pyhd8ed1ab_0",
   "zlib 1.2.11 h7795811_1010",
   "pcre 8.44 hb1e8313_0",
   "libffi 3.3 h046ec9c_2",
   "libxml2 2.9.10 h802ca4f_3",
   "cryptography 3.4.7 py38h1fa4640_0",
   "git 2.30.2 pl5320h2551975_1",
   "click 7.1.2 pyh9f0ad1d_0",
   "libcxx 11.1.0 habf9029_0",
   "setuptools 49.6.0 py38h50d1736_3",
   "conda 4.10.0 py38h50d1736_1",
   "gettext 0.19.8.1 h7937167_1005",
   "attrs 20.3.0 pyhd3deb0d_0",
   "pyopenssl 20.0.1 pyhd8ed1ab_0",
   "python_abi 3.8 1_cp38",
   "urllib3 1.26.4 pyhd8ed1ab_0",
   "pkginfo 1.7.0 pyhd8ed1ab_0",
   "openssl 1.1.1k h0d85af4_0",
   "ripgrep 12.1.1 haf1e3a3_1",
   "cffi 1.14.5 py38ha97d567_0",
   "yaml 0.2.5 haf1e3a3_0",
   "pytz 2021.1 pyhd8ed1ab_0",
   "oniguruma 6.9.3 hc929b4f_0",
   "readline 8.1 h05e3726_0",
   "pycosat 0.6.3 py38h5406a74_1006",
   "libarchive 3.5.1 h0a5793d_1",
   "brotlipy 0.7.0 py38h5406a74_1001",
   "pyrsistent 0.17.3 py38h5406a74_2",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "bzip2 1.0.8 hc929b4f_4",
   "libnghttp2 1.43.0 h07e645a_0",
   "jinja2 2.11.3 pyh44b312d_0",
   "clyent 1.2.2 py_1",
   "curl 7.76.0 h06286d4_0",
   "importlib-metadata 3.10.0 py38h50d1736_0",
   "expat 2.3.0 he49afe7_0",
   "libssh2 1.9.0 h52ee1ee_6",
   "conda-package-handling 1.7.2 py38h94c058a_0",
   "lz4-c 1.9.3 h046ec9c_0",
   "ipython_genutils 0.2.0 py_1",
   "krb5 1.17.2 h60d9502_0",
   "lzo 2.10 haf1e3a3_1000",
   "python-dateutil 2.8.1 py_0",
   "jupyter_core 4.7.1 py38h50d1736_0",
   "zstd 1.4.9 h582d3a0_0",
   "six 1.15.0 pyh9f0ad1d_0",
   "libev 4.33 haf1e3a3_1",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "icu 68.1 h74dc148_0"
  ],
  "summary": "Convert data from Bruker to DICOM and from DICOM to NIfTI",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "CONDA_BUILD_SYSROOT": "/Applications/Xcode_12.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk",
  "MACOSX_DEPLOYMENT_TARGET": "10.9",
  "boost_cpp": "1.74.0",
  "c_compiler": "clang",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cxx_compiler": "clangxx",
  "cxx_compiler_version": "11",
  "extend_keys": [
   "extend_keys",
   "ignore_build_only_deps",
   "ignore_version",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "macos_machine": "x86_64-apple-darwin13.4.0",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "boost-cpp": {
    "max_pin": "x.x.x"
   },
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.6.* *_cpython",
  "r_base": "3.5",
  "target_platform": "osx-64"
 },
 "files": [
  "bin/bruker2dicom",
  "bin/dicom2nifti",
  "bin/dicomifier",
  "include/dicomifier/Dataset.h",
  "include/dicomifier/Exception.h",
  "include/dicomifier/Field.h",
  "include/dicomifier/grammar.h",
  "include/dicomifier/grammar.txx",
  "lib/libdicomifier.2.1.0.dylib",
  "lib/libdicomifier.2.dylib",
  "lib/libdicomifier.dylib",
  "lib/python3.6/site-packages/dicomifier/__init__.py",
  "lib/python3.6/site-packages/dicomifier/__main__.py",
  "lib/python3.6/site-packages/dicomifier/_dicomifier.so",
  "lib/python3.6/site-packages/dicomifier/bruker.so",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/__init__.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/convert.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/frame_index_generator.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/io/__init__.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/io/flat_dicom_writer.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/io/nested_dicom_writer.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/iods/__init__.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/iods/enhanced_mr_image_storage.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/iods/mr_image_storage.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/modules/__init__.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/modules/equipment.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/modules/frame_of_reference.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/modules/image.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/modules/mr.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/modules/patient.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/modules/series.py",
  "lib/python3.6/site-packages/dicomifier/bruker_to_dicom/modules/study.py",
  "lib/python3.6/site-packages/dicomifier/commands/__init__.py",
  "lib/python3.6/site-packages/dicomifier/commands/diffusion_scheme.py",
  "lib/python3.6/site-packages/dicomifier/commands/list.py",
  "lib/python3.6/site-packages/dicomifier/commands/search.py",
  "lib/python3.6/site-packages/dicomifier/commands/to_dicom.py",
  "lib/python3.6/site-packages/dicomifier/commands/to_nifti.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/__init__.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/convert.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/image.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/io.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/meta_data.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/series/__init__.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/series/default_series_finder.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/series/series_finder.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/series/siemens_xa_classic_2d_series_finder.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/siemens.py",
  "lib/python3.6/site-packages/dicomifier/dicom_to_nifti/stacks.py",
  "lib/python3.6/site-packages/dicomifier/meta_data.py",
  "lib/python3.6/site-packages/dicomifier/nifti/__init__.py",
  "lib/python3.6/site-packages/dicomifier/nifti/diffusion.py"
 ],
 "index": {
  "arch": "x86_64",
  "build": "py36h1ed211c_0",
  "build_number": 0,
  "depends": [
   "boost-cpp >=1.74.0,<1.74.1.0a0",
   "libcxx >=11.1.0",
   "nibabel",
   "numpy",
   "odil >=0.12",
   "python >=3.6,<3.7.0a0",
   "python-dateutil",
   "python_abi 3.6.* *_cp36m"
  ],
  "license": "CECILL-B",
  "license_family": "OTHER",
  "name": "dicomifier",
  "platform": "osx",
  "subdir": "osx-64",
  "timestamp": 1617452215601,
  "version": "2.1.0"
 },
 "metadata_version": 1,
 "name": "dicomifier",
 "raw_recipe": "{% set name = \"dicomifier\" %}\n{% set version = \"2.1.0\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/lamyj/{{ name }}/archive/v{{ version }}.tar.gz\n  sha256: f390a6c4b852e98e96965c1e069306172da8be42643ecaf709bb874ae03d75ac\n  patches: []\n\nbuild:\n  number: 0\n  skip: true  # [py<=35 or win]\n\nrequirements:\n  build:\n    - {{ compiler('cxx') }}\n    - cmake\n    - ninja\n  host:\n    - boost-cpp\n    - odil >=0.12\n    - pybind11\n    - python\n  run:\n    - boost-cpp\n    - nibabel\n    - numpy\n    - odil >=0.12\n    - python\n    - python-dateutil\n\ntest:\n  imports:\n    - dicomifier\n  commands:\n    - bruker2dicom --help > /dev/null\n    - dicom2nifti --help > /dev/null\n\nabout:\n  home: https://github.com/lamyj/dicomifier\n  license: CECILL-B\n  license_family: OTHER\n  license_file: LICENSE.txt\n  summary: Convert data from Bruker to DICOM and from DICOM to NIfTI\n\n  description: |\n    Dicomifier is a set of tools to convert Bruker data to DICOM files, and \n    DICOM files to NIfTI. It retains meta-data (e.g. MR parameters such as echo \n    time or subject parameters such as weight or height) throughout the \n    conversion process, storing them in JSON format, allowing easy access in \n    multiple environments. The meta-data from Bruker is aligned on the DICOM \n    dictionary for unified human and animal processing pipelines.\n\n  doc_url: https://github.com/lamyj/dicomifier\n  dev_url: https://github.com/lamyj/dicomifier\n\nextra:\n  recipe-maintainers:\n    - lamyj\n",
 "rendered_recipe": {
  "about": {
   "description": "Dicomifier is a set of tools to convert Bruker data to DICOM files, and\nDICOM files to NIfTI. It retains meta-data (e.g. MR parameters such as echo\ntime or subject parameters such as weight or height) throughout the\nconversion process, storing them in JSON format, allowing easy access in\nmultiple environments. The meta-data from Bruker is aligned on the DICOM\ndictionary for unified human and animal processing pipelines.\n",
   "dev_url": "https://github.com/lamyj/dicomifier",
   "doc_url": "https://github.com/lamyj/dicomifier",
   "home": "https://github.com/lamyj/dicomifier",
   "license": "CECILL-B",
   "license_family": "OTHER",
   "license_file": "LICENSE.txt",
   "summary": "Convert data from Bruker to DICOM and from DICOM to NIfTI"
  },
  "build": {
   "number": "0",
   "string": "py36h1ed211c_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "lamyj"
   ]
  },
  "package": {
   "name": "dicomifier",
   "version": "2.1.0"
  },
  "requirements": {
   "build": [
    "bzip2 1.0.8 hc929b4f_4",
    "c-ares 1.17.1 h0d85af4_1",
    "ca-certificates 2020.12.5 h033912b_0",
    "cctools_osx-64 949.0.1 h6407bdd_20",
    "clang 11.1.0 h694c41f_0",
    "clang-11 11.1.0 default_he082bbe_0",
    "clang_osx-64 11.1.0 hb91bd55_0",
    "clangxx 11.1.0 default_he082bbe_0",
    "clangxx_osx-64 11.1.0 h7e1b574_0",
    "cmake 3.19.7 h641592c_0",
    "compiler-rt 11.1.0 h654b07c_0",
    "compiler-rt_osx-64 11.1.0 h8c5fa43_0",
    "expat 2.3.0 he49afe7_0",
    "krb5 1.17.2 h60d9502_0",
    "ld64_osx-64 530 he8994da_20",
    "ldid 2.1.2 h7660a38_2",
    "libclang-cpp11.1 11.1.0 default_he082bbe_0",
    "libcurl 7.76.0 h8ef9fac_0",
    "libcxx 11.1.0 habf9029_0",
    "libedit 3.1.20191231 h0678c8f_2",
    "libev 4.33 haf1e3a3_1",
    "libllvm11 11.1.0 hd011deb_1",
    "libnghttp2 1.43.0 h07e645a_0",
    "libssh2 1.9.0 h52ee1ee_6",
    "libuv 1.41.0 hbcf498f_0",
    "llvm-tools 11.1.0 hd011deb_1",
    "lz4-c 1.9.3 h046ec9c_0",
    "ncurses 6.2 h2e338ed_4",
    "ninja 1.10.2 h9a9d8cb_0",
    "openssl 1.1.1k h0d85af4_0",
    "rhash 1.4.1 h35c211d_0",
    "tapi 1100.0.11 h9ce4665_0",
    "tk 8.6.10 h0419947_1",
    "xz 5.2.5 haf1e3a3_1",
    "zlib 1.2.11 h7795811_1010",
    "zstd 1.4.9 h582d3a0_0"
   ],
   "host": [
    "boost-cpp 1.74.0 h43a636a_2",
    "bzip2 1.0.8 hc929b4f_4",
    "ca-certificates 2020.12.5 h033912b_0",
    "icu 68.1 h74dc148_0",
    "jsoncpp 1.9.4 h926bf3e_1",
    "libcxx 11.1.0 habf9029_0",
    "libffi 3.3 h046ec9c_2",
    "lz4-c 1.9.3 h046ec9c_0",
    "ncurses 6.2 h2e338ed_4",
    "odil 0.12.1 py36h582ddae_2",
    "openssl 1.1.1k h0d85af4_0",
    "pybind11 2.6.2 py36h615c93b_0",
    "pybind11-global 2.6.2 py36h615c93b_0",
    "python 3.6.13 h7728216_0_cpython",
    "python_abi 3.6 1_cp36m",
    "readline 8.1 h05e3726_0",
    "sqlite 3.35.3 h44b9ce1_0",
    "tk 8.6.10 h0419947_1",
    "xz 5.2.5 haf1e3a3_1",
    "zlib 1.2.11 h7795811_1010",
    "zstd 1.4.9 h582d3a0_0"
   ],
   "run": [
    "boost-cpp >=1.74.0,<1.74.1.0a0",
    "libcxx >=11.1.0",
    "nibabel",
    "numpy",
    "odil >=0.12",
    "python >=3.6,<3.7.0a0",
    "python-dateutil",
    "python_abi 3.6.* *_cp36m"
   ]
  },
  "source": {
   "patches": [],
   "sha256": "f390a6c4b852e98e96965c1e069306172da8be42643ecaf709bb874ae03d75ac",
   "url": "https://github.com/lamyj/dicomifier/archive/v2.1.0.tar.gz"
  },
  "test": {
   "commands": [
    "bruker2dicom --help > /dev/null",
    "dicom2nifti --help > /dev/null"
   ],
   "imports": [
    "dicomifier"
   ]
  }
 },
 "version": "2.1.0"
}