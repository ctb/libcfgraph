{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge",
   "https://repo.anaconda.com/pkgs/main"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.9.2",
  "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
  "dev_url": "https://github.com/openmm/openmm-torch",
  "doc_url": "https://github.com/openmm/openmm-torch",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jaimergp",
    "peastman"
   ]
  },
  "home": "https://github.com/openmm/openmm-torch",
  "identifiers": [],
  "keywords": [],
  "license": "MIT",
  "license_family": "MIT",
  "license_file": "README.md",
  "root_pkgs": [
   "python-libarchive-c 2.9 py38h578d9bd_2",
   "lzo 2.10 h516909a_1000",
   "zstd 1.4.8 ha95c52a_1",
   "importlib_metadata 3.4.0 hd8ed1ab_0",
   "wheel 0.36.2 pyhd3deb0d_0",
   "libgomp 9.3.0 h5dbcf3e_17",
   "brotlipy 0.7.0 py38h497a2fe_1001",
   "tini 0.18.0 h14c3975_1001",
   "libev 4.33 h516909a_1",
   "libcurl 7.71.1 hcdd3856_8",
   "jsonschema 3.2.0 py_2",
   "pyopenssl 20.0.1 pyhd8ed1ab_0",
   "patchelf 0.11 he1b5a44_0",
   "sqlite 3.34.0 h74cdb3f_0",
   "ca-certificates 2020.12.5 ha878542_0",
   "ripgrep 12.1.1 h516909a_1",
   "python_abi 3.8 1_cp38",
   "libiconv 1.16 h516909a_0",
   "_openmp_mutex 4.5 1_gnu",
   "glob2 0.7 py_0",
   "beautifulsoup4 4.9.3 pyhb0f4dca_0",
   "certifi 2020.12.5 py38h578d9bd_1",
   "git 2.30.0 pl5320h014a29a_0",
   "c-ares 1.17.1 h36c2ea0_0",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "zipp 3.4.0 py_0",
   "liblief 0.10.1 he1b5a44_2",
   "krb5 1.17.2 h926e7f8_0",
   "zlib 1.2.11 h516909a_1010",
   "pyrsistent 0.17.3 py38h497a2fe_2",
   "tk 8.6.10 h21135ba_1",
   "idna 2.10 pyh9f0ad1d_0",
   "pytz 2020.5 pyhd8ed1ab_0",
   "jinja2 2.11.2 pyh9f0ad1d_0",
   "py-lief 0.10.1 py38h348cfbe_2",
   "cryptography 3.3.1 py38h2b97feb_1",
   "importlib-metadata 3.4.0 py38h578d9bd_0",
   "xz 5.2.5 h516909a_1",
   "pcre 8.44 he1b5a44_0",
   "ld_impl_linux-64 2.35.1 hea4e1c9_1",
   "expat 2.2.9 he1b5a44_2",
   "ruamel_yaml 0.15.80 py38h497a2fe_1003",
   "ncurses 6.2 h58526e2_4",
   "conda-package-handling 1.7.2 py38h8df0ef7_0",
   "tqdm 4.56.0 pyhd8ed1ab_0",
   "urllib3 1.26.2 pyhd8ed1ab_0",
   "perl 5.32.0 h36c2ea0_0",
   "gettext 0.19.8.1 h0b5b191_1005",
   "_libgcc_mutex 0.1 conda_forge",
   "libffi 3.3 h58526e2_2",
   "conda 4.9.2 py38h578d9bd_0",
   "bzip2 1.0.8 h7f98852_4",
   "python-dateutil 2.8.1 py_0",
   "attrs 20.3.0 pyhd3deb0d_0",
   "libssh2 1.9.0 hab1572f_5",
   "icu 68.1 h58526e2_0",
   "requests 2.25.1 pyhd3deb0d_0",
   "traitlets 5.0.5 py_0",
   "readline 8.0 he28a2e2_2",
   "markupsafe 1.1.1 py38h497a2fe_3",
   "pycosat 0.6.3 py38h497a2fe_1006",
   "libgcc-ng 9.3.0 h5dbcf3e_17",
   "anaconda-client 1.7.2 py_0",
   "pkginfo 1.6.1 pyh9f0ad1d_0",
   "libxml2 2.9.10 h72842e0_3",
   "pycparser 2.20 pyh9f0ad1d_2",
   "libstdcxx-ng 9.3.0 h2ae2ef3_17",
   "python 3.8.6 hffdb5ce_4_cpython",
   "psutil 5.8.0 py38h497a2fe_1",
   "setuptools 49.6.0 py38h578d9bd_3",
   "libedit 3.1.20191231 he28a2e2_2",
   "six 1.15.0 pyh9f0ad1d_0",
   "libarchive 3.5.1 h3f442fb_1",
   "soupsieve 2.0.1 py_1",
   "yaml 0.2.5 h516909a_0",
   "clyent 1.2.2 py_1",
   "chardet 4.0.0 py38h578d9bd_1",
   "su-exec 0.2 h516909a_1002",
   "libnghttp2 1.41.0 h8cfc5f6_2",
   "nbformat 5.0.8 py_0",
   "pip 20.3.3 pyhd8ed1ab_0",
   "patch 2.7.6 h516909a_1001",
   "jupyter_core 4.7.0 py38h578d9bd_0",
   "cffi 1.14.4 py38ha65f79e_1",
   "pysocks 1.7.1 py38h578d9bd_3",
   "openssl 1.1.1i h7f98852_0",
   "ipython_genutils 0.2.0 py_1",
   "curl 7.71.1 he644dc0_8",
   "lz4-c 1.9.3 h9c3ff4c_0",
   "pyyaml 5.3.1 py38h497a2fe_2",
   "oniguruma 6.9.3 h36c2ea0_0",
   "conda-build 3.21.4 py38h578d9bd_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "conda-forge-ci-setup 3.7.0 py38h7bc8238_0",
   "jq 1.6 h36c2ea0_1000",
   "click 7.1.2 pyh9f0ad1d_0",
   "conda-env 2.6.0 1"
  ],
  "summary": "OpenMM plugin to define forces with neural networks",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "9",
  "cdt_name": "cos6",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "10.2",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "9",
  "docker_image": "quay.io/condaforge/linux-anvil-cuda:10.2",
  "extend_keys": [
   "ignore_version",
   "pin_run_as_build",
   "extend_keys",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.7.* *_cpython",
  "r_base": "3.5",
  "target_platform": "linux-64",
  "zip_keys": [
   [
    "cuda_compiler_version",
    "cdt_name",
    "docker_image"
   ],
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ]
  ]
 },
 "files": [
  "include/TorchForce.h",
  "include/TorchKernels.h",
  "include/internal/TorchForceImpl.h",
  "include/internal/windowsExportTorch.h",
  "lib/libOpenMMTorch.so",
  "lib/plugins/libOpenMMTorchCUDA.so",
  "lib/plugins/libOpenMMTorchOpenCL.so",
  "lib/plugins/libOpenMMTorchReference.so",
  "lib/python3.7/site-packages/_openmmtorch.cpython-37m-x86_64-linux-gnu.so",
  "lib/python3.7/site-packages/openmmtorch-1.0-py3.7.egg-info",
  "lib/python3.7/site-packages/openmmtorch.py",
  "share/openmm-torch/tests/TestCudaTorchForce",
  "share/openmm-torch/tests/TestOpenCLTorchForce",
  "share/openmm-torch/tests/TestReferenceTorchForce",
  "share/openmm-torch/tests/TestSerializeTorchForce",
  "share/openmm-torch/tests/tests/central.pt",
  "share/openmm-torch/tests/tests/periodic.pt"
 ],
 "index": {
  "arch": "x86_64",
  "build": "py37hdeed055_1",
  "build_number": 1,
  "depends": [
   "cudatoolkit 10.2|10.2.*",
   "libgcc-ng >=9.3.0",
   "libstdcxx-ng >=9.3.0",
   "ocl-icd >=2.2.14,<3.0a0",
   "ocl-icd-system",
   "openmm >=7.5,<7.6.0a0",
   "python >=3.7,<3.8.0a0",
   "python_abi 3.7.* *_cp37m",
   "pytorch",
   "pytorch-gpu >=1.7.1,<2.0a0"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "openmm-torch",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1610988127480,
  "version": "0.1"
 },
 "metadata_version": 1,
 "name": "openmm-torch",
 "raw_recipe": "{% set name = \"openmm-torch\" %}\n{% set version = \"0.1\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  url: https://github.com/openmm/openmm-torch/archive/v{{ version }}.tar.gz\n  sha256: 6ff3c2d903729eb9145c02e694fe943c52cf9263736f9db26bb84511fbb2d71d\n\nbuild:\n  number: 1\n  skip: true  # [win or (linux and cuda_compiler_version in (undefined, 'None'))]\n  rpaths:\n    - lib/\n    - {{ SP_DIR }}/torch/lib\n  missing_dso_whitelist:\n    - \"*/libcuda.*\"  # [linux64 or ppc64le]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - cmake\n    - make\n  host:\n    - python\n    - pip\n    - swig\n    - openmm\n    - pytorch-gpu  # [cuda_compiler_version not in (undefined, 'None')]\n    - pytorch-cpu  # [osx]\n    - ocl-icd  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n  run:\n    - python\n    - pytorch\n    # ^ needed so conda build does not complain about overlinking\n    - {{ pin_compatible('pytorch-gpu') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ pin_compatible('pytorch-cpu') }}  # [osx]\n    - {{ pin_compatible('openmm',  min_pin='x.x', max_pin='x.x') }}\n    - ocl-icd  # [linux]\n    - ocl-icd-system  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    - ocl_icd_wrapper_apple      # [osx]\n\ntest:\n  imports:\n    - openmmtorch\n  commands: |\n    cd ${CONDA_PREFIX}/share/{{ name }}/tests\n    set +e\n    summary=\"\"\n    exitcode=0\n    for f in Test*; do\n      if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n        continue\n      fi\n      echo \"Running $f...\"\n      ./${f}\n      thisexitcode=$?\n      summary+=\"\\n${f}: \"\n      if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n      ((exitcode+=$thisexitcode))\n    done\n    echo \"-------\"\n    echo \"Summary\"\n    echo \"-------\"\n    echo -e \"${summary}\"\n    exit $exitcode\n\nabout:\n  home: https://github.com/openmm/openmm-torch\n  license: MIT\n  license_family: MIT\n  license_file: README.md\n  summary: 'OpenMM plugin to define forces with neural networks'\n  description: |\n    This is a plugin for OpenMM that allows neural networks to be\n    used for defining forces. It is implemented with PyTorch.\n    To use it, you create a PyTorch model that takes particle\n    positions as input and produces energy as output. This plugin\n    uses the model to apply forces to particles during a simulation.\n  doc_url: https://github.com/openmm/openmm-torch\n  dev_url: https://github.com/openmm/openmm-torch\n\nextra:\n  recipe-maintainers:\n    - jaimergp\n    - peastman\n",
 "rendered_recipe": {
  "about": {
   "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
   "dev_url": "https://github.com/openmm/openmm-torch",
   "doc_url": "https://github.com/openmm/openmm-torch",
   "home": "https://github.com/openmm/openmm-torch",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "README.md",
   "summary": "OpenMM plugin to define forces with neural networks"
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*"
   ],
   "number": "1",
   "rpaths": [
    "/home/conda/feedstock_root/build_artifacts/openmm-torch_1610987465997/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehol/lib/python3.7/site-packages/torch/lib",
    "lib/"
   ],
   "string": "py37hdeed055_1"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm-torch",
   "version": "0.1"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "binutils_impl_linux-64 2.35.1 h193b22a_1",
    "binutils_linux-64 2.35 hc3fd857_29",
    "bzip2 1.0.8 h7f98852_4",
    "c-ares 1.17.1 h36c2ea0_0",
    "ca-certificates 2020.12.5 ha878542_0",
    "cmake 3.19.3 h4547794_0",
    "expat 2.2.9 he1b5a44_2",
    "gcc_impl_linux-64 9.3.0 h70c0ae5_18",
    "gcc_linux-64 9.3.0 h7247604_29",
    "gxx_impl_linux-64 9.3.0 hd87eabc_18",
    "gxx_linux-64 9.3.0 h0d07fa4_29",
    "kernel-headers_linux-64 2.6.32 h77966d4_13",
    "krb5 1.17.2 h926e7f8_0",
    "ld_impl_linux-64 2.35.1 hea4e1c9_1",
    "libcurl 7.71.1 hcdd3856_8",
    "libdrm-cos6-x86_64 2.4.65 h9d98e8f_1104",
    "libedit 3.1.20191231 he28a2e2_2",
    "libev 4.33 h516909a_1",
    "libgcc-devel_linux-64 9.3.0 h7864c58_18",
    "libgcc-ng 9.3.0 h2828fa1_18",
    "libgomp 9.3.0 h2828fa1_18",
    "libnghttp2 1.41.0 h8cfc5f6_2",
    "libssh2 1.9.0 hab1572f_5",
    "libstdcxx-devel_linux-64 9.3.0 hb016644_18",
    "libstdcxx-ng 9.3.0 h6de172a_18",
    "libuv 1.40.0 h7f98852_0",
    "libx11-common-cos6-x86_64 1.6.4 h9d98e8f_1104",
    "libx11-cos6-x86_64 1.6.4 h9d98e8f_1104",
    "make 4.3 hd18ef5c_1",
    "mesa-dri-drivers-cos6-x86_64 11.0.7 h9d98e8f_1104",
    "mesa-dri1-drivers-cos6-x86_64 7.11 h9d98e8f_1104",
    "mesa-libgl-cos6-x86_64 11.0.7 h9d98e8f_1104",
    "mesa-libgl-devel-cos6-x86_64 11.0.7 h9d98e8f_1104",
    "ncurses 6.2 h58526e2_4",
    "nvcc_linux-64 10.2 h1a5f58c_11",
    "openssl 1.1.1i h7f98852_0",
    "rhash 1.4.1 h7f98852_0",
    "sed 4.8 he412f7d_0",
    "sysroot_linux-64 2.12 h77966d4_13",
    "tk 8.6.10 h21135ba_1",
    "xz 5.2.5 h516909a_1",
    "zlib 1.2.11 h516909a_1010"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_llvm",
    "ca-certificates 2020.12.5 ha878542_0",
    "certifi 2020.12.5 py37h89c1867_1",
    "cffi 1.14.4 py37hc58025e_1",
    "cudatoolkit 10.2.89 h8f6ccaa_6",
    "cudnn 7.6.5.32 h01f27c4_1",
    "fftw 3.3.9 nompi_h74d3f13_100",
    "future 0.18.2 py37h89c1867_3",
    "ld_impl_linux-64 2.35.1 hea4e1c9_1",
    "libblas 3.9.0 7_mkl",
    "libcblas 3.9.0 7_mkl",
    "libffi 3.3 h58526e2_2",
    "libgcc-ng 9.3.0 h2828fa1_18",
    "libgfortran-ng 9.3.0 hff62375_18",
    "libgfortran5 9.3.0 hff62375_18",
    "liblapack 3.9.0 7_mkl",
    "libstdcxx-ng 9.3.0 h6de172a_18",
    "llvm-openmp 11.0.1 h4bd325d_0",
    "magma 2.5.4 h7384022_1",
    "mkl 2020.4 h726a3e6_304",
    "nccl 2.8.3.1 h1a5f58c_0",
    "ncurses 6.2 h58526e2_4",
    "ninja 1.10.2 h4bd325d_0",
    "numpy 1.19.5 py37haa41c4c_1",
    "ocl-icd 2.2.14 h7f98852_0",
    "ocl-icd-system 1.0.0 1",
    "openmm 7.5.0 py37hd9ee695_4",
    "openssl 1.1.1i h7f98852_0",
    "pcre 8.44 he1b5a44_0",
    "pip 20.3.3 pyhd8ed1ab_0",
    "pycparser 2.20 pyh9f0ad1d_2",
    "python 3.7.9 hffdb5ce_0_cpython",
    "python_abi 3.7 1_cp37m",
    "pytorch 1.7.1 cuda102py37h4d98c68_1",
    "pytorch-gpu 1.7.1 cuda102py37hf05f184_1",
    "readline 8.0 he28a2e2_2",
    "setuptools 49.6.0 py37h89c1867_3",
    "sqlite 3.34.0 h74cdb3f_0",
    "swig 4.0.2 h9c3ff4c_1",
    "tk 8.6.10 h21135ba_1",
    "wheel 0.36.2 pyhd3deb0d_0",
    "xz 5.2.5 h516909a_1",
    "zlib 1.2.11 h516909a_1010"
   ],
   "run": [
    "cudatoolkit 10.2|10.2.*",
    "libgcc-ng >=9.3.0",
    "libstdcxx-ng >=9.3.0",
    "ocl-icd >=2.2.14,<3.0a0",
    "ocl-icd-system",
    "openmm >=7.5,<7.6.0a0",
    "python >=3.7,<3.8.0a0",
    "python_abi 3.7.* *_cp37m",
    "pytorch",
    "pytorch-gpu >=1.7.1,<2.0a0"
   ]
  },
  "source": {
   "sha256": "6ff3c2d903729eb9145c02e694fe943c52cf9263736f9db26bb84511fbb2d71d",
   "url": "https://github.com/openmm/openmm-torch/archive/v0.1.tar.gz"
  },
  "test": {
   "commands": "cd ${CONDA_PREFIX}/share/openmm-torch/tests\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
   "imports": [
    "openmmtorch"
   ]
  }
 },
 "version": "0.1"
}