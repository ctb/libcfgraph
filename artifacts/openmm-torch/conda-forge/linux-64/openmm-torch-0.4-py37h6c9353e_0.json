{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge",
   "https://repo.anaconda.com/pkgs/main"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.10.3",
  "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
  "dev_url": "https://github.com/openmm/openmm-torch",
  "doc_url": "https://github.com/openmm/openmm-torch",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jaimergp",
    "peastman"
   ]
  },
  "home": "https://github.com/openmm/openmm-torch",
  "identifiers": [],
  "keywords": [],
  "license": "MIT",
  "license_family": "MIT",
  "license_file": "README.md",
  "root_pkgs": [
   "tini 0.18.0 h14c3975_1001",
   "libssh2 1.10.0 ha56f1ee_0",
   "wheel 0.37.0 pyhd8ed1ab_1",
   "jinja2 3.0.1 pyhd8ed1ab_0",
   "liblief 0.11.5 h9c3ff4c_0",
   "cffi 1.14.6 py38h3931269_1",
   "xz 5.2.5 h516909a_1",
   "pyopenssl 20.0.1 pyhd8ed1ab_0",
   "libgomp 11.2.0 h1d223b6_8",
   "ld_impl_linux-64 2.36.1 hea4e1c9_2",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "yaml 0.2.5 h516909a_0",
   "sqlite 3.36.0 h9cd32fc_1",
   "pytz 2021.1 pyhd8ed1ab_0",
   "pkginfo 1.7.1 pyhd8ed1ab_0",
   "ipython_genutils 0.2.0 py_1",
   "pycosat 0.6.3 py38h497a2fe_1006",
   "expat 2.4.1 h9c3ff4c_0",
   "lz4-c 1.9.3 h9c3ff4c_1",
   "idna 3.1 pyhd3deb0d_0",
   "requests 2.26.0 pyhd8ed1ab_0",
   "conda-package-handling 1.7.3 py38h497a2fe_0",
   "jupyter_core 4.8.1 py38h578d9bd_0",
   "git 2.33.0 pl5321hc30692c_0",
   "anaconda-client 1.7.2 pyhd8ed1ab_1",
   "traitlets 5.1.0 pyhd8ed1ab_0",
   "zlib 1.2.11 h516909a_1010",
   "ripgrep 13.0.0 habb4d0f_0",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "libarchive 3.5.2 hccf745f_0",
   "pyrsistent 0.17.3 py38h497a2fe_2",
   "pcre2 10.37 h032f7d1_0",
   "perl 5.32.1 0_h7f98852_perl5",
   "cryptography 3.4.7 py38ha5dfef3_0",
   "lzo 2.10 h516909a_1000",
   "libnghttp2 1.43.0 h812cca2_0",
   "krb5 1.19.2 hcc1bbae_0",
   "icu 68.1 h58526e2_0",
   "tk 8.6.11 h27826a3_1",
   "libgcc-ng 11.2.0 h1d223b6_8",
   "nbformat 5.1.3 pyhd8ed1ab_0",
   "_openmp_mutex 4.5 1_gnu",
   "libiconv 1.16 h516909a_0",
   "ncurses 6.2 h58526e2_4",
   "bzip2 1.0.8 h7f98852_4",
   "python 3.8.12 hb7a2778_0_cpython",
   "clyent 1.2.2 py_1",
   "six 1.16.0 pyh6c4a22f_0",
   "libcurl 7.79.0 h2574ce0_0",
   "importlib-metadata 4.8.1 py38h578d9bd_0",
   "conda-build 3.21.4 py38h578d9bd_0",
   "python-libarchive-c 3.1 py38h578d9bd_0",
   "curl 7.79.0 hea6ffbf_0",
   "brotlipy 0.7.0 py38h497a2fe_1001",
   "libxml2 2.9.12 h72842e0_0",
   "gettext 0.19.8.1 h73d1719_1006",
   "libedit 3.1.20191231 he28a2e2_2",
   "charset-normalizer 2.0.0 pyhd8ed1ab_0",
   "urllib3 1.26.6 pyhd8ed1ab_0",
   "psutil 5.8.0 py38h497a2fe_1",
   "setuptools 58.0.4 py38h578d9bd_0",
   "glob2 0.7 py_0",
   "patchelf 0.13 h58526e2_0",
   "libstdcxx-ng 11.2.0 he4da1e4_8",
   "py-lief 0.11.5 py38h709712a_0",
   "soupsieve 2.0.1 py_1",
   "_libgcc_mutex 0.1 conda_forge",
   "libffi 3.4.2 h9c3ff4c_1",
   "attrs 21.2.0 pyhd8ed1ab_0",
   "ruamel_yaml 0.15.80 py38h497a2fe_1004",
   "markupsafe 2.0.1 py38h497a2fe_0",
   "pyyaml 5.4.1 py38h497a2fe_1",
   "zstd 1.5.0 ha95c52a_0",
   "python_abi 3.8 2_cp38",
   "ca-certificates 2021.5.30 ha878542_0",
   "chardet 4.0.0 py38h578d9bd_1",
   "beautifulsoup4 4.10.0 pyha770c72_0",
   "zipp 3.5.0 pyhd8ed1ab_0",
   "readline 8.1 h46c0cb4_0",
   "libev 4.33 h516909a_1",
   "pycparser 2.20 pyh9f0ad1d_2",
   "patch 2.7.6 h7f98852_1002",
   "su-exec 0.2 h516909a_1002",
   "certifi 2021.5.30 py38h578d9bd_0",
   "openssl 1.1.1l h7f98852_0",
   "pip 21.2.4 pyhd8ed1ab_0",
   "jsonschema 3.2.0 pyhd8ed1ab_3",
   "tqdm 4.62.2 pyhd8ed1ab_0",
   "colorama 0.4.4 pyh9f0ad1d_0",
   "pysocks 1.7.1 py38h578d9bd_3",
   "c-ares 1.17.2 h7f98852_0",
   "conda 4.10.3 py38h578d9bd_2",
   "oniguruma 6.9.7.1 h7f98852_0",
   "conda-env 2.6.0 1",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "click 8.0.1 py38h578d9bd_0",
   "jq 1.6 h36c2ea0_1000",
   "conda-forge-ci-setup 3.11.1 py38h904d315_0"
  ],
  "summary": "OpenMM plugin to define forces with neural networks",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "c_compiler": "gcc",
  "c_compiler_version": "7",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "11.0",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "7",
  "docker_image": "quay.io/condaforge/linux-anvil-cuda:11.0",
  "extend_keys": [
   "extend_keys",
   "ignore_build_only_deps",
   "ignore_version",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.7.* *_cpython",
  "pytorch_version": "1.8",
  "r_base": "3.5",
  "target_platform": "linux-64",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ],
   [
    "cdt_name",
    "cuda_compiler_version",
    "docker_image"
   ]
  ]
 },
 "files": [
  "include/TorchForce.h",
  "include/TorchKernels.h",
  "include/internal/TorchForceImpl.h",
  "include/internal/windowsExportTorch.h",
  "lib/libOpenMMTorch.so",
  "lib/plugins/libOpenMMTorchCUDA.so",
  "lib/plugins/libOpenMMTorchOpenCL.so",
  "lib/plugins/libOpenMMTorchReference.so",
  "lib/python3.7/site-packages/_openmmtorch.cpython-37m-x86_64-linux-gnu.so",
  "lib/python3.7/site-packages/openmmtorch-1.0-py3.7.egg-info",
  "lib/python3.7/site-packages/openmmtorch.py",
  "share/openmm-torch/tests/TestCudaTorchForce",
  "share/openmm-torch/tests/TestOpenCLTorchForce",
  "share/openmm-torch/tests/TestReferenceTorchForce",
  "share/openmm-torch/tests/TestSerializeTorchForce",
  "share/openmm-torch/tests/tests/central.pt",
  "share/openmm-torch/tests/tests/global.pt",
  "share/openmm-torch/tests/tests/periodic.pt"
 ],
 "index": {
  "arch": "x86_64",
  "build": "py37h6c9353e_0",
  "build_number": 0,
  "depends": [
   "__glibc >=2.17",
   "cudatoolkit 11.0|11.0.*",
   "libgcc-ng >=7.5.0",
   "libstdcxx-ng >=7.5.0",
   "ocl-icd >=2.3.1,<3.0a0",
   "ocl-icd-system",
   "openmm >=7.6.0,<7.7.0a0",
   "python >=3.7,<3.8.0a0",
   "python_abi 3.7.* *_cp37m",
   "pytorch",
   "pytorch-gpu >=1.8.0,<1.8.1.0a0"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "openmm-torch",
  "platform": "linux",
  "subdir": "linux-64",
  "timestamp": 1632944397958,
  "version": "0.4"
 },
 "metadata_version": 1,
 "name": "openmm-torch",
 "raw_recipe": "{% set name = \"openmm-torch\" %}\n{% set version = \"0.4\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  git_url: https://github.com/openmm/{{ name }}.git\n  git_rev: v{{ version }}\n\nbuild:\n  number: 0\n  skip: true  # [win or (linux and cuda_compiler_version in (undefined, 'None', '10.2'))]\n  rpaths:\n    - lib/\n    - {{ SP_DIR }}/torch/lib\n  missing_dso_whitelist:\n    - '*/libcuda.*'  # [linux64 or ppc64le]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - cmake\n    - make\n  host:\n    - python\n    - pip\n    - swig\n    - openmm\n    - pytorch-gpu {{ pytorch_version }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - pytorch-cpu {{ pytorch_version }}  # [osx]\n    - ocl-icd  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n  run:\n    - python\n    - pytorch\n    # ^ needed so conda build does not complain about overlinking\n    - {{ pin_compatible('pytorch-gpu', max_pin='x.x.x') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ pin_compatible('pytorch-cpu', max_pin='x.x.x') }}  # [osx]\n    - {{ pin_compatible('openmm', max_pin='x.x') }}\n    - ocl-icd  # [linux]\n    - ocl-icd-system  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    - ocl_icd_wrapper_apple      # [osx]\n\ntest:\n  imports:\n    - openmmtorch\n  commands: |\n    cd ${CONDA_PREFIX}/share/{{ name }}/tests\n    ls -al\n    set +e\n    summary=\"\"\n    exitcode=0\n    for f in Test*; do\n      if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n        continue\n      fi\n      echo \"Running $f...\"\n      ./${f}\n      thisexitcode=$?\n      summary+=\"\\n${f}: \"\n      if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n      ((exitcode+=$thisexitcode))\n    done\n    echo \"-------\"\n    echo \"Summary\"\n    echo \"-------\"\n    echo -e \"${summary}\"\n    exit $exitcode\n\nabout:\n  home: https://github.com/openmm/openmm-torch\n  license: MIT\n  license_family: MIT\n  license_file: README.md\n  summary: OpenMM plugin to define forces with neural networks\n  description: |\n    This is a plugin for OpenMM that allows neural networks to be\n    used for defining forces. It is implemented with PyTorch.\n    To use it, you create a PyTorch model that takes particle\n    positions as input and produces energy as output. This plugin\n    uses the model to apply forces to particles during a simulation.\n  doc_url: https://github.com/openmm/openmm-torch\n  dev_url: https://github.com/openmm/openmm-torch\n\nextra:\n  recipe-maintainers:\n    - jaimergp\n    - peastman\n",
 "rendered_recipe": {
  "about": {
   "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
   "dev_url": "https://github.com/openmm/openmm-torch",
   "doc_url": "https://github.com/openmm/openmm-torch",
   "home": "https://github.com/openmm/openmm-torch",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "README.md",
   "summary": "OpenMM plugin to define forces with neural networks"
  },
  "build": {
   "missing_dso_whitelist": [
    "*/libcuda.*"
   ],
   "number": "0",
   "rpaths": [
    "/home/conda/feedstock_root/build_artifacts/openmm-torch_1632943193933/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehol/lib/python3.7/site-packages/torch/lib",
    "lib/"
   ],
   "string": "py37h6c9353e_0"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm-torch",
   "version": "0.4"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "_sysroot_linux-64_curr_repodata_hack 3 h5bd9786_12",
    "binutils_impl_linux-64 2.36.1 h193b22a_2",
    "binutils_linux-64 2.36 hf3e587d_33",
    "bzip2 1.0.8 h7f98852_4",
    "c-ares 1.17.2 h7f98852_0",
    "ca-certificates 2021.5.30 ha878542_0",
    "cmake 3.21.3 h8897547_0",
    "expat 2.4.1 h9c3ff4c_0",
    "gcc_impl_linux-64 7.5.0 habd7529_19",
    "gcc_linux-64 7.5.0 h47867f9_33",
    "gxx_impl_linux-64 7.5.0 hd0bb8aa_19",
    "gxx_linux-64 7.5.0 h555fc39_33",
    "kernel-headers_linux-64 3.10.0 h4a8ded7_12",
    "krb5 1.19.2 h48eae69_2",
    "ld_impl_linux-64 2.36.1 hea4e1c9_2",
    "libcurl 7.79.1 h494985f_1",
    "libdrm-cos7-x86_64 2.4.97 h9b0a68f_1105",
    "libedit 3.1.20191231 he28a2e2_2",
    "libev 4.33 h516909a_1",
    "libgcc-devel_linux-64 7.5.0 hda03d7c_19",
    "libgcc-ng 11.2.0 h1d223b6_9",
    "libglvnd-cos7-x86_64 1.0.1 h9b0a68f_1105",
    "libglvnd-glx-cos7-x86_64 1.0.1 h9b0a68f_1105",
    "libgomp 11.2.0 h1d223b6_9",
    "libnghttp2 1.43.0 ha19adfc_1",
    "libssh2 1.10.0 ha35d2d1_2",
    "libstdcxx-devel_linux-64 7.5.0 hb016644_19",
    "libstdcxx-ng 11.2.0 he4da1e4_9",
    "libuv 1.42.0 h7f98852_0",
    "lz4-c 1.9.3 h9c3ff4c_1",
    "make 4.3 hd18ef5c_1",
    "mesa-khr-devel-cos7-x86_64 18.3.4 h9b0a68f_1105",
    "mesa-libgl-cos7-x86_64 18.3.4 h9b0a68f_1105",
    "mesa-libgl-devel-cos7-x86_64 18.3.4 h9b0a68f_1105",
    "mesa-libglapi-cos7-x86_64 18.3.4 h9b0a68f_1105",
    "ncurses 6.2 h58526e2_4",
    "nvcc_linux-64 11.0 h38088af_14",
    "openssl 3.0.0 h7f98852_1",
    "rhash 1.4.1 h7f98852_0",
    "sed 4.8 he412f7d_0",
    "sysroot_linux-64 2.17 h4a8ded7_12",
    "tk 8.6.11 h27826a3_1",
    "xz 5.2.5 h516909a_1",
    "zlib 1.2.11 h516909a_1010",
    "zstd 1.5.0 ha95c52a_0"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_llvm",
    "ca-certificates 2021.5.30 ha878542_0",
    "cffi 1.14.6 py37h036bc23_1",
    "cudatoolkit 11.0.3 h15472ef_9",
    "cudnn 8.2.1.32 h86fa8c9_0",
    "fftw 3.3.10 nompi_h74d3f13_101",
    "future 0.18.2 py37h89c1867_3",
    "ld_impl_linux-64 2.36.1 hea4e1c9_2",
    "libblas 3.9.0 8_mkl",
    "libcblas 3.9.0 8_mkl",
    "libffi 3.4.2 h9c3ff4c_4",
    "libgcc-ng 11.2.0 h1d223b6_9",
    "libgfortran-ng 11.2.0 h69a702a_9",
    "libgfortran5 11.2.0 h5c6108e_9",
    "liblapack 3.9.0 8_mkl",
    "libprotobuf 3.15.8 h780b84a_1",
    "libstdcxx-ng 11.2.0 he4da1e4_9",
    "llvm-openmp 12.0.1 h4bd325d_1",
    "magma 2.5.4 h4a2bb80_2",
    "mkl 2020.4 h726a3e6_304",
    "nccl 2.10.3.1 h96e36e3_0",
    "ncurses 6.2 h58526e2_4",
    "ninja 1.10.2 h4bd325d_1",
    "numpy 1.21.2 py37h31617e3_0",
    "ocl-icd 2.3.1 h7f98852_0",
    "ocl-icd-system 1.0.0 1",
    "openmm 7.6.0 py37h9f6db5c_0",
    "openssl 1.1.1l h7f98852_0",
    "pcre 8.45 h9c3ff4c_0",
    "pip 21.2.4 pyhd8ed1ab_0",
    "pycparser 2.20 pyh9f0ad1d_2",
    "python 3.7.10 hb7a2778_101_cpython",
    "python_abi 3.7 2_cp37m",
    "pytorch 1.8.0 cuda110py37h5fb8b0b_0",
    "pytorch-gpu 1.8.0 cuda110py37h5b0ac8e_0",
    "readline 8.1 h46c0cb4_0",
    "setuptools 58.0.4 py37h89c1867_2",
    "sleef 3.5.1 h9b69904_2",
    "sqlite 3.36.0 h9cd32fc_2",
    "swig 4.0.2 hd3c618e_2",
    "tk 8.6.11 h27826a3_1",
    "typing_extensions 3.10.0.2 pyha770c72_0",
    "wheel 0.37.0 pyhd8ed1ab_1",
    "xz 5.2.5 h516909a_1",
    "zlib 1.2.11 h516909a_1010"
   ],
   "run": [
    "__glibc >=2.17",
    "cudatoolkit 11.0|11.0.*",
    "libgcc-ng >=7.5.0",
    "libstdcxx-ng >=7.5.0",
    "ocl-icd >=2.3.1,<3.0a0",
    "ocl-icd-system",
    "openmm >=7.6.0,<7.7.0a0",
    "python >=3.7,<3.8.0a0",
    "python_abi 3.7.* *_cp37m",
    "pytorch",
    "pytorch-gpu >=1.8.0,<1.8.1.0a0"
   ]
  },
  "source": {
   "git_rev": "v0.4",
   "git_url": "https://github.com/openmm/openmm-torch.git"
  },
  "test": {
   "commands": "cd ${CONDA_PREFIX}/share/openmm-torch/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
   "imports": [
    "openmmtorch"
   ]
  }
 },
 "version": "0.4"
}