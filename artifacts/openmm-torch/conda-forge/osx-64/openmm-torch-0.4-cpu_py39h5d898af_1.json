{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.10.3",
  "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
  "dev_url": "https://github.com/openmm/openmm-torch",
  "doc_url": "https://github.com/openmm/openmm-torch",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jaimergp",
    "peastman"
   ]
  },
  "home": "https://github.com/openmm/openmm-torch",
  "identifiers": [],
  "keywords": [],
  "license": "MIT",
  "license_family": "MIT",
  "license_file": "README.md",
  "root_pkgs": [
   "ruamel.yaml 0.17.17 py39h89e85a6_0",
   "gettext 0.19.8.1 hd1a6beb_1008",
   "git 2.33.1 pl5321h9a53687_0",
   "nbformat 5.1.3 pyhd8ed1ab_0",
   "conda-env 2.6.0 1",
   "six 1.16.0 pyh6c4a22f_0",
   "pygments 2.10.0 pyhd8ed1ab_0",
   "icu 69.1 he49afe7_0",
   "liblief 0.11.5 he49afe7_1",
   "jq 1.6 hc929b4f_1000",
   "ncurses 6.2 h2e338ed_4",
   "curl 7.79.1 hf45b732_1",
   "future 0.18.2 py39h6e9494a_4",
   "pycparser 2.20 pyh9f0ad1d_2",
   "attrs 21.2.0 pyhd8ed1ab_0",
   "cryptography 3.4.8 py39ha2c9959_0",
   "reproc-cpp 14.2.3 he49afe7_0",
   "soupsieve 2.0.1 py_1",
   "reproc 14.2.3 h0d85af4_0",
   "requests 2.26.0 pyhd8ed1ab_0",
   "libcxx 12.0.1 habf9029_0",
   "glob2 0.7 py_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "pyyaml 6.0 py39h89e85a6_1",
   "zlib 1.2.11 h9173be1_1013",
   "pyopenssl 21.0.0 pyhd8ed1ab_0",
   "importlib-metadata 4.8.1 py39h6e9494a_1",
   "prompt-toolkit 3.0.21 pyha770c72_0",
   "libedit 3.1.20191231 h0678c8f_2",
   "libcurl 7.79.1 hf45b732_1",
   "libffi 3.4.2 he49afe7_4",
   "commonmark 0.9.1 py_0",
   "py-lief 0.11.5 py39h9fcab8e_1",
   "jupyter_core 4.9.1 py39h6e9494a_0",
   "ruamel_yaml 0.15.80 py39h89e85a6_1004",
   "pycosat 0.6.3 py39h89e85a6_1006",
   "libiconv 1.16 haf1e3a3_0",
   "markupsafe 2.0.1 py39h89e85a6_1",
   "brotlipy 0.7.0 py39h89e85a6_1001",
   "filelock 3.3.2 pyhd8ed1ab_0",
   "backports 1.0 py_2",
   "wheel 0.37.0 pyhd8ed1ab_1",
   "xz 5.2.5 haf1e3a3_1",
   "prompt_toolkit 3.0.21 hd8ed1ab_0",
   "joblib 1.1.0 pyhd8ed1ab_0",
   "pip 21.3.1 pyhd8ed1ab_0",
   "perl 5.32.1 1_h0d85af4_perl5",
   "cctools 949.0.1 hd9211c8_23",
   "zipp 3.6.0 pyhd8ed1ab_0",
   "colorama 0.4.4 pyh9f0ad1d_0",
   "conda-forge-ci-setup 3.16.0 py39hb0a6171_0",
   "tk 8.6.11 h5dbffcc_1",
   "ld64_osx-64 530 he8994da_23",
   "jinja2 3.0.2 pyhd8ed1ab_0",
   "krb5 1.19.2 hcfbf3a7_3",
   "click 8.0.3 py39h6e9494a_1",
   "watchgod 0.7 pyhd8ed1ab_0",
   "boa 0.7.1 pyha770c72_0",
   "jsonschema 4.1.2 pyhd8ed1ab_0",
   "conda 4.10.3 py39h6e9494a_3",
   "chardet 4.0.0 py39h6e9494a_1",
   "conda-package-handling 1.7.3 py39h89e85a6_0",
   "python-libarchive-c 3.1 py39h6e9494a_0",
   "conda-build 3.21.4 py39h6e9494a_0",
   "pysocks 1.7.1 py39h6e9494a_3",
   "libnghttp2 1.43.0 h6f36284_1",
   "libsolv 0.7.19 hcf210ce_5",
   "libxml2 2.9.12 h7e28ab6_1",
   "zstd 1.5.0 h582d3a0_0",
   "sqlite 3.36.0 h23a322b_2",
   "psutil 5.8.0 py39h89e85a6_2",
   "libarchive 3.5.2 h2b60450_1",
   "tapi 1100.0.11 h9ce4665_0",
   "tzdata 2021c he74cb21_0",
   "charset-normalizer 2.0.0 pyhd8ed1ab_0",
   "yaml 0.2.5 haf1e3a3_0",
   "ruamel.yaml.clib 0.2.2 py39hcbf5805_2",
   "readline 8.1 h05e3726_0",
   "openssl 1.1.1l h0d85af4_0",
   "anaconda-client 1.8.0 pyhd8ed1ab_0",
   "pkginfo 1.7.1 pyhd8ed1ab_0",
   "rich 10.12.0 py39h6e9494a_0",
   "libzlib 1.2.11 h9173be1_1013",
   "bzip2 1.0.8 h0d85af4_4",
   "c-ares 1.18.1 h0d85af4_0",
   "beautifulsoup4 4.10.0 pyha770c72_0",
   "json5 0.9.5 pyh9f0ad1d_0",
   "ripgrep 13.0.0 h80d2146_1",
   "mamba 0.17.0 py39hb671511_0",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "libssh2 1.10.0 h52ee1ee_2",
   "wcwidth 0.2.5 pyh9f0ad1d_2",
   "clyent 1.2.2 py_1",
   "pcre2 10.37 ha16e1b2_0",
   "ld64 530 hd2e7500_23",
   "python_abi 3.9 2_cp39",
   "lz4-c 1.9.3 he49afe7_1",
   "ca-certificates 2021.10.8 h033912b_0",
   "idna 3.1 pyhd3deb0d_0",
   "tqdm 4.62.3 pyhd8ed1ab_0",
   "pyrsistent 0.17.3 py39h89e85a6_3",
   "cffi 1.14.6 py39he338e87_1",
   "cctools_osx-64 949.0.1 h6407bdd_23",
   "certifi 2021.10.8 py39h6e9494a_1",
   "setuptools 58.2.0 py39h6e9494a_0",
   "python 3.9.7 h1248fe1_3_cpython",
   "pytz 2021.3 pyhd8ed1ab_0",
   "ldid 2.1.2 h6a69015_3",
   "ipython_genutils 0.2.0 py_1",
   "dataclasses 0.8 pyhc8e2a94_3",
   "lzo 2.10 haf1e3a3_1000",
   "urllib3 1.26.7 pyhd8ed1ab_0",
   "libllvm12 12.0.1 hd011deb_2",
   "typing_extensions 3.10.0.2 pyha770c72_0",
   "backports.functools_lru_cache 1.6.4 pyhd8ed1ab_0",
   "expat 2.4.1 he49afe7_0",
   "libev 4.33 haf1e3a3_1",
   "traitlets 5.1.1 pyhd8ed1ab_0",
   "oniguruma 6.9.7.1 h0d85af4_0"
  ],
  "summary": "OpenMM plugin to define forces with neural networks",
  "tags": []
 },
 "conda_build_config": {
  "CI": "azure",
  "CONDA_BUILD_SYSROOT": "/Applications/Xcode_12.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk",
  "MACOSX_DEPLOYMENT_TARGET": "10.9",
  "c_compiler": "clang",
  "c_compiler_version": "11",
  "channel_sources": "conda-forge",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler_version": "None",
  "cxx_compiler": "clangxx",
  "cxx_compiler_version": "11",
  "extend_keys": [
   "ignore_version",
   "ignore_build_only_deps",
   "extend_keys",
   "pin_run_as_build"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "numpy",
   "python"
  ],
  "lua": "5",
  "macos_machine": "x86_64-apple-darwin13.4.0",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.9.* *_cpython",
  "pytorch_version": "1.9.1",
  "r_base": "3.5",
  "target_platform": "osx-64",
  "zip_keys": [
   [
    "c_compiler_version",
    "cxx_compiler_version"
   ]
  ]
 },
 "files": [
  "include/TorchForce.h",
  "include/TorchKernels.h",
  "include/internal/TorchForceImpl.h",
  "include/internal/windowsExportTorch.h",
  "lib/libOpenMMTorch.dylib",
  "lib/plugins/libOpenMMTorchOpenCL.dylib",
  "lib/plugins/libOpenMMTorchReference.dylib",
  "lib/python3.9/site-packages/_openmmtorch.cpython-39-darwin.so",
  "lib/python3.9/site-packages/openmmtorch-1.0-py3.9.egg-info",
  "lib/python3.9/site-packages/openmmtorch.py",
  "share/openmm-torch/tests/TestOpenCLTorchForce",
  "share/openmm-torch/tests/TestReferenceTorchForce",
  "share/openmm-torch/tests/TestSerializeTorchForce",
  "share/openmm-torch/tests/tests/central.pt",
  "share/openmm-torch/tests/tests/global.pt",
  "share/openmm-torch/tests/tests/periodic.pt"
 ],
 "index": {
  "arch": "x86_64",
  "build": "cpu_py39h5d898af_1",
  "build_number": 1,
  "depends": [
   "khronos-opencl-icd-loader >=2021.6.30",
   "libcxx >=11.1.0",
   "ocl_icd_wrapper_apple",
   "openmm >=7.6.0,<7.7.0a0",
   "python >=3.9,<3.10.0a0",
   "python_abi 3.9.* *_cp39",
   "pytorch",
   "pytorch-cpu >=1.9.1,<1.9.2.0a0"
  ],
  "license": "MIT",
  "license_family": "MIT",
  "name": "openmm-torch",
  "platform": "osx",
  "subdir": "osx-64",
  "timestamp": 1635946176451,
  "version": "0.4"
 },
 "metadata_version": 1,
 "name": "openmm-torch",
 "raw_recipe": "{% set name = \"openmm-torch\" %}\n{% set version = \"0.4\" %}\n\npackage:\n  name: {{ name|lower }}\n  version: {{ version }}\n\nsource:\n  git_url: https://github.com/openmm/{{ name }}.git\n  git_rev: v{{ version }}\n\nbuild:\n  number: 1\n  string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != \"None\"]\n  string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}                                      # [cuda_compiler_version == \"None\"]\n  skip: true  # [win or (linux and cuda_compiler_version in (undefined, 'None', '10.2'))]\n  rpaths:\n    - lib/\n    - {{ SP_DIR }}/torch/lib\n  missing_dso_whitelist:\n    - '*/libcuda.*'  # [linux64 or ppc64le]\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cxx') }}\n    - {{ compiler('cuda') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ cdt('mesa-libgl-devel') }}  # [linux]\n    - cmake\n    - make\n  host:\n    - python\n    - pip\n    - swig\n    - openmm\n    - pytorch-gpu {{ pytorch_version }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - pytorch-cpu {{ pytorch_version }}  # [osx]\n    - ocl-icd  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n  run:\n    - python\n    - pytorch\n    # ^ needed so conda build does not complain about overlinking\n    - {{ pin_compatible('pytorch-gpu', max_pin='x.x.x') }}  # [cuda_compiler_version not in (undefined, 'None')]\n    - {{ pin_compatible('pytorch-cpu', max_pin='x.x.x') }}  # [osx]\n    - {{ pin_compatible('openmm', max_pin='x.x') }}\n    - ocl-icd  # [linux]\n    - ocl-icd-system  # [linux]\n    - khronos-opencl-icd-loader  # [osx]\n    - ocl_icd_wrapper_apple      # [osx]\n\ntest:\n  imports:\n    - openmmtorch\n  commands: |\n    cd ${CONDA_PREFIX}/share/{{ name }}/tests\n    ls -al\n    set +e\n    summary=\"\"\n    exitcode=0\n    for f in Test*; do\n      if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n        continue\n      fi\n      echo \"Running $f...\"\n      ./${f}\n      thisexitcode=$?\n      summary+=\"\\n${f}: \"\n      if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n      ((exitcode+=$thisexitcode))\n    done\n    echo \"-------\"\n    echo \"Summary\"\n    echo \"-------\"\n    echo -e \"${summary}\"\n    exit $exitcode\n\nabout:\n  home: https://github.com/openmm/openmm-torch\n  license: MIT\n  license_family: MIT\n  license_file: README.md\n  summary: OpenMM plugin to define forces with neural networks\n  description: |\n    This is a plugin for OpenMM that allows neural networks to be\n    used for defining forces. It is implemented with PyTorch.\n    To use it, you create a PyTorch model that takes particle\n    positions as input and produces energy as output. This plugin\n    uses the model to apply forces to particles during a simulation.\n  doc_url: https://github.com/openmm/openmm-torch\n  dev_url: https://github.com/openmm/openmm-torch\n\nextra:\n  recipe-maintainers:\n    - jaimergp\n    - peastman\n",
 "rendered_recipe": {
  "about": {
   "description": "This is a plugin for OpenMM that allows neural networks to be\nused for defining forces. It is implemented with PyTorch.\nTo use it, you create a PyTorch model that takes particle\npositions as input and produces energy as output. This plugin\nuses the model to apply forces to particles during a simulation.\n",
   "dev_url": "https://github.com/openmm/openmm-torch",
   "doc_url": "https://github.com/openmm/openmm-torch",
   "home": "https://github.com/openmm/openmm-torch",
   "license": "MIT",
   "license_family": "MIT",
   "license_file": "README.md",
   "summary": "OpenMM plugin to define forces with neural networks"
  },
  "build": {
   "missing_dso_whitelist": null,
   "number": "1",
   "rpaths": [
    "/Users/runner/miniforge3/conda-bld/openmm-torch_1635943936536/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placeh/lib/python3.9/site-packages/torch/lib",
    "lib/"
   ],
   "string": "cpu_py39h5d898af_1"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "jaimergp",
    "peastman"
   ]
  },
  "package": {
   "name": "openmm-torch",
   "version": "0.4"
  },
  "requirements": {
   "build": [
    "bzip2 1.0.8 h0d85af4_4",
    "c-ares 1.18.1 h0d85af4_0",
    "ca-certificates 2021.10.8 h033912b_0",
    "cctools_osx-64 949.0.1 h6407bdd_23",
    "clang 11.1.0 h694c41f_1",
    "clang-11 11.1.0 default_he082bbe_1",
    "clang_osx-64 11.1.0 hb91bd55_4",
    "clangxx 11.1.0 default_he082bbe_1",
    "clangxx_osx-64 11.1.0 h7e1b574_4",
    "cmake 3.21.3 hdbd2f3e_0",
    "compiler-rt 11.1.0 h654b07c_0",
    "compiler-rt_osx-64 11.1.0 h8c5fa43_0",
    "expat 2.4.1 he49afe7_0",
    "krb5 1.19.2 h289aae4_3",
    "ld64_osx-64 530 he8994da_21",
    "ldid 2.1.2 h6a69015_3",
    "libclang-cpp11.1 11.1.0 default_he082bbe_1",
    "libcurl 7.79.1 h97da3c1_1",
    "libcxx 12.0.1 habf9029_0",
    "libedit 3.1.20191231 h0678c8f_2",
    "libev 4.33 haf1e3a3_1",
    "libllvm11 11.1.0 hd011deb_2",
    "libllvm12 12.0.1 hd011deb_2",
    "libnghttp2 1.43.0 hfd382f3_1",
    "libssh2 1.10.0 hd3787cc_2",
    "libuv 1.42.0 h0d85af4_0",
    "libzlib 1.2.11 h9173be1_1013",
    "llvm-tools 11.1.0 hd011deb_2",
    "lz4-c 1.9.3 he49afe7_1",
    "make 4.3 h22f3db7_1",
    "ncurses 6.2 h2e338ed_4",
    "openssl 3.0.0 h0d85af4_2",
    "rhash 1.4.1 h35c211d_0",
    "tapi 1100.0.11 h9ce4665_0",
    "tk 8.6.11 h5dbffcc_1",
    "xz 5.2.5 haf1e3a3_1",
    "zlib 1.2.11 h9173be1_1013",
    "zstd 1.5.0 h582d3a0_0"
   ],
   "host": [
    "ca-certificates 2021.10.8 h033912b_0",
    "cffi 1.14.6 py39he338e87_2",
    "fftw 3.3.10 nompi_h4024a70_101",
    "future 0.18.2 py39h6e9494a_4",
    "khronos-opencl-icd-loader 2021.06.30 h0d85af4_1",
    "libblas 3.9.0 12_osx64_mkl",
    "libcblas 3.9.0 12_osx64_mkl",
    "libcxx 12.0.1 habf9029_0",
    "libffi 3.4.2 he49afe7_4",
    "libgfortran 5.0.0 9_3_0_h6c81a4c_23",
    "libgfortran5 9.3.0 h6c81a4c_23",
    "liblapack 3.9.0 12_osx64_mkl",
    "libprotobuf 3.18.1 hcf210ce_0",
    "libzlib 1.2.11 h9173be1_1013",
    "llvm-openmp 12.0.1 hda6cdc1_1",
    "mkl 2021.4.0 h89fa619_689",
    "ncurses 6.2 h2e338ed_4",
    "ninja 1.10.2 h940c156_1",
    "numpy 1.21.3 py39h7eed0ac_1",
    "ocl_icd_wrapper_apple 1.0.0 hbcb3906_0",
    "openmm 7.6.0 py39h8d72adf_0_khronos",
    "openssl 3.0.0 h0d85af4_2",
    "pcre 8.45 he49afe7_0",
    "pip 21.3.1 pyhd8ed1ab_0",
    "pycparser 2.20 pyh9f0ad1d_2",
    "python 3.9.7 h38b4d05_3_cpython",
    "python_abi 3.9 2_cp39",
    "pytorch 1.9.1 cpu_py39hacab7d8_3",
    "pytorch-cpu 1.9.1 cpu_py39he781eb1_3",
    "readline 8.1 h05e3726_0",
    "setuptools 58.4.0 py39h6e9494a_1",
    "sleef 3.5.1 h6db0672_2",
    "sqlite 3.36.0 h23a322b_2",
    "swig 4.0.2 hce5123c_2",
    "tbb 2021.4.0 h940c156_1",
    "tk 8.6.11 h5dbffcc_1",
    "typing_extensions 3.10.0.2 pyha770c72_0",
    "tzdata 2021e he74cb21_0",
    "wheel 0.37.0 pyhd8ed1ab_1",
    "xz 5.2.5 haf1e3a3_1",
    "zlib 1.2.11 h9173be1_1013"
   ],
   "run": [
    "khronos-opencl-icd-loader >=2021.6.30",
    "libcxx >=11.1.0",
    "ocl_icd_wrapper_apple",
    "openmm >=7.6.0,<7.7.0a0",
    "python >=3.9,<3.10.0a0",
    "python_abi 3.9.* *_cp39",
    "pytorch",
    "pytorch-cpu >=1.9.1,<1.9.2.0a0"
   ]
  },
  "source": {
   "git_rev": "v0.4",
   "git_url": "https://github.com/openmm/openmm-torch.git"
  },
  "test": {
   "commands": "cd ${CONDA_PREFIX}/share/openmm-torch/tests\nls -al\nset +e\nsummary=\"\"\nexitcode=0\nfor f in Test*; do\n  if [[ $f == *Cuda* || $f == *OpenCL* ]]; then\n    continue\n  fi\n  echo \"Running $f...\"\n  ./${f}\n  thisexitcode=$?\n  summary+=\"\\n${f}: \"\n  if [[ $thisexitcode == 0 ]]; then summary+=\"OK\"; else summary+=\"FAILED\"; fi\n  ((exitcode+=$thisexitcode))\ndone\necho \"-------\"\necho \"Summary\"\necho \"-------\"\necho -e \"${summary}\"\nexit $exitcode\n",
   "imports": [
    "openmmtorch"
   ]
  }
 },
 "version": "0.4"
}