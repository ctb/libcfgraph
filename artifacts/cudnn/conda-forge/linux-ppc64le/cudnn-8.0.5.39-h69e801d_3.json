{
 "about": {
  "channels": [
   "https://conda.anaconda.org/conda-forge",
   "https://repo.anaconda.com/pkgs/main"
  ],
  "conda_build_version": "3.21.4",
  "conda_private": false,
  "conda_version": "4.10.3",
  "description": "NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of\nprimitives for deep neural networks. It provides highly tuned\nimplementations of routines arising frequently in DNN applications.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuDNN\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuDNN EULA -\nhttps://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n",
  "dev_url": "https://developer.nvidia.com/rdp/cudnn-download",
  "doc_url": "https://docs.nvidia.com/deeplearning/cudnn/",
  "env_vars": {
   "CIO_TEST": "<not set>"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "leofang",
    "kkraus14"
   ]
  },
  "home": "https://developer.nvidia.com/cudnn",
  "identifiers": [],
  "keywords": [],
  "license": "LicenseRef-cuDNN-Software-License-Agreement",
  "license_file": "targets/ppc64le-linux/NVIDIA_SLA_cuDNN_Support.txt",
  "license_url": "https://docs.nvidia.com/deeplearning/cudnn/sla/index.html",
  "root_pkgs": [
   "tini 0.18.0 h14c3975_1001",
   "attrs 21.2.0 pyhd8ed1ab_0",
   "importlib-metadata 4.6.1 py38hf8b3453_0",
   "zlib 1.2.11 h6eb9509_1010",
   "jupyter_core 4.7.1 py38hf8b3453_0",
   "git 2.32.0 pl5321h29e2a4d_0",
   "libgomp 11.1.0 h16e2c27_4",
   "clyent 1.2.2 py_1",
   "py-lief 0.11.5 py38hfdc2fcd_0",
   "pkginfo 1.7.1 pyhd8ed1ab_0",
   "pycosat 0.6.3 py38h98b8a6f_1006",
   "xz 5.2.5 h6eb9509_1",
   "libnghttp2 1.43.0 h42039ad_0",
   "patchelf 0.11 hb209c28_0",
   "libedit 3.1.20191231 h41a240f_2",
   "libiconv 1.16 h6eb9509_0",
   "psutil 5.8.0 py38h98b8a6f_1",
   "yaml 0.2.5 h6eb9509_0",
   "su-exec 0.2 h6eb9509_1002",
   "soupsieve 2.0.1 py_1",
   "python_abi 3.8 2_cp38",
   "krb5 1.19.2 haf43566_0",
   "libxml2 2.9.12 h5b1524f_0",
   "urllib3 1.26.6 pyhd8ed1ab_0",
   "python 3.8.10 h82ac395_1_cpython",
   "brotlipy 0.7.0 py38h98b8a6f_1001",
   "_libgcc_mutex 0.1 conda_forge",
   "pyopenssl 20.0.1 pyhd8ed1ab_0",
   "libev 4.33 h6eb9509_1",
   "perl 5.32.1 0_h4e0d66e_perl5",
   "libstdcxx-ng 11.1.0 h8186cfa_4",
   "_openmp_mutex 4.5 1_gnu",
   "certifi 2021.5.30 py38hf8b3453_0",
   "anaconda-client 1.7.2 pyhd8ed1ab_1",
   "pysocks 1.7.1 py38hf8b3453_3",
   "libssh2 1.9.0 ha5a9321_6",
   "ncurses 6.2 hea85c5d_4",
   "idna 3.1 pyhd3deb0d_0",
   "conda-build 3.21.4 py38hf8b3453_0",
   "sqlite 3.36.0 h4e2196e_0",
   "nbformat 5.1.3 pyhd8ed1ab_0",
   "conda-package-handling 1.7.3 py38h98b8a6f_0",
   "pycparser 2.20 pyh9f0ad1d_2",
   "lzo 2.10 h6eb9509_1000",
   "requests 2.26.0 pyhd8ed1ab_0",
   "pytz 2021.1 pyhd8ed1ab_0",
   "lz4-c 1.9.3 h3b9df90_0",
   "python-dateutil 2.8.2 pyhd8ed1ab_0",
   "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
   "bzip2 1.0.8 h4e0d66e_4",
   "libarchive 3.5.1 h3281d6a_2",
   "pcre2 10.37 h32277c3_0",
   "libcurl 7.78.0 he415e40_0",
   "libffi 3.3 hea85c5d_2",
   "charset-normalizer 2.0.0 pyhd8ed1ab_0",
   "icu 68.1 hea85c5d_0",
   "wheel 0.36.2 pyhd3deb0d_0",
   "tqdm 4.61.2 pyhd8ed1ab_1",
   "patch 2.7.6 h4e0d66e_1002",
   "ca-certificates 2021.5.30 h1084571_0",
   "six 1.16.0 pyh6c4a22f_0",
   "python-libarchive-c 3.1 py38hf8b3453_0",
   "tk 8.6.10 h38e1d09_1",
   "ipython_genutils 0.2.0 py_1",
   "jsonschema 3.2.0 pyhd8ed1ab_3",
   "jinja2 3.0.1 pyhd8ed1ab_0",
   "ruamel_yaml 0.15.80 py38h98b8a6f_1004",
   "pyrsistent 0.17.3 py38h98b8a6f_2",
   "conda 4.10.3 py38hf8b3453_0",
   "libgcc-ng 11.1.0 h16e2c27_4",
   "gettext 0.19.8.1 hf23c357_1005",
   "pyyaml 5.4.1 py38h98b8a6f_0",
   "expat 2.4.1 h3b9df90_0",
   "liblief 0.11.5 h3b9df90_0",
   "zstd 1.5.0 h65c4b1a_0",
   "glob2 0.7 py_0",
   "chardet 4.0.0 py38hf8b3453_1",
   "c-ares 1.17.1 h4e0d66e_1",
   "cffi 1.14.6 py38h0dac770_0",
   "curl 7.78.0 h57b39c4_0",
   "setuptools 49.6.0 py38hf8b3453_3",
   "cryptography 3.4.7 py38h257c4d3_0",
   "markupsafe 2.0.1 py38h98b8a6f_0",
   "readline 8.1 h5c45dff_0",
   "openssl 1.1.1k h4e0d66e_0",
   "ripgrep 13.0.0 ha57a3a6_0",
   "traitlets 5.0.5 py_0",
   "beautifulsoup4 4.9.3 pyhb0f4dca_0",
   "filelock 3.0.12 pyh9f0ad1d_0",
   "zipp 3.5.0 pyhd8ed1ab_0",
   "conda-forge-ci-setup 3.10.1 py38h6345821_0",
   "oniguruma 6.9.7.1 h4e0d66e_0",
   "conda-env 2.6.0 1",
   "shyaml 0.6.2 pyhd3deb0d_0",
   "jq 1.6 h339bb43_1000",
   "click 8.0.1 py38hf8b3453_0",
   "pip 21.2.3 pyhd8ed1ab_0"
  ],
  "summary": "NVIDIA's cuDNN deep neural network acceleration library",
  "tags": []
 },
 "conda_build_config": {
  "CI": "travis",
  "c_compiler": "gcc",
  "c_compiler_version": "8",
  "cdt_name": "cos7",
  "channel_sources": "conda-forge,defaults",
  "channel_targets": "conda-forge main",
  "cpu_optimization_target": "nocona",
  "cran_mirror": "https://cran.r-project.org",
  "cuda_compiler": "nvcc",
  "cuda_compiler_version": "10.2",
  "cudnn": "undefined",
  "cxx_compiler": "gxx",
  "cxx_compiler_version": "8",
  "docker_image": "quay.io/condaforge/linux-anvil-ppc64le-cuda:10.2",
  "extend_keys": [
   "extend_keys",
   "ignore_version",
   "pin_run_as_build",
   "ignore_build_only_deps"
  ],
  "fortran_compiler": "gfortran",
  "ignore_build_only_deps": [
   "python",
   "numpy"
  ],
  "lua": "5",
  "numpy": "1.16",
  "perl": "5.26.2",
  "pin_run_as_build": {
   "python": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   },
   "r-base": {
    "max_pin": "x.x",
    "min_pin": "x.x"
   }
  },
  "python": "3.8",
  "r_base": "3.5",
  "target_platform": "linux-ppc64le",
  "zip_keys": [
   [
    "cuda_compiler_version",
    "cdt_name",
    "cudnn"
   ],
   [
    "cuda_compiler_version",
    "cdt_name",
    "docker_image"
   ]
  ]
 },
 "files": [
  "bin/.cudnn-post-link.sh",
  "include/cudnn.h",
  "include/cudnn_adv_infer.h",
  "include/cudnn_adv_train.h",
  "include/cudnn_backend.h",
  "include/cudnn_cnn_infer.h",
  "include/cudnn_cnn_train.h",
  "include/cudnn_ops_infer.h",
  "include/cudnn_ops_train.h",
  "include/cudnn_version.h",
  "lib/libcudnn.so",
  "lib/libcudnn.so.8",
  "lib/libcudnn.so.8.0.5",
  "lib/libcudnn_adv_infer.so",
  "lib/libcudnn_adv_infer.so.8",
  "lib/libcudnn_adv_infer.so.8.0.5",
  "lib/libcudnn_adv_train.so",
  "lib/libcudnn_adv_train.so.8",
  "lib/libcudnn_adv_train.so.8.0.5",
  "lib/libcudnn_cnn_infer.so",
  "lib/libcudnn_cnn_infer.so.8",
  "lib/libcudnn_cnn_infer.so.8.0.5",
  "lib/libcudnn_cnn_train.so",
  "lib/libcudnn_cnn_train.so.8",
  "lib/libcudnn_cnn_train.so.8.0.5",
  "lib/libcudnn_ops_infer.so",
  "lib/libcudnn_ops_infer.so.8",
  "lib/libcudnn_ops_infer.so.8.0.5",
  "lib/libcudnn_ops_train.so",
  "lib/libcudnn_ops_train.so.8",
  "lib/libcudnn_ops_train.so.8.0.5"
 ],
 "index": {
  "arch": "ppc64le",
  "build": "h69e801d_3",
  "build_number": 3,
  "constrains": [
   "__glibc >=2.17"
  ],
  "depends": [
   "__glibc >=2.17,<3.0.a0",
   "cudatoolkit 10.2.*",
   "libgcc-ng >=3.0",
   "libstdcxx-ng >=3.4"
  ],
  "license": "LicenseRef-cuDNN-Software-License-Agreement",
  "name": "cudnn",
  "platform": "linux",
  "subdir": "linux-ppc64le",
  "timestamp": 1628783769490,
  "version": "8.0.5.39"
 },
 "metadata_version": 1,
 "name": "cudnn",
 "raw_recipe": "{% set version = \"8.0.5.39\" %}\n\npackage:\n  name: cudnn\n  version: {{ version }}\n\nsource:\n  url: https://developer.download.nvidia.com/compute/redist/cudnn/v{{ \".\".join(version.split(\".\")[:3]) }}/cudnn-{{ cuda_compiler_version }}-linux-ppc64le-v{{ version }}.tgz  # [ppc64le]\n  sha256: ce128ea090b05e36d00ffe921e45982ca10e8207e40cfc2e0067d0f62d9b36f9  # [ppc64le and cuda_compiler_version == \"10.2\"]\n\nbuild:\n  number: 3\n  skip: True   # [(not ppc64le) or (cuda_compiler_version != \"10.2\")]\n  script_env:\n    # for some reason /usr/local/cuda is not added to $PATH in ppc64le's docker image\n    - CUDA_HOME  # [ppc64le]\n  script:\n    - mkdir -p $PREFIX/include               # [unix]\n    - cd targets/ppc64le-linux          # [ppc64le]\n    - cp include/cudnn*.h $PREFIX/include/    # [unix]\n    - mkdir -p $PREFIX/lib                   # [unix]\n    - mv lib64/libcudnn*.so* $PREFIX/lib/     # [linux64]\n    - mv lib/libcudnn*.so* $PREFIX/lib/       # [ppc64le]\n    - mkdir %LIBRARY_INC%                    # [win]\n    - copy %SRC_DIR%\\\\include\\\\cudnn*.h %LIBRARY_INC%\\\\     # [win]\n    - mkdir %LIBRARY_LIB%                    # [win]\n    - copy %SRC_DIR%\\\\lib\\\\x64\\\\cudnn*.lib %LIBRARY_LIB%\\\\  # [win]\n    - mkdir %LIBRARY_BIN%                    # [win]\n    - copy %SRC_DIR%\\\\bin\\\\cudnn*_8.dll %LIBRARY_BIN%\\\\     # [win]\n  ignore_run_exports_from:\n    - {{ compiler('c') }}    # [linux]\n    - {{ compiler('cuda') }}\n  run_exports:\n    - {{ pin_subpackage('cudnn') }}\n\nrequirements:\n  build:\n    - {{ compiler('c') }}\n    - {{ compiler('cuda') }}\n    - sysroot_linux-64 2.17  # [linux]\n  host:\n    - patchelf >=0.12  # [linux]\n  run:\n    # Only GCC_3.0 or older symbols present\n    - libgcc-ng >=3.0     # [linux]\n    # Only GLIBCXX_3.4 or older symbols present\n    - libstdcxx-ng >=3.4  # [linux]\n    - cudatoolkit {{ cuda_compiler_version }}  # [cuda_compiler_version == \"10.2\"]\n    - cudatoolkit 11.*  # [cuda_compiler_version == \"11.2\"]\n  run_constrained:\n    # Only GLIBC_2.17 or older symbols present\n    - __glibc >=2.17      # [ppc64le]\n\ntest:\n  requires:\n    - {{ compiler('c') }}  # [ppc64le]\n  files:\n    - test_load_elf.c      # [ppc64le]\n  commands:\n    - if not exist %LIBRARY_INC%/cudnn.h exit 1        # [win]\n    - if not exist %LIBRARY_INC%/cudnn_adv_train.h exit 1  # [win]\n    - if not exist %LIBRARY_LIB%/cudnn.lib exit 1      # [win]\n    - if not exist %LIBRARY_LIB%/cudnn_adv_train.lib exit 1      # [win]\n    - if not exist %LIBRARY_BIN%/cudnn64_8.dll exit 1  # [win]\n    - if not exist %LIBRARY_BIN%/cudnn_adv_train64_8.dll exit 1  # [win]\n    - test -f $PREFIX/include/cudnn.h                  # [linux]\n    - test -f $PREFIX/include/cudnn_adv_train.h        # [linux]\n    - test -f $PREFIX/lib/libcudnn.so                  # [linux]\n    - test -f $PREFIX/lib/libcudnn_adv_train.so        # [linux]\n    - ${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf  # [ppc64le]\n    - for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done  # [ppc64le]\n\nabout:\n  home: https://developer.nvidia.com/cudnn\n  license: LicenseRef-cuDNN-Software-License-Agreement\n  license_file: targets/ppc64le-linux/NVIDIA_SLA_cuDNN_Support.txt  # [ppc64le]\n  license_file: NVIDIA_SLA_cuDNN_Support.txt  # [not ppc64le]\n  license_url: https://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n  summary: \"NVIDIA's cuDNN deep neural network acceleration library\"\n  description: |\n    NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of\n    primitives for deep neural networks. It provides highly tuned\n    implementations of routines arising frequently in DNN applications.\n\n    License Agreements:- The packages are governed by the NVIDIA cuDNN\n    Software License Agreement (EULA). By downloading and using the packages,\n    you accept the terms and conditions of the NVIDIA cuDNN EULA -\n    https://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n  doc_url: https://docs.nvidia.com/deeplearning/cudnn/\n  dev_url: https://developer.nvidia.com/rdp/cudnn-download\n\nextra:\n  recipe-maintainers:\n    - leofang\n    - kkraus14\n",
 "rendered_recipe": {
  "about": {
   "description": "NVIDIA CUDA Deep Neural Network (cuDNN) is a GPU-accelerated library of\nprimitives for deep neural networks. It provides highly tuned\nimplementations of routines arising frequently in DNN applications.\n\nLicense Agreements:- The packages are governed by the NVIDIA cuDNN\nSoftware License Agreement (EULA). By downloading and using the packages,\nyou accept the terms and conditions of the NVIDIA cuDNN EULA -\nhttps://docs.nvidia.com/deeplearning/cudnn/sla/index.html\n",
   "dev_url": "https://developer.nvidia.com/rdp/cudnn-download",
   "doc_url": "https://docs.nvidia.com/deeplearning/cudnn/",
   "home": "https://developer.nvidia.com/cudnn",
   "license": "LicenseRef-cuDNN-Software-License-Agreement",
   "license_file": "targets/ppc64le-linux/NVIDIA_SLA_cuDNN_Support.txt",
   "license_url": "https://docs.nvidia.com/deeplearning/cudnn/sla/index.html",
   "summary": "NVIDIA's cuDNN deep neural network acceleration library"
  },
  "build": {
   "ignore_run_exports_from": [
    "gcc_linux-ppc64le 8.*",
    "nvcc_linux-ppc64le 10.2.*"
   ],
   "number": "3",
   "run_exports": [
    "cudnn >=8.0.5.39,<9.0a0"
   ],
   "script": [
    "mkdir -p $PREFIX/include",
    "cd targets/ppc64le-linux",
    "cp include/cudnn*.h $PREFIX/include/",
    "mkdir -p $PREFIX/lib",
    "mv lib/libcudnn*.so* $PREFIX/lib/"
   ],
   "script_env": [
    "CUDA_HOME"
   ],
   "string": "h69e801d_3"
  },
  "extra": {
   "copy_test_source_files": true,
   "final": true,
   "recipe-maintainers": [
    "kkraus14",
    "leofang"
   ]
  },
  "package": {
   "name": "cudnn",
   "version": "8.0.5.39"
  },
  "requirements": {
   "build": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "_sysroot_linux-64_curr_repodata_hack 3 h5bd9786_12",
    "binutils_impl_linux-ppc64le 2.36.1 h5836da8_2",
    "binutils_linux-ppc64le 2.36 he035471_33",
    "gcc_impl_linux-ppc64le 8.4.0 h37540d7_17",
    "gcc_linux-ppc64le 8.4.0 he2cb99e_33",
    "kernel-headers_linux-64 3.10.0 h4a8ded7_12",
    "kernel-headers_linux-ppc64le 3.10.0 h23d7e6c_12",
    "ld_impl_linux-ppc64le 2.36.1 ha35d02b_2",
    "libgcc-devel_linux-ppc64le 8.4.0 hbb93445_17",
    "libgcc-ng 9.3.0 hc7a5eb4_18",
    "libgomp 9.3.0 hc7a5eb4_18",
    "libstdcxx-ng 11.1.0 h8186cfa_8",
    "nvcc_linux-ppc64le 10.2 hb3d3a0a_13",
    "sed 4.8 ha07698b_0",
    "sysroot_linux-64 2.17 h4a8ded7_12",
    "sysroot_linux-ppc64le 2.17 h395ec9b_12"
   ],
   "host": [
    "_libgcc_mutex 0.1 conda_forge",
    "_openmp_mutex 4.5 1_gnu",
    "libgcc-ng 11.1.0 h16e2c27_8",
    "libgomp 11.1.0 h16e2c27_8",
    "libstdcxx-ng 11.1.0 h8186cfa_8",
    "patchelf 0.13 hea85c5d_0"
   ],
   "run": [
    "__glibc >=2.17,<3.0.a0",
    "cudatoolkit 10.2.*",
    "libgcc-ng >=3.0",
    "libstdcxx-ng >=3.4"
   ],
   "run_constrained": [
    "__glibc >=2.17"
   ]
  },
  "source": {
   "sha256": "ce128ea090b05e36d00ffe921e45982ca10e8207e40cfc2e0067d0f62d9b36f9",
   "url": "https://developer.download.nvidia.com/compute/redist/cudnn/v8.0.5/cudnn-10.2-linux-ppc64le-v8.0.5.39.tgz"
  },
  "test": {
   "commands": [
    "test -f $PREFIX/include/cudnn.h",
    "test -f $PREFIX/include/cudnn_adv_train.h",
    "test -f $PREFIX/lib/libcudnn.so",
    "test -f $PREFIX/lib/libcudnn_adv_train.so",
    "${GCC} test_load_elf.c -std=c99 -Werror -ldl -o test_load_elf",
    "for f in $PREFIX/lib/libcudnn*.so; do ./test_load_elf $f; done"
   ],
   "files": [
    "test_load_elf.c"
   ],
   "requires": [
    "gcc_linux-ppc64le 8.*"
   ]
  }
 },
 "version": "8.0.5.39"
}